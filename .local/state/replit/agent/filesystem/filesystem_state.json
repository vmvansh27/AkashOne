{"file_contents":{"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/examples/AllKubernetes.tsx":{"content":"import AllKubernetes from '../../pages/all-kubernetes';\n\nexport default function AllKubernetesExample() {\n  return <AllKubernetes />;\n}\n","size_bytes":136},"client/src/pages/object-storage.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Plus,\n  Search,\n  Trash2,\n  Folder,\n  File,\n  Download,\n  Upload,\n  Lock,\n  Unlock,\n  Copy,\n  Settings,\n  Cloud,\n  HardDrive,\n  TrendingUp,\n  Globe2,\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface Bucket {\n  id: string;\n  name: string;\n  region: string;\n  visibility: \"public\" | \"private\";\n  objectCount: number;\n  size: number;\n  created: string;\n  encryption: boolean;\n  versioning: boolean;\n}\n\ninterface StorageObject {\n  id: string;\n  bucketId: string;\n  name: string;\n  size: number;\n  type: string;\n  lastModified: string;\n  url?: string;\n}\n\nconst mockBuckets: Bucket[] = [\n  {\n    id: \"bucket-1\",\n    name: \"production-assets\",\n    region: \"us-east-1\",\n    visibility: \"public\",\n    objectCount: 1245,\n    size: 15.7,\n    created: \"2024-09-15\",\n    encryption: true,\n    versioning: true,\n  },\n  {\n    id: \"bucket-2\",\n    name: \"user-uploads\",\n    region: \"us-west-2\",\n    visibility: \"private\",\n    objectCount: 3890,\n    size: 42.3,\n    created: \"2024-08-20\",\n    encryption: true,\n    versioning: false,\n  },\n  {\n    id: \"bucket-3\",\n    name: \"app-backups\",\n    region: \"eu-central-1\",\n    visibility: \"private\",\n    objectCount: 156,\n    size: 120.5,\n    created: \"2024-10-01\",\n    encryption: true,\n    versioning: true,\n  },\n];\n\nconst mockObjects: StorageObject[] = [\n  {\n    id: \"obj-1\",\n    bucketId: \"bucket-1\",\n    name: \"logo.png\",\n    size: 0.125,\n    type: \"image/png\",\n    lastModified: \"2024-10-08\",\n  },\n  {\n    id: \"obj-2\",\n    bucketId: \"bucket-1\",\n    name: \"styles.css\",\n    size: 0.032,\n    type: \"text/css\",\n    lastModified: \"2024-10-07\",\n  },\n  {\n    id: \"obj-3\",\n    bucketId: \"bucket-1\",\n    name: \"script.js\",\n    size: 0.089,\n    type: \"text/javascript\",\n    lastModified: \"2024-10-06\",\n  },\n];\n\nexport default function ObjectStorage() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedBucket, setSelectedBucket] = useState<Bucket | null>(null);\n  const [createBucketOpen, setCreateBucketOpen] = useState(false);\n  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);\n  const [buckets, setBuckets] = useState<Bucket[]>(mockBuckets);\n  const [objects, setObjects] = useState<StorageObject[]>(mockObjects);\n  const [newBucket, setNewBucket] = useState({\n    name: \"\",\n    region: \"us-east-1\",\n    visibility: \"private\" as \"public\" | \"private\",\n    encryption: true,\n    versioning: false,\n  });\n\n  const filteredBuckets = buckets.filter((bucket) =>\n    bucket.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const currentBucketObjects = selectedBucket\n    ? objects.filter((obj) => obj.bucketId === selectedBucket.id)\n    : [];\n\n  const handleCreateBucket = () => {\n    const bucket: Bucket = {\n      id: `bucket-${Date.now()}`,\n      name: newBucket.name,\n      region: newBucket.region,\n      visibility: newBucket.visibility,\n      objectCount: 0,\n      size: 0,\n      created: new Date().toISOString().split(\"T\")[0],\n      encryption: newBucket.encryption,\n      versioning: newBucket.versioning,\n    };\n\n    setBuckets([...buckets, bucket]);\n    toast({\n      title: \"Bucket Created\",\n      description: `S3 bucket \"${bucket.name}\" has been created successfully.`,\n    });\n    setCreateBucketOpen(false);\n    setNewBucket({\n      name: \"\",\n      region: \"us-east-1\",\n      visibility: \"private\",\n      encryption: true,\n      versioning: false,\n    });\n  };\n\n  const handleDeleteBucket = (bucket: Bucket) => {\n    if (confirm(`Are you sure you want to delete \"${bucket.name}\"? This action cannot be undone.`)) {\n      setBuckets(buckets.filter((b) => b.id !== bucket.id));\n      if (selectedBucket?.id === bucket.id) {\n        setSelectedBucket(null);\n      }\n      toast({\n        title: \"Bucket Deleted\",\n        description: `Bucket \"${bucket.name}\" has been deleted.`,\n      });\n    }\n  };\n\n  const handleCopyEndpoint = (bucket: Bucket) => {\n    const endpoint = `https://s3.${bucket.region}.akashone.com/${bucket.name}`;\n    navigator.clipboard.writeText(endpoint);\n    toast({\n      title: \"Copied\",\n      description: \"S3 endpoint URL copied to clipboard\",\n    });\n  };\n\n  const formatSize = (gb: number) => {\n    if (gb >= 1000) return `${(gb / 1000).toFixed(2)} TB`;\n    if (gb >= 1) return `${gb.toFixed(2)} GB`;\n    return `${(gb * 1024).toFixed(2)} MB`;\n  };\n\n  const totalStorage = buckets.reduce((sum, b) => sum + b.size, 0);\n  const totalObjects = buckets.reduce((sum, b) => sum + b.objectCount, 0);\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Object Storage</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            S3-compatible object storage with unlimited scalability\n          </p>\n        </div>\n        <Dialog open={createBucketOpen} onOpenChange={setCreateBucketOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-bucket\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Bucket\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create S3 Bucket</DialogTitle>\n              <DialogDescription>\n                Create a new bucket to store objects in the cloud\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"bucket-name\">Bucket Name</Label>\n                <Input\n                  id=\"bucket-name\"\n                  placeholder=\"my-bucket\"\n                  value={newBucket.name}\n                  onChange={(e) => setNewBucket({ ...newBucket, name: e.target.value })}\n                  data-testid=\"input-bucket-name\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Must be globally unique, lowercase, and DNS-compliant\n                </p>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"region\">Region</Label>\n                <Select\n                  value={newBucket.region}\n                  onValueChange={(value) => setNewBucket({ ...newBucket, region: value })}\n                >\n                  <SelectTrigger id=\"region\" data-testid=\"select-region\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"us-east-1\">US East (N. Virginia)</SelectItem>\n                    <SelectItem value=\"us-west-2\">US West (Oregon)</SelectItem>\n                    <SelectItem value=\"eu-central-1\">EU (Frankfurt)</SelectItem>\n                    <SelectItem value=\"ap-south-1\">Asia Pacific (Mumbai)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"visibility\">Visibility</Label>\n                <Select\n                  value={newBucket.visibility}\n                  onValueChange={(value: \"public\" | \"private\") =>\n                    setNewBucket({ ...newBucket, visibility: value })\n                  }\n                >\n                  <SelectTrigger id=\"visibility\" data-testid=\"select-visibility\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"private\">Private (Authenticated Access)</SelectItem>\n                    <SelectItem value=\"public\">Public (Open Access)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Server-Side Encryption</p>\n                  <p className=\"text-sm text-muted-foreground\">AES-256 encryption at rest</p>\n                </div>\n                <Button\n                  variant={newBucket.encryption ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setNewBucket({ ...newBucket, encryption: !newBucket.encryption })}\n                  data-testid=\"button-toggle-encryption\"\n                >\n                  {newBucket.encryption ? \"Enabled\" : \"Disabled\"}\n                </Button>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Versioning</p>\n                  <p className=\"text-sm text-muted-foreground\">Keep multiple versions of objects</p>\n                </div>\n                <Button\n                  variant={newBucket.versioning ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setNewBucket({ ...newBucket, versioning: !newBucket.versioning })}\n                  data-testid=\"button-toggle-versioning\"\n                >\n                  {newBucket.versioning ? \"Enabled\" : \"Disabled\"}\n                </Button>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCreateBucketOpen(false)}\n                data-testid=\"button-cancel-create\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateBucket}\n                disabled={!newBucket.name}\n                data-testid=\"button-confirm-create\"\n              >\n                Create Bucket\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Buckets</CardTitle>\n            <Folder className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-buckets\">\n              {buckets.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Active storage buckets</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Objects</CardTitle>\n            <File className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-objects\">\n              {totalObjects.toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Stored files and objects</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Storage</CardTitle>\n            <HardDrive className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-storage\">\n              {formatSize(totalStorage)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Used storage space</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Public Buckets</CardTitle>\n            <Globe2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-public-buckets\">\n              {buckets.filter((b) => b.visibility === \"public\").length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Publicly accessible</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Storage Buckets</CardTitle>\n              <div className=\"relative w-64\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search buckets...\"\n                  className=\"pl-9\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-buckets\"\n                />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {filteredBuckets.map((bucket) => (\n                <Card\n                  key={bucket.id}\n                  className={`cursor-pointer hover-elevate ${\n                    selectedBucket?.id === bucket.id ? \"border-primary\" : \"\"\n                  }`}\n                  onClick={() => setSelectedBucket(bucket)}\n                  data-testid={`card-bucket-${bucket.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start gap-3 flex-1\">\n                        <div className=\"p-2 rounded-lg bg-muted\">\n                          <Folder className=\"h-5 w-5 text-blue-500\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <p className=\"font-medium truncate\">{bucket.name}</p>\n                            {bucket.visibility === \"public\" ? (\n                              <Unlock className=\"h-3 w-3 text-orange-500\" />\n                            ) : (\n                              <Lock className=\"h-3 w-3 text-green-500\" />\n                            )}\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {bucket.region}\n                            </Badge>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-2 text-xs text-muted-foreground\">\n                            <p>{bucket.objectCount} objects</p>\n                            <p>{formatSize(bucket.size)}</p>\n                          </div>\n                          {(bucket.encryption || bucket.versioning) && (\n                            <div className=\"flex gap-2 mt-2\">\n                              {bucket.encryption && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  Encrypted\n                                </Badge>\n                              )}\n                              {bucket.versioning && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  Versioned\n                                </Badge>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-1\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleCopyEndpoint(bucket);\n                          }}\n                          data-testid={`button-copy-${bucket.id}`}\n                        >\n                          <Copy className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleDeleteBucket(bucket);\n                          }}\n                          data-testid={`button-delete-${bucket.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              {filteredBuckets.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <Folder className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No buckets found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchTerm ? \"Try adjusting your search\" : \"Create your first S3 bucket\"}\n                  </p>\n                  {!searchTerm && (\n                    <Button onClick={() => setCreateBucketOpen(true)} data-testid=\"button-create-first\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create Bucket\n                    </Button>\n                  )}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>\n                {selectedBucket ? `Objects in ${selectedBucket.name}` : \"Select a Bucket\"}\n              </CardTitle>\n              {selectedBucket && (\n                <Button size=\"sm\" data-testid=\"button-upload-file\">\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  Upload\n                </Button>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            {selectedBucket ? (\n              <div className=\"space-y-2\">\n                {currentBucketObjects.length > 0 ? (\n                  currentBucketObjects.map((obj) => (\n                    <Card key={obj.id} className=\"hover-elevate\" data-testid={`card-object-${obj.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"p-2 rounded-lg bg-muted\">\n                              <File className=\"h-4 w-4 text-muted-foreground\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{obj.name}</p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {formatSize(obj.size)} • {obj.type}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex gap-1\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"icon\"\n                              data-testid={`button-download-${obj.id}`}\n                            >\n                              <Download className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"icon\"\n                              data-testid={`button-delete-object-${obj.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <File className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No objects</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      This bucket is empty. Upload some files to get started.\n                    </p>\n                    <Button data-testid=\"button-upload-empty\">\n                      <Upload className=\"h-4 w-4 mr-2\" />\n                      Upload Files\n                    </Button>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Cloud className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No bucket selected</h3>\n                <p className=\"text-muted-foreground\">\n                  Select a bucket from the left to view its contents\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21656},"client/src/components/status-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\nexport type VMStatus = \"running\" | \"stopped\" | \"error\" | \"starting\";\n\ninterface StatusBadgeProps {\n  status: VMStatus;\n}\n\nconst statusConfig = {\n  running: {\n    label: \"Running\",\n    className: \"bg-chart-2/10 text-chart-2 border-chart-2/20\",\n  },\n  stopped: {\n    label: \"Stopped\",\n    className: \"bg-muted text-muted-foreground border-border\",\n  },\n  error: {\n    label: \"Error\",\n    className: \"bg-destructive/10 text-destructive border-destructive/20\",\n  },\n  starting: {\n    label: \"Starting\",\n    className: \"bg-chart-3/10 text-chart-3 border-chart-3/20\",\n  },\n};\n\nexport function StatusBadge({ status }: StatusBadgeProps) {\n  const config = statusConfig[status];\n  \n  return (\n    <Badge variant=\"outline\" className={config.className} data-testid={`status-${status}`}>\n      <span className=\"mr-1.5 inline-block h-1.5 w-1.5 rounded-full bg-current\" />\n      {config.label}\n    </Badge>\n  );\n}\n","size_bytes":948},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"design_guidelines.md":{"content":"# AkashOne.com - Azure-Inspired Cloud Management Portal Design Guidelines\n\n## Design Approach\n\n**Selected System:** Microsoft Azure Design Language\n- **Primary Reference:** Azure Portal (enterprise cloud management)\n- **Supporting References:** Fluent Design System, Microsoft 365 Admin Center\n- **Rationale:** CloudStack management demands the same enterprise-grade professionalism as Azure. We'll adopt Microsoft's refined blue palette, Fluent typography, and proven dashboard patterns for immediate familiarity and trust.\n- **Brand Identity:** AkashOne.com - unit of Mieux Technologies Pvt Ltd\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode (Primary):**\n- Background Base: 220 20% 10%\n- Background Elevated: 220 18% 14%\n- Background Hover: 220 16% 18%\n- Text Primary: 0 0% 100%\n- Text Secondary: 210 10% 70%\n- Text Muted: 210 8% 50%\n- Primary Azure: 207 100% 50% (Azure Blue #0078D4)\n- Primary Hover: 207 90% 45%\n- Accent Light: 205 100% 85% (Light Azure accents)\n- Success: 142 70% 45%\n- Warning: 40 95% 55%\n- Error: 0 85% 58%\n- Border: 220 15% 25%\n- Border Subtle: 220 12% 20%\n\n**Light Mode:**\n- Background Base: 0 0% 100%\n- Background Elevated: 0 0% 98%\n- Background Hover: 210 20% 96%\n- Text Primary: 210 15% 15%\n- Text Secondary: 210 10% 40%\n- Primary Azure: 207 100% 42%\n- Border: 210 15% 85%\n\n### B. Typography\n\n**Font Families:**\n- Primary: 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Inter' fallback (Microsoft standard)\n- Monospace: 'Cascadia Code', 'JetBrains Mono' fallback\n\n**Type Scale:**\n- Page Title: 2rem (32px), weight: 600, tracking: -0.02em\n- Section Header: 1.5rem (24px), weight: 600\n- Card Title: 1.125rem (18px), weight: 600\n- Body: 0.875rem (14px), weight: 400\n- Small: 0.75rem (12px), weight: 400\n- Data/Mono: 0.8125rem (13px), weight: 400\n\n### C. Layout System\n\n**Spacing Primitives:** 2, 3, 4, 6, 8, 12, 16, 20, 24\n- Card padding: p-6\n- Section spacing: gap-8, py-12\n- Component gaps: gap-4, gap-6\n- Table cells: px-4 py-3\n- Form elements: gap-3\n\n**Grid Containers:**\n- Sidebar: 260px fixed, collapsible to 60px (icon-only)\n- Content: max-w-[1600px] mx-auto px-8\n- Dashboard metrics: grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\n- Resource cards: grid-cols-1 xl:grid-cols-2 gap-6\n\n### D. Component Library\n\n**Navigation Architecture:**\n- **Command Bar:** Fixed top (h-12), Azure blue background, white text, breadcrumb navigation, search, notifications, user avatar\n- **Left Sidebar:** Dark elevated background, grouped sections with expanders, Heroicons (24px), active state with vertical Azure accent bar (4px left border)\n- **Page Header:** Background elevated, p-6 pb-4, includes page title, description, primary action button\n\n**Dashboard Cards:**\n- **Metric Cards:** Elevated background, rounded-lg, p-6, subtle border, hover effect (lift shadow)\n  - Large metric: text-4xl font-semibold in Azure blue\n  - Label: text-sm text-secondary uppercase tracking-wide\n  - Trend: Small sparkline chart (Chart.js) or arrow indicator with percentage\n  - Grid: 4 columns (Total VMs, Running Instances, Total vCPUs, Memory Used)\n\n**Data Tables (Azure Pattern):**\n- **Header Row:** Background hover, border-b-2 border-Azure, text-xs font-semibold uppercase tracking-wider\n- **Data Rows:** Border-b border-subtle, hover background-hover, 48px min-height\n- **Columns:** Checkbox (40px), Status indicator (dot + text), Name (bold), Technical details (mono font), Actions (right-aligned)\n- **Toolbar:** Top section with search bar (w-80), filter chips, action buttons, bulk operations when selected\n- **Pagination:** Bottom bar with \"1-50 of 234 items\", page size selector, prev/next buttons\n\n**Forms & Inputs:**\n- **Text Inputs:** Background elevated, border-2 border, rounded-md, h-10, px-3, focus:border-Azure focus:ring-2 ring-Azure/20\n- **Dropdowns:** Azure Fluent style with chevron, max-height for scroll\n- **VM Creation Wizard:** Stepped progression (5 steps: Basics, Size, Disks, Networking, Review), Azure blue progress bar, step numbers in circles\n- **Toggle Switches:** Fluent design pill style, Azure blue when active\n- **Validation:** Inline below field, error color with error icon\n\n**Status & Badges:**\n- **Running:** Green dot (h-2 w-2 rounded-full), text in success color\n- **Stopped:** Gray dot, muted text\n- **Failed:** Red dot, error text\n- **Starting/Stopping:** Animated pulse dot, Azure text\n- **Badge Style:** px-2.5 py-0.5 rounded-full text-xs font-medium\n\n**Buttons (Azure Fluent):**\n- **Primary:** bg-Azure text-white rounded px-4 py-2 font-medium hover:bg-Azure-hover, min-w-24\n- **Secondary:** border-2 border-Azure text-Azure bg-transparent, hover:bg-Azure/5\n- **Danger:** bg-error text-white for destructive actions\n- **Icon Buttons:** p-2 rounded hover:bg-hover with Heroicons\n\n**Panels & Modals:**\n- **Side Panel (Details):** Slides from right, w-[640px], elevated background, shadow-2xl\n- **Modal:** Centered, max-w-3xl, rounded-lg, shadow-2xl, backdrop blur\n- **Header:** Azure blue accent bar (h-1) at top, p-6 pb-4\n- **Footer:** p-6 pt-4 border-t, actions right-aligned\n\n**Charts & Monitoring:**\n- **Line Charts:** Azure blue primary line, light blue fill gradient, Chart.js\n- **Donut Charts:** Multi-color segments with Azure dominant\n- **Metric Tiles:** Current value large, mini historical sparkline below\n- **Time Range Selector:** Pills for 1h, 6h, 24h, 7d, 30d\n\n### E. Key Screen Structures\n\n**Dashboard:**\n- **Command Bar** with \"Overview\" breadcrumb\n- **Quick Actions Row:** 3 large cards (Create VM, Deploy from Template, Network Setup) with icons, hover lift\n- **Metrics Grid:** 4 metric cards with real-time data\n- **Recent Resources:** Table showing 10 most recent VMs with quick actions\n- **Alerts Panel:** Right sidebar (360px) with warning/error notifications, expandable\n\n**VM Management:**\n- **Page Header:** \"Virtual Machines\" title, \"Create VM\" primary button, \"Refresh\" secondary\n- **Filters Bar:** Search input (icon left), Status dropdown, Zone selector, Template filter, \"Clear all\" link\n- **Data Table:** Columns - Checkbox, Status, Name, Public IP (mono), Template, Size, Zone, Actions (3-dot menu)\n- **Selected Actions Bar:** Appears when items checked, bulk Start/Stop/Delete\n\n**VM Details:**\n- **Header:** VM name (h1), status badge, action buttons row (Start/Stop/Restart/Console/Delete)\n- **Tab Navigation:** Overview, Monitoring, Networking, Storage, Snapshots, Settings (Azure tab style with bottom border on active)\n- **Overview Tab:** 2-column layout - Left: Specs card, Right: Network & Security card\n- **Monitoring Tab:** Time range selector top-right, 2x2 grid of charts (CPU, Memory, Disk I/O, Network)\n\n**Create VM Wizard:**\n- **Progress Header:** 5 steps with connected line, current step in Azure blue\n- **Step Content:** Max-w-2xl centered, form fields with descriptions\n- **Navigation:** Previous/Next buttons bottom-right, \"Review + create\" on final step\n- **Review Step:** Summary cards grouped by category, \"Create\" primary button\n\n**Billing Dashboard:**\n- **Current Cost Card:** Large number with month-to-date label, trend vs last month\n- **Cost Breakdown:** Donut chart with legend showing VM instances, storage, network, snapshots\n- **Invoice Table:** Sortable by date, amount, status with download PDF action\n\n### Images\n\n**Strategic Placement:**\n- **Dashboard Empty State:** Abstract cloud infrastructure illustration (servers, network topology) in Azure blue/gray tones, centered with \"No resources yet\" message\n- **VM List Empty:** Cloud server icon illustration with \"Create your first virtual machine\" CTA\n- **Network Empty State:** Minimalist network diagram illustration\n\n**NO hero images** - this is a utility dashboard application. Focus on data density and functional clarity.\n\n### Icons & Assets\n\n- **Icon Library:** Heroicons via CDN exclusively\n- **Sizes:** 20px inline, 24px buttons, 48px empty states\n- **Style:** Outline variant for navigation, solid for status indicators\n\n### Animations\n\n**Minimal Motion:**\n- Table hover: background transition (100ms)\n- Button hover: subtle lift (150ms)\n- Modal/panel entry: fade + slide (250ms ease-out)\n- Loading states: Azure blue spinner animation\n- **NO** scroll effects or decorative animations\n\n### Accessibility\n\n- Focus rings: 2px ring-Azure ring-offset-2\n- Min touch target: 44px\n- Table semantic structure: proper thead/tbody\n- Form labels: associated with inputs, aria-labels for icon buttons\n- Dark mode consistency: all inputs maintain elevated background\n\nThis design creates an enterprise-grade cloud management interface with Microsoft Azure's proven visual language, prioritizing professional clarity and operational efficiency.","size_bytes":8627},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  gstNumber: text(\"gst_number\").notNull(), // Mandatory GST number for Indian business compliance\n  emailVerified: boolean(\"email_verified\").default(false),\n  emailVerificationCode: text(\"email_verification_code\"),\n  emailVerificationExpiry: timestamp(\"email_verification_expiry\"),\n  twoFactorSecret: text(\"two_factor_secret\"),\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false),\n  accountType: text(\"account_type\").notNull().default(\"customer\"), // super_admin, reseller, customer, team_member\n  organizationId: varchar(\"organization_id\"), // References the parent organization/reseller\n  defaultDiscountPercentage: integer(\"default_discount_percentage\").default(0), // Permanent discount % assigned by super admin (0-100)\n  status: text(\"status\").notNull().default(\"active\"), // active, suspended, invited\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastLogin: timestamp(\"last_login\"),\n});\n\nexport const kubernetesClusters = pgTable(\"kubernetes_clusters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  version: text(\"version\").notNull(),\n  status: text(\"status\").notNull().default(\"creating\"),\n  masterNodes: integer(\"master_nodes\").notNull(),\n  workerNodes: integer(\"worker_nodes\").notNull(),\n  region: text(\"region\").notNull(),\n  instanceType: text(\"instance_type\").notNull(),\n  autoHealing: boolean(\"auto_healing\").notNull().default(true),\n  autoScaling: boolean(\"auto_scaling\").notNull().default(false),\n  cpuUsed: integer(\"cpu_used\").notNull().default(0),\n  cpuTotal: integer(\"cpu_total\").notNull(),\n  memoryUsed: integer(\"memory_used\").notNull().default(0),\n  memoryTotal: integer(\"memory_total\").notNull(),\n  podsRunning: integer(\"pods_running\").notNull().default(0),\n  podsTotal: integer(\"pods_total\").notNull().default(250),\n  health: text(\"health\").notNull().default(\"healthy\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  userId: varchar(\"user_id\").references(() => users.id),\n});\n\nexport const databases = pgTable(\"databases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  engine: text(\"engine\").notNull(),\n  version: text(\"version\").notNull(),\n  status: text(\"status\").notNull().default(\"creating\"),\n  storage: integer(\"storage\").notNull(),\n  cpu: integer(\"cpu\").notNull(),\n  memory: integer(\"memory\").notNull(),\n  region: text(\"region\").notNull(),\n  instanceType: text(\"instance_type\").notNull(),\n  endpoint: text(\"endpoint\").notNull(),\n  port: integer(\"port\").notNull(),\n  backupEnabled: boolean(\"backup_enabled\").notNull().default(true),\n  multiAZ: boolean(\"multi_az\").notNull().default(false),\n  connectionsCurrent: integer(\"connections_current\").notNull().default(0),\n  connectionsMax: integer(\"connections_max\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  userId: varchar(\"user_id\").references(() => users.id),\n});\n\nexport const dnsDomains = pgTable(\"dns_domains\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"),\n  recordCount: integer(\"record_count\").notNull().default(0),\n  dnssec: boolean(\"dnssec\").notNull().default(false),\n  nameservers: text(\"nameservers\").array().notNull().default(sql`ARRAY['ns1.akashone.com', 'ns2.akashone.com']::text[]`),\n  lastModified: timestamp(\"last_modified\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  userId: varchar(\"user_id\").references(() => users.id),\n});\n\nexport const dnsRecords = pgTable(\"dns_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  domainId: varchar(\"domain_id\").notNull().references(() => dnsDomains.id, { onDelete: 'cascade' }),\n  type: text(\"type\").notNull(),\n  name: text(\"name\").notNull(),\n  value: text(\"value\").notNull(),\n  ttl: integer(\"ttl\").notNull().default(3600),\n  priority: integer(\"priority\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  userId: varchar(\"user_id\").references(() => users.id),\n});\n\nexport const virtualMachines = pgTable(\"virtual_machines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cloudstackId: varchar(\"cloudstack_id\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  displayName: text(\"display_name\"),\n  state: text(\"state\").notNull().default(\"Creating\"),\n  templateId: varchar(\"template_id\").notNull(),\n  templateName: text(\"template_name\"),\n  serviceOfferingId: varchar(\"service_offering_id\").notNull(),\n  serviceOfferingName: text(\"service_offering_name\"),\n  zoneId: varchar(\"zone_id\").notNull(),\n  zoneName: text(\"zone_name\"),\n  cpu: integer(\"cpu\").notNull(),\n  memory: integer(\"memory\").notNull(),\n  diskSize: integer(\"disk_size\"),\n  ipAddress: text(\"ip_address\"),\n  publicIp: text(\"public_ip\"),\n  networkIds: text(\"network_ids\").array(),\n  tags: jsonb(\"tags\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastSynced: timestamp(\"last_synced\").defaultNow(),\n  userId: varchar(\"user_id\").references(() => users.id),\n});\n\nexport const discountCoupons = pgTable(\"discount_coupons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  discountType: text(\"discount_type\").notNull(), // \"percentage\" or \"fixed\"\n  discountValue: integer(\"discount_value\").notNull(), // percentage (1-100) or amount in INR\n  durationType: text(\"duration_type\").notNull(), // \"once\", \"forever\", \"repeating\"\n  durationMonths: integer(\"duration_months\"), // for \"repeating\" type\n  maxUses: integer(\"max_uses\"), // null = unlimited\n  timesUsed: integer(\"times_used\").notNull().default(0),\n  minOrderAmount: integer(\"min_order_amount\"), // minimum order amount in INR (paise)\n  validFrom: timestamp(\"valid_from\").defaultNow(),\n  validUntil: timestamp(\"valid_until\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  gstNumber: true,\n}).extend({\n  gstNumber: z.string().regex(/^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/, \"Invalid GST number format\"),\n});\n\nexport const insertKubernetesClusterSchema = createInsertSchema(kubernetesClusters).omit({\n  id: true,\n  createdAt: true,\n  cpuUsed: true,\n  memoryUsed: true,\n  podsRunning: true,\n  podsTotal: true,\n  health: true,\n  userId: true,\n});\n\nexport const insertDatabaseSchema = createInsertSchema(databases).omit({\n  id: true,\n  createdAt: true,\n  endpoint: true,\n  connectionsCurrent: true,\n  userId: true,\n});\n\nexport const insertDnsDomainSchema = createInsertSchema(dnsDomains).omit({\n  id: true,\n  createdAt: true,\n  lastModified: true,\n  recordCount: true,\n  userId: true,\n});\n\nexport const insertDnsRecordSchema = createInsertSchema(dnsRecords).omit({\n  id: true,\n  createdAt: true,\n  userId: true,\n});\n\nexport const insertVirtualMachineSchema = createInsertSchema(virtualMachines).omit({\n  id: true,\n  createdAt: true,\n  lastSynced: true,\n  userId: true,\n});\n\nexport const insertDiscountCouponSchema = createInsertSchema(discountCoupons).omit({\n  id: true,\n  createdAt: true,\n  timesUsed: true,\n  createdBy: true,\n}).extend({\n  code: z.string().min(3).max(50).toUpperCase(),\n  discountType: z.enum([\"percentage\", \"fixed\"]),\n  discountValue: z.number().int().positive(),\n  durationType: z.enum([\"once\", \"forever\", \"repeating\"]),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type KubernetesCluster = typeof kubernetesClusters.$inferSelect;\nexport type InsertKubernetesCluster = z.infer<typeof insertKubernetesClusterSchema>;\nexport type Database = typeof databases.$inferSelect;\nexport type InsertDatabase = z.infer<typeof insertDatabaseSchema>;\nexport type DnsDomain = typeof dnsDomains.$inferSelect;\nexport type InsertDnsDomain = z.infer<typeof insertDnsDomainSchema>;\nexport type DnsRecord = typeof dnsRecords.$inferSelect;\nexport type InsertDnsRecord = z.infer<typeof insertDnsRecordSchema>;\nexport type VirtualMachine = typeof virtualMachines.$inferSelect;\nexport type InsertVirtualMachine = z.infer<typeof insertVirtualMachineSchema>;\nexport type DiscountCoupon = typeof discountCoupons.$inferSelect;\nexport type InsertDiscountCoupon = z.infer<typeof insertDiscountCouponSchema>;\n\nexport const vmSnapshots = pgTable(\"vm_snapshots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cloudstackSnapshotId: varchar(\"cloudstack_snapshot_id\", { length: 255 }).notNull().unique(),\n  vmId: varchar(\"vm_id\").references(() => virtualMachines.id, { onDelete: \"cascade\" }).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  state: varchar(\"state\", { length: 50 }).notNull(),\n  snapshotMemory: boolean(\"snapshot_memory\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertVMSnapshotSchema = createInsertSchema(vmSnapshots).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type VMSnapshot = typeof vmSnapshots.$inferSelect;\nexport type InsertVMSnapshot = z.infer<typeof insertVMSnapshotSchema>;\n\nexport const featureFlags = pgTable(\"feature_flags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\", { length: 100 }).notNull().unique(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 50 }).notNull(),\n  enabled: boolean(\"enabled\").notNull().default(false),\n  icon: varchar(\"icon\", { length: 50 }),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertFeatureFlagSchema = createInsertSchema(featureFlags).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type FeatureFlag = typeof featureFlags.$inferSelect;\nexport type InsertFeatureFlag = z.infer<typeof insertFeatureFlagSchema>;\n\n// IAM - Roles\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  isSystem: boolean(\"is_system\").notNull().default(false), // System roles cannot be deleted\n  organizationId: varchar(\"organization_id\").references(() => users.id), // null for system roles, organizationId for custom roles\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// IAM - Permissions\nexport const permissions = pgTable(\"permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\", { length: 100 }).notNull().unique(), // e.g., \"vm.create\", \"billing.view\"\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 50 }).notNull(), // e.g., \"Compute\", \"Networking\", \"Billing\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// IAM - Role Permissions (Many-to-Many)\nexport const rolePermissions = pgTable(\"role_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  roleId: varchar(\"role_id\").notNull().references(() => roles.id, { onDelete: \"cascade\" }),\n  permissionId: varchar(\"permission_id\").notNull().references(() => permissions.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// IAM - User Roles (Many-to-Many)\nexport const userRoles = pgTable(\"user_roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  roleId: varchar(\"role_id\").notNull().references(() => roles.id, { onDelete: \"cascade\" }),\n  grantedBy: varchar(\"granted_by\").references(() => users.id), // Who assigned this role\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// IAM - Team Members (Invitation tracking)\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }), // null until invitation accepted\n  organizationId: varchar(\"organization_id\").notNull().references(() => users.id), // The organization they're invited to\n  status: text(\"status\").notNull().default(\"invited\"), // invited, active, suspended\n  invitedBy: varchar(\"invited_by\").notNull().references(() => users.id),\n  invitationToken: varchar(\"invitation_token\", { length: 255 }),\n  invitedAt: timestamp(\"invited_at\").defaultNow().notNull(),\n  joinedAt: timestamp(\"joined_at\"),\n});\n\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRolePermissionSchema = createInsertSchema(rolePermissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserRoleSchema = createInsertSchema(userRoles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({\n  id: true,\n  invitedAt: true,\n  joinedAt: true,\n});\n\nexport type Role = typeof roles.$inferSelect;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type Permission = typeof permissions.$inferSelect;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type RolePermission = typeof rolePermissions.$inferSelect;\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\nexport type UserRole = typeof userRoles.$inferSelect;\nexport type InsertUserRole = z.infer<typeof insertUserRoleSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\n\n// Activity Logging\nexport const userActivities = pgTable(\"user_activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  username: text(\"username\").notNull(), // Denormalized for reporting\n  action: text(\"action\").notNull(), // \"login\", \"vm.create\", \"vm.delete\", \"vm.start\", \"vm.stop\", etc.\n  resourceType: text(\"resource_type\"), // \"vm\", \"kubernetes\", \"database\", etc.\n  resourceId: varchar(\"resource_id\"), // ID of the resource\n  resourceName: text(\"resource_name\"), // Name of the resource for display\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  metadata: jsonb(\"metadata\"), // Additional context (e.g., VM specs, region, etc.)\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserActivitySchema = createInsertSchema(userActivities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type UserActivity = typeof userActivities.$inferSelect;\nexport type InsertUserActivity = z.infer<typeof insertUserActivitySchema>;\n","size_bytes":15754},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/examples/ResourceChart.tsx":{"content":"import { ResourceChart } from '../resource-chart';\n\nconst mockData = Array.from({ length: 12 }, (_, i) => ({\n  time: `${i * 2}h`,\n  value: Math.floor(Math.random() * 40) + 30,\n}));\n\nexport default function ResourceChartExample() {\n  return (\n    <ResourceChart\n      title=\"CPU Usage (24h)\"\n      data={mockData}\n      color=\"hsl(var(--chart-1))\"\n    />\n  );\n}\n","size_bytes":361},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/pages/security-settings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Smartphone, KeyRound, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function SecuritySettings() {\n  const { toast } = useToast();\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const [showSetup, setShowSetup] = useState(false);\n\n  const { data: user } = useQuery<{\n    id: string;\n    username: string;\n    email: string;\n    twoFactorEnabled: boolean | null;\n  }>({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const { data: qrCode } = useQuery<{\n    secret: string;\n    qrCodeUrl: string;\n  }>({\n    queryKey: [\"/api/auth/2fa/setup\"],\n    enabled: showSetup,\n  });\n\n  const enableTwoFactorMutation = useMutation({\n    mutationFn: async (code: string) => {\n      return await apiRequest(\"POST\", \"/api/auth/2fa/enable\", { code });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"2FA Enabled\",\n        description: \"Two-factor authentication has been enabled successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setShowSetup(false);\n      setVerificationCode(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to enable 2FA\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const disableTwoFactorMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/2fa/disable\", {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"2FA Disabled\",\n        description: \"Two-factor authentication has been disabled\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to disable 2FA\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEnableTwoFactor = () => {\n    if (verificationCode.length === 6) {\n      enableTwoFactorMutation.mutate(verificationCode);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Security Settings</h1>\n        <p className=\"text-muted-foreground mt-1\">Manage your account security and authentication</p>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n                <Shield className=\"h-4 w-4\" />\n                Two-Factor Authentication\n              </CardTitle>\n              {user?.twoFactorEnabled ? (\n                <Badge variant=\"outline\" className=\"bg-chart-2/10 text-chart-2 border-chart-2/20\">\n                  Enabled\n                </Badge>\n              ) : (\n                <Badge variant=\"outline\" className=\"bg-muted text-muted-foreground\">\n                  Disabled\n                </Badge>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Add an extra layer of security to your account with two-factor authentication using an\n              authenticator app.\n            </p>\n\n            {!user?.twoFactorEnabled && !showSetup && (\n              <Button\n                onClick={() => setShowSetup(true)}\n                className=\"w-full\"\n                data-testid=\"button-setup-2fa\"\n              >\n                <Smartphone className=\"h-4 w-4 mr-2\" />\n                Enable Two-Factor Authentication\n              </Button>\n            )}\n\n            {user?.twoFactorEnabled && (\n              <Button\n                variant=\"destructive\"\n                onClick={() => disableTwoFactorMutation.mutate()}\n                className=\"w-full\"\n                data-testid=\"button-disable-2fa\"\n              >\n                Disable Two-Factor Authentication\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n\n        {showSetup && !user?.twoFactorEnabled && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base font-medium\">Setup 2FA</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <p className=\"text-sm font-medium\">Step 1: Scan QR Code</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Scan this QR code with your authenticator app (Google Authenticator, Authy, etc.)\n                </p>\n                {qrCode?.qrCodeUrl && (\n                  <div className=\"flex justify-center p-4 border rounded-lg bg-white\">\n                    <img src={qrCode.qrCodeUrl} alt=\"2FA QR Code\" className=\"w-48 h-48\" />\n                  </div>\n                )}\n                {qrCode?.secret && (\n                  <div className=\"p-3 bg-muted rounded-lg\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Manual entry key:</p>\n                    <p className=\"text-sm font-mono break-all\">{qrCode.secret}</p>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-3\">\n                <p className=\"text-sm font-medium\">Step 2: Verify Code</p>\n                <Label htmlFor=\"verify-code\">Enter 6-digit code</Label>\n                <Input\n                  id=\"verify-code\"\n                  type=\"text\"\n                  placeholder=\"000000\"\n                  maxLength={6}\n                  value={verificationCode}\n                  onChange={(e) => setVerificationCode(e.target.value.replace(/\\D/g, \"\"))}\n                  className=\"text-center text-2xl tracking-widest font-mono\"\n                  data-testid=\"input-verify-code\"\n                />\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={handleEnableTwoFactor}\n                  disabled={verificationCode.length !== 6}\n                  className=\"flex-1\"\n                  data-testid=\"button-enable-2fa\"\n                >\n                  Enable 2FA\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowSetup(false);\n                    setVerificationCode(\"\");\n                  }}\n                  data-testid=\"button-cancel-setup\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n              <KeyRound className=\"h-4 w-4\" />\n              Password\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              Change your password regularly to keep your account secure.\n            </p>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-change-password\">\n              Change Password\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              Security Tips\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• Use a strong, unique password for your account</li>\n              <li>• Enable two-factor authentication for enhanced security</li>\n              <li>• Never share your password or 2FA codes</li>\n              <li>• Regularly review your account activity</li>\n              <li>• Keep your authenticator app backed up</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8436},"client/src/components/examples/SecuritySettings.tsx":{"content":"import SecuritySettings from '../../pages/security-settings';\n\nexport default function SecuritySettingsExample() {\n  return <SecuritySettings />;\n}\n","size_bytes":148},"client/src/pages/reseller-customers.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, UserPlus } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n//todo: remove mock functionality\nconst mockCustomers = [\n  {\n    id: \"cust-001\",\n    name: \"TechStart Solutions\",\n    email: \"admin@techstart.com\",\n    gstin: \"29XYZTE1234A1B2\",\n    vmsCount: 12,\n    monthlySpend: 45000,\n    status: \"active\",\n    joinedDate: \"2024-08-15\",\n  },\n  {\n    id: \"cust-002\",\n    name: \"Digital Ventures Ltd\",\n    email: \"ops@digitalventures.com\",\n    gstin: \"29PQRST5678C2D3\",\n    vmsCount: 8,\n    monthlySpend: 32000,\n    status: \"active\",\n    joinedDate: \"2024-09-01\",\n  },\n  {\n    id: \"cust-003\",\n    name: \"CloudOps Inc\",\n    email: \"it@cloudops.net\",\n    gstin: \"27UVWXY9012E3F4\",\n    vmsCount: 15,\n    monthlySpend: 58000,\n    status: \"active\",\n    joinedDate: \"2024-07-20\",\n  },\n  {\n    id: \"cust-004\",\n    name: \"DataFlow Systems\",\n    email: \"admin@dataflow.io\",\n    gstin: \"19MNOPQ3456G4H5\",\n    vmsCount: 5,\n    monthlySpend: 18000,\n    status: \"trial\",\n    joinedDate: \"2024-10-01\",\n  },\n];\n\nexport default function ResellerCustomers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleAddCustomer = () => {\n    console.log(\"Adding new customer\");\n    toast({\n      title: \"Add Customer\",\n      description: \"Opening customer onboarding wizard\",\n    });\n  };\n\n  const handleManageCustomer = (customerId: string) => {\n    console.log(\"Managing customer:\", customerId);\n    toast({\n      title: \"Customer Management\",\n      description: \"Opening customer details\",\n    });\n  };\n\n  const filteredCustomers = mockCustomers.filter((customer) =>\n    customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    customer.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    customer.gstin.includes(searchQuery)\n  );\n\n  const totalRevenue = mockCustomers.reduce((sum, c) => sum + c.monthlySpend, 0);\n  const totalVMs = mockCustomers.reduce((sum, c) => sum + c.vmsCount, 0);\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">My Customers</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your customer accounts and resources\n          </p>\n        </div>\n        <Button onClick={handleAddCustomer} data-testid=\"button-add-customer\">\n          <UserPlus className=\"h-4 w-4 mr-2\" />\n          Add Customer\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Customers</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-customers\">{mockCustomers.length}</div>\n            <p className=\"text-xs text-chart-2 mt-1\">+2 this month</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Active VMs</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalVMs}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Across all customers</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Monthly Revenue</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₹{totalRevenue.toLocaleString('en-IN')}</div>\n            <p className=\"text-xs text-chart-2 mt-1\">+18% from last month</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Avg. Spend/Customer</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              ₹{Math.round(totalRevenue / mockCustomers.length).toLocaleString('en-IN')}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Per month</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex items-center gap-4\">\n        <div className=\"relative flex-1 max-w-sm\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search customers by name, email, or GSTIN...\"\n            className=\"pl-9\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            data-testid=\"input-search-customers\"\n          />\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-base font-medium\">Customer Accounts</h3>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Company Name</TableHead>\n                  <TableHead>Contact Email</TableHead>\n                  <TableHead>GSTIN</TableHead>\n                  <TableHead className=\"text-right\">VMs</TableHead>\n                  <TableHead className=\"text-right\">Monthly Spend</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Joined</TableHead>\n                  <TableHead></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredCustomers.map((customer) => (\n                  <TableRow key={customer.id} className=\"hover-elevate\">\n                    <TableCell className=\"font-medium\" data-testid={`customer-name-${customer.id}`}>\n                      {customer.name}\n                    </TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground\">\n                      {customer.email}\n                    </TableCell>\n                    <TableCell className=\"font-mono text-sm\">\n                      {customer.gstin}\n                    </TableCell>\n                    <TableCell className=\"text-right\">{customer.vmsCount}</TableCell>\n                    <TableCell className=\"text-right font-mono\">\n                      ₹{customer.monthlySpend.toLocaleString('en-IN')}\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant=\"outline\"\n                        className={\n                          customer.status === \"active\"\n                            ? \"bg-chart-2/10 text-chart-2 border-chart-2/20\"\n                            : \"bg-chart-3/10 text-chart-3 border-chart-3/20\"\n                        }\n                      >\n                        {customer.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground\">\n                      {customer.joinedDate}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleManageCustomer(customer.id)}\n                        data-testid={`button-manage-${customer.id}`}\n                      >\n                        Manage\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8268},"client/src/pages/all-vms.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Server, Search, Power, RotateCw, Trash2 } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useState } from \"react\";\n\n//todo: remove mock functionality\ninterface VM {\n  id: string;\n  name: string;\n  tenantType: \"reseller\" | \"customer\";\n  tenantName: string;\n  tenantId: string;\n  status: \"running\" | \"stopped\" | \"error\";\n  cpu: number;\n  ram: string;\n  storage: string;\n  ip: string;\n  os: string;\n  uptime: string;\n}\n\nconst mockVMs: VM[] = [\n  {\n    id: \"vm-001\",\n    name: \"web-server-01\",\n    tenantType: \"customer\",\n    tenantName: \"TechStart Solutions\",\n    tenantId: \"cust-001\",\n    status: \"running\",\n    cpu: 4,\n    ram: \"8GB\",\n    storage: \"100GB\",\n    ip: \"192.168.1.10\",\n    os: \"Ubuntu 22.04\",\n    uptime: \"15d 7h\",\n  },\n  {\n    id: \"vm-002\",\n    name: \"db-primary\",\n    tenantType: \"customer\",\n    tenantName: \"TechStart Solutions\",\n    tenantId: \"cust-001\",\n    status: \"running\",\n    cpu: 8,\n    ram: \"16GB\",\n    storage: \"500GB\",\n    ip: \"192.168.1.11\",\n    os: \"Ubuntu 22.04\",\n    uptime: \"15d 7h\",\n  },\n  {\n    id: \"vm-003\",\n    name: \"app-server-01\",\n    tenantType: \"customer\",\n    tenantName: \"CloudOps Inc\",\n    tenantId: \"cust-003\",\n    status: \"running\",\n    cpu: 2,\n    ram: \"4GB\",\n    storage: \"80GB\",\n    ip: \"192.168.2.20\",\n    os: \"CentOS 8\",\n    uptime: \"8d 3h\",\n  },\n  {\n    id: \"vm-004\",\n    name: \"test-server\",\n    tenantType: \"customer\",\n    tenantName: \"Digital Ventures Ltd\",\n    tenantId: \"cust-002\",\n    status: \"stopped\",\n    cpu: 2,\n    ram: \"4GB\",\n    storage: \"50GB\",\n    ip: \"192.168.3.30\",\n    os: \"Debian 11\",\n    uptime: \"0d 0h\",\n  },\n];\n\nexport default function AllVMs() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"running\":\n        return \"bg-chart-2/10 text-chart-2 border-chart-2/20\";\n      case \"stopped\":\n        return \"bg-muted text-muted-foreground\";\n      case \"error\":\n        return \"bg-destructive/10 text-destructive border-destructive/20\";\n      default:\n        return \"\";\n    }\n  };\n\n  const filteredVMs = mockVMs.filter(\n    (vm) =>\n      vm.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      vm.tenantName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      vm.ip.includes(searchQuery)\n  );\n\n  const runningVMs = mockVMs.filter((vm) => vm.status === \"running\").length;\n  const stoppedVMs = mockVMs.filter((vm) => vm.status === \"stopped\").length;\n  const totalCPU = mockVMs.reduce((sum, vm) => sum + vm.cpu, 0);\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">All Virtual Machines</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Platform-wide VM management across all tenants\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total VMs</p>\n            <Server className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-vms\">\n              {mockVMs.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Running</p>\n            <Power className=\"h-4 w-4 text-chart-2\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-chart-2\">{runningVMs}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Stopped</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-muted-foreground\">{stoppedVMs}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total vCPUs</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalCPU}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex items-center gap-4\">\n        <div className=\"relative flex-1 max-w-sm\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search by VM name, tenant, or IP...\"\n            className=\"pl-9\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            data-testid=\"input-search-vms\"\n          />\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-base font-medium\">Virtual Machine Inventory</h3>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>VM Name</TableHead>\n                  <TableHead>Tenant</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>vCPU</TableHead>\n                  <TableHead>RAM</TableHead>\n                  <TableHead>Storage</TableHead>\n                  <TableHead>IP Address</TableHead>\n                  <TableHead>OS</TableHead>\n                  <TableHead>Uptime</TableHead>\n                  <TableHead></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredVMs.map((vm) => (\n                  <TableRow key={vm.id} className=\"hover-elevate\">\n                    <TableCell className=\"font-medium font-mono\" data-testid={`vm-name-${vm.id}`}>\n                      {vm.name}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm font-medium\">{vm.tenantName}</span>\n                        <span className=\"text-xs text-muted-foreground capitalize\">\n                          {vm.tenantType}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className={getStatusColor(vm.status)}>\n                        {vm.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{vm.cpu}</TableCell>\n                    <TableCell>{vm.ram}</TableCell>\n                    <TableCell>{vm.storage}</TableCell>\n                    <TableCell className=\"font-mono text-sm\">{vm.ip}</TableCell>\n                    <TableCell className=\"text-sm\">{vm.os}</TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground\">{vm.uptime}</TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-1\">\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          data-testid={`button-power-${vm.id}`}\n                        >\n                          <Power className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          data-testid={`button-restart-${vm.id}`}\n                        >\n                          <RotateCw className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          data-testid={`button-delete-${vm.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8709},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/examples/MetricCard.tsx":{"content":"import { MetricCard } from '../metric-card';\nimport { Server } from 'lucide-react';\n\nexport default function MetricCardExample() {\n  return (\n    <MetricCard\n      title=\"Virtual Machines\"\n      value=\"24\"\n      icon={Server}\n      trend=\"+3 from last week\"\n      trendUp={true}\n    />\n  );\n}\n","size_bytes":293},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from '../theme-toggle';\nimport { ThemeProvider } from '../theme-provider';\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":270},"client/src/components/examples/Billing.tsx":{"content":"import Billing from '../../pages/billing';\n\nexport default function BillingExample() {\n  return <Billing />;\n}\n","size_bytes":111},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/monitoring.tsx":{"content":"import { ResourceChart } from \"@/components/resource-chart\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertCircle, CheckCircle } from \"lucide-react\";\n\n//todo: remove mock functionality\nconst mockCPUData = Array.from({ length: 24 }, (_, i) => ({\n  time: `${i}:00`,\n  value: Math.floor(Math.random() * 40) + 30,\n}));\n\n//todo: remove mock functionality\nconst mockMemoryData = Array.from({ length: 24 }, (_, i) => ({\n  time: `${i}:00`,\n  value: Math.floor(Math.random() * 30) + 50,\n}));\n\n//todo: remove mock functionality\nconst mockNetworkData = Array.from({ length: 24 }, (_, i) => ({\n  time: `${i}:00`,\n  value: Math.floor(Math.random() * 60) + 20,\n}));\n\n//todo: remove mock functionality\nconst mockAlerts = [\n  {\n    id: 1,\n    severity: \"warning\",\n    message: \"High CPU usage on web-server-01\",\n    time: \"5 min ago\",\n  },\n  {\n    id: 2,\n    severity: \"info\",\n    message: \"Memory usage normal across all zones\",\n    time: \"1 hour ago\",\n  },\n  {\n    id: 3,\n    severity: \"success\",\n    message: \"All systems operational\",\n    time: \"2 hours ago\",\n  },\n];\n\nexport default function Monitoring() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Monitoring</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Real-time infrastructure metrics and alerts\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-2\">\n        <ResourceChart\n          title=\"CPU Usage (24h)\"\n          data={mockCPUData}\n          color=\"hsl(var(--chart-1))\"\n        />\n        <ResourceChart\n          title=\"Memory Usage (24h)\"\n          data={mockMemoryData}\n          color=\"hsl(var(--chart-2))\"\n        />\n        <ResourceChart\n          title=\"Network Traffic (24h)\"\n          data={mockNetworkData}\n          color=\"hsl(var(--chart-3))\"\n        />\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium\">Recent Alerts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {mockAlerts.map((alert) => (\n                <div\n                  key={alert.id}\n                  className=\"flex items-start gap-3 border-b border-border pb-3 last:border-0 last:pb-0\"\n                >\n                  {alert.severity === \"warning\" ? (\n                    <AlertCircle className=\"h-5 w-5 text-chart-3 mt-0.5\" />\n                  ) : (\n                    <CheckCircle className=\"h-5 w-5 text-chart-2 mt-0.5\" />\n                  )}\n                  <div className=\"flex-1 space-y-1\">\n                    <p className=\"text-sm\" data-testid={`alert-message-${alert.id}`}>{alert.message}</p>\n                    <p className=\"text-xs text-muted-foreground\">{alert.time}</p>\n                  </div>\n                  <Badge\n                    variant=\"outline\"\n                    className={\n                      alert.severity === \"warning\"\n                        ? \"bg-chart-3/10 text-chart-3 border-chart-3/20\"\n                        : alert.severity === \"success\"\n                        ? \"bg-chart-2/10 text-chart-2 border-chart-2/20\"\n                        : \"bg-chart-1/10 text-chart-1 border-chart-1/20\"\n                    }\n                  >\n                    {alert.severity}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3535},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/all-kubernetes.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Network, Search, Activity, BarChart3 } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useState } from \"react\";\n\n//todo: remove mock functionality\ninterface K8sCluster {\n  id: string;\n  name: string;\n  tenantType: \"reseller\" | \"customer\";\n  tenantName: string;\n  tenantId: string;\n  status: \"healthy\" | \"degraded\" | \"critical\";\n  version: string;\n  nodes: number;\n  pods: number;\n  cpu: string;\n  memory: string;\n  namespace: number;\n}\n\nconst mockClusters: K8sCluster[] = [\n  {\n    id: \"k8s-001\",\n    name: \"prod-cluster-01\",\n    tenantType: \"customer\",\n    tenantName: \"TechStart Solutions\",\n    tenantId: \"cust-001\",\n    status: \"healthy\",\n    version: \"1.28.2\",\n    nodes: 5,\n    pods: 42,\n    cpu: \"65%\",\n    memory: \"72%\",\n    namespace: 8,\n  },\n  {\n    id: \"k8s-002\",\n    name: \"staging-cluster\",\n    tenantType: \"customer\",\n    tenantName: \"TechStart Solutions\",\n    tenantId: \"cust-001\",\n    status: \"healthy\",\n    version: \"1.28.2\",\n    nodes: 3,\n    pods: 18,\n    cpu: \"42%\",\n    memory: \"58%\",\n    namespace: 5,\n  },\n  {\n    id: \"k8s-003\",\n    name: \"prod-main\",\n    tenantType: \"customer\",\n    tenantName: \"CloudOps Inc\",\n    tenantId: \"cust-003\",\n    status: \"healthy\",\n    version: \"1.27.5\",\n    nodes: 8,\n    pods: 76,\n    cpu: \"78%\",\n    memory: \"81%\",\n    namespace: 12,\n  },\n  {\n    id: \"k8s-004\",\n    name: \"dev-cluster\",\n    tenantType: \"customer\",\n    tenantName: \"Digital Ventures Ltd\",\n    tenantId: \"cust-002\",\n    status: \"degraded\",\n    version: \"1.26.8\",\n    nodes: 2,\n    pods: 12,\n    cpu: \"35%\",\n    memory: \"45%\",\n    namespace: 3,\n  },\n];\n\nexport default function AllKubernetes() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"healthy\":\n        return \"bg-chart-2/10 text-chart-2 border-chart-2/20\";\n      case \"degraded\":\n        return \"bg-chart-3/10 text-chart-3 border-chart-3/20\";\n      case \"critical\":\n        return \"bg-destructive/10 text-destructive border-destructive/20\";\n      default:\n        return \"\";\n    }\n  };\n\n  const filteredClusters = mockClusters.filter(\n    (cluster) =>\n      cluster.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      cluster.tenantName.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const totalNodes = mockClusters.reduce((sum, c) => sum + c.nodes, 0);\n  const totalPods = mockClusters.reduce((sum, c) => sum + c.pods, 0);\n  const healthyClusters = mockClusters.filter((c) => c.status === \"healthy\").length;\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Kubernetes Clusters</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Platform-wide Kubernetes management across all tenants\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Clusters</p>\n            <Network className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-clusters\">\n              {mockClusters.length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Healthy</p>\n            <Activity className=\"h-4 w-4 text-chart-2\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-chart-2\">{healthyClusters}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Nodes</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalNodes}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Pods</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalPods}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex items-center gap-4\">\n        <div className=\"relative flex-1 max-w-sm\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search by cluster name or tenant...\"\n            className=\"pl-9\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            data-testid=\"input-search-clusters\"\n          />\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-base font-medium\">Cluster Inventory</h3>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Cluster Name</TableHead>\n                  <TableHead>Tenant</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Version</TableHead>\n                  <TableHead className=\"text-right\">Nodes</TableHead>\n                  <TableHead className=\"text-right\">Pods</TableHead>\n                  <TableHead className=\"text-right\">Namespaces</TableHead>\n                  <TableHead>CPU Usage</TableHead>\n                  <TableHead>Memory</TableHead>\n                  <TableHead></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredClusters.map((cluster) => (\n                  <TableRow key={cluster.id} className=\"hover-elevate\">\n                    <TableCell className=\"font-medium font-mono\" data-testid={`cluster-name-${cluster.id}`}>\n                      {cluster.name}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm font-medium\">{cluster.tenantName}</span>\n                        <span className=\"text-xs text-muted-foreground capitalize\">\n                          {cluster.tenantType}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className={getStatusColor(cluster.status)}>\n                        {cluster.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"font-mono text-sm\">{cluster.version}</TableCell>\n                    <TableCell className=\"text-right\">{cluster.nodes}</TableCell>\n                    <TableCell className=\"text-right\">{cluster.pods}</TableCell>\n                    <TableCell className=\"text-right\">{cluster.namespace}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-16 h-2 bg-muted rounded-full overflow-hidden\">\n                          <div\n                            className=\"h-full bg-chart-2\"\n                            style={{ width: cluster.cpu }}\n                          />\n                        </div>\n                        <span className=\"text-sm text-muted-foreground\">{cluster.cpu}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-16 h-2 bg-muted rounded-full overflow-hidden\">\n                          <div\n                            className=\"h-full bg-chart-3\"\n                            style={{ width: cluster.memory }}\n                          />\n                        </div>\n                        <span className=\"text-sm text-muted-foreground\">{cluster.memory}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid={`button-manage-${cluster.id}`}\n                      >\n                        <BarChart3 className=\"h-4 w-4 mr-1\" />\n                        Manage\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9255},"client/src/components/examples/AllVMs.tsx":{"content":"import AllVMs from '../../pages/all-vms';\n\nexport default function AllVMsExample() {\n  return <AllVMs />;\n}\n","size_bytes":108},"client/src/pages/whitelabel.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Palette, Globe, Upload, Save } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function WhiteLabel() {\n  const { toast } = useToast();\n  const [branding, setBranding] = useState({\n    companyName: \"CloudTech Solutions\",\n    domain: \"cloudtech.example.com\",\n    primaryColor: \"#3b82f6\",\n    logoUrl: \"\",\n  });\n\n  const handleSave = () => {\n    console.log(\"Saving white-label settings:\", branding);\n    toast({\n      title: \"Settings Saved\",\n      description: \"White-label configuration updated successfully\",\n    });\n  };\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">White-Label Configuration</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Customize your branded cloud management console\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"bg-chart-2/10 text-chart-2 border-chart-2/20\">\n          Reseller Portal\n        </Badge>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n                <Palette className=\"h-4 w-4\" />\n                Branding Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"company-name\">Company Name</Label>\n                <Input\n                  id=\"company-name\"\n                  value={branding.companyName}\n                  onChange={(e) => setBranding({ ...branding, companyName: e.target.value })}\n                  placeholder=\"Your Company Name\"\n                  data-testid=\"input-company-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"primary-color\">Primary Brand Color</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    id=\"primary-color\"\n                    type=\"color\"\n                    value={branding.primaryColor}\n                    onChange={(e) => setBranding({ ...branding, primaryColor: e.target.value })}\n                    className=\"w-20 h-10\"\n                    data-testid=\"input-primary-color\"\n                  />\n                  <Input\n                    value={branding.primaryColor}\n                    onChange={(e) => setBranding({ ...branding, primaryColor: e.target.value })}\n                    placeholder=\"#3b82f6\"\n                    className=\"flex-1 font-mono\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"logo\">Logo Upload</Label>\n                <div className=\"border-2 border-dashed rounded-lg p-6 text-center hover-elevate cursor-pointer\">\n                  <Upload className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Click to upload logo (PNG, SVG, 200x60px)\n                  </p>\n                  <input\n                    type=\"file\"\n                    className=\"hidden\"\n                    accept=\"image/*\"\n                    id=\"logo\"\n                    data-testid=\"input-logo\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n                <Globe className=\"h-4 w-4\" />\n                Domain Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"custom-domain\">Custom Domain</Label>\n                <Input\n                  id=\"custom-domain\"\n                  value={branding.domain}\n                  onChange={(e) => setBranding({ ...branding, domain: e.target.value })}\n                  placeholder=\"cloud.yourdomain.com\"\n                  data-testid=\"input-custom-domain\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Point your domain's CNAME to: portal.cloudstack.io\n                </p>\n              </div>\n              <div className=\"rounded-lg border bg-muted/50 p-4\">\n                <h4 className=\"text-sm font-medium mb-2\">DNS Configuration</h4>\n                <div className=\"space-y-2 text-xs font-mono\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Type:</span>\n                    <span>CNAME</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Host:</span>\n                    <span>cloud</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Value:</span>\n                    <span>portal.cloudstack.io</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium\">Preview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <div\n                className=\"h-16 flex items-center px-6\"\n                style={{ backgroundColor: branding.primaryColor }}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-8 w-8 rounded bg-white/20 flex items-center justify-center\">\n                    <span className=\"text-white font-bold text-sm\">\n                      {branding.companyName.charAt(0)}\n                    </span>\n                  </div>\n                  <div>\n                    <h3 className=\"text-white font-semibold text-sm\">{branding.companyName}</h3>\n                    <p className=\"text-white/80 text-xs\">Cloud Management</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"p-6 bg-card space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">Dashboard</h4>\n                  <Badge\n                    variant=\"outline\"\n                    style={{\n                      backgroundColor: `${branding.primaryColor}10`,\n                      color: branding.primaryColor,\n                      borderColor: `${branding.primaryColor}40`,\n                    }}\n                  >\n                    Active\n                  </Badge>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"p-4 border rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground\">Total VMs</p>\n                    <p className=\"text-2xl font-bold mt-1\">24</p>\n                  </div>\n                  <div className=\"p-4 border rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground\">Networks</p>\n                    <p className=\"text-2xl font-bold mt-1\">8</p>\n                  </div>\n                </div>\n                <Button\n                  className=\"w-full\"\n                  style={{ backgroundColor: branding.primaryColor }}\n                >\n                  Create Virtual Machine\n                </Button>\n              </div>\n            </div>\n            <div className=\"mt-4 p-4 bg-muted/50 rounded-lg\">\n              <p className=\"text-sm font-medium mb-2\">Customer View URL</p>\n              <p className=\"text-sm font-mono text-muted-foreground break-all\">\n                https://{branding.domain}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex justify-end\">\n        <Button onClick={handleSave} data-testid=\"button-save-whitelabel\">\n          <Save className=\"h-4 w-4 mr-2\" />\n          Save Configuration\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8617},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/resource-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\n\ninterface ResourceChartProps {\n  title: string;\n  data: { time: string; value: number }[];\n  color?: string;\n}\n\nexport function ResourceChart({ title, data, color = \"hsl(var(--chart-1))\" }: ResourceChartProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base font-medium\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <LineChart data={data}>\n            <XAxis\n              dataKey=\"time\"\n              stroke=\"hsl(var(--muted-foreground))\"\n              fontSize={12}\n              tickLine={false}\n              axisLine={false}\n            />\n            <YAxis\n              stroke=\"hsl(var(--muted-foreground))\"\n              fontSize={12}\n              tickLine={false}\n              axisLine={false}\n              tickFormatter={(value) => `${value}%`}\n            />\n            <Tooltip\n              content={({ active, payload }) => {\n                if (active && payload && payload.length) {\n                  return (\n                    <div className=\"rounded-md border bg-background p-2 shadow-md\">\n                      <p className=\"text-sm font-medium\">{payload[0].value}%</p>\n                      <p className=\"text-xs text-muted-foreground\">{payload[0].payload.time}</p>\n                    </div>\n                  );\n                }\n                return null;\n              }}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke={color}\n              strokeWidth={2}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1878},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"replit.md":{"content":"# AkashOne.com - Cloud Management Portal\n\n**Unit of Mieux Technologies Pvt Ltd**\n\n## Overview\n\nAkashOne.com is a comprehensive CloudStack management platform featuring VM provisioning, resource monitoring, network management, Indian GST-compliant billing, reseller white-label capabilities, hierarchical multi-tenant administration, and secure authentication with 2FA support.\n\n## Recent Changes\n\n### October 2025 - Major Feature Additions\n\n#### Feature Management System ✅\n- **Super Admin Feature Toggle System:**\n  - Centralized feature flag management with enable/disable controls\n  - Features organized by category (Compute, Networking, Billing, Storage)\n  - Dynamic sidebar navigation that shows/hides features based on flags\n  - Feature flag middleware for API route protection\n  - 7 new feature pages with professional placeholder UIs:\n    - Payment Gateway Configuration (Stripe, Razorpay, PayPal)\n    - Interactive Pricing Calculator\n    - Load Balancer Service\n    - GPU Instances (NVIDIA T4, A100, V100)\n    - SSL Certificate Manager (Let's Encrypt integration)\n    - CDN Service (Global content delivery)\n    - VM Auto-Scaling Groups\n  - All new features start disabled and can be enabled when backend is ready\n  - Real-time navigation updates without page reload\n  - Full integration with existing authentication and multi-tenant system\n\n#### Virtual Machine Management with CloudStack Integration ✅\n- Full CloudStack API integration with HMAC SHA1 authentication\n- Async job polling for VM lifecycle operations\n- VM provisioning wizard with zone, template, and service offering selection\n- Real-time VM state management (Running, Stopped, Starting, etc.)\n- VM lifecycle controls: Start, Stop, Reboot, Destroy\n- Resource monitoring: CPU, memory, IP addresses\n- VM caching in PostgreSQL for fast queries\n- Form validation to prevent zone/template mismatches\n- Complete ownership verification and multi-tenant security\n- **VM Snapshot/Backup System:**\n  - Create VM snapshots with custom names and descriptions\n  - List all snapshots for each VM\n  - Restore VM to previous snapshot state\n  - Delete snapshots when no longer needed\n  - Full snapshot management UI in VM dialog\n  - CloudStack async job polling for all snapshot operations\n  - Ownership verification on all snapshot operations\n\n#### Kubernetes-as-a-Service (KaaS)\n- One-click Kubernetes cluster deployment with version selection\n- Master and worker node configuration\n- Auto-healing and auto-scaling capabilities\n- Resource monitoring (CPU, memory, pods)\n- Cluster health monitoring\n- Full CRUD operations via API\n\n#### Database-as-a-Service (DBaaS)\n- Managed database instances (MySQL, PostgreSQL, MongoDB, Redis)\n- One-click provisioning with version selection\n- Automated backups and Multi-AZ deployment options\n- Connection management and monitoring\n- Storage and resource configuration\n- Full CRUD operations via API\n\n#### Authentication System\n- Username/password authentication with bcrypt hashing\n- TOTP-based two-factor authentication (2FA)\n- QR code generation for authenticator apps\n- Session-based authentication\n- Security settings page for 2FA management\n\n#### Identity and Access Management (IAM) System ✅\n- **Comprehensive RBAC (Role-Based Access Control):**\n  - System roles: Admin, Editor, Viewer (predefined, cannot be deleted)\n  - Custom roles: Create organization-specific roles with custom permissions\n  - Granular permissions organized by category (Compute, Networking, Storage, Billing, IAM)\n  - Permission categories: VM operations, Kubernetes, Database, DNS, Object Storage, Billing, Team Management\n- **Team Member Management:**\n  - Invite team members to organization via email\n  - Team member status tracking (invited, active, inactive)\n  - Assign multiple roles to team members\n  - Remove team members and revoke access\n  - View all team members with their assigned roles\n- **Role Management UI:**\n  - View all system and custom roles\n  - Create custom roles with descriptive names\n  - Edit custom role details (system roles are read-only)\n  - Delete custom roles (with protection for system roles)\n  - Manage role permissions via checkbox interface\n  - Permission organization by category for easy management\n- **Automatic Role Assignment:**\n  - New users automatically assigned Admin role on registration\n  - Enables immediate full access for organization owners\n- **API Security:**\n  - Permission checks on all IAM routes (team.manage, team.view, iam.manage, iam.view)\n  - Organization isolation - users can only see/manage their organization's data\n  - System role protection - prevents modification/deletion of built-in roles\n- **Default Permissions:**\n  - VM: view, create, update, delete\n  - Kubernetes: view, create, delete\n  - Database: view, create, delete\n  - Network: view, create\n  - DNS: view, manage\n  - Storage: view, manage\n  - Billing: view, manage\n  - IAM: view, manage\n  - Team: view, manage\n\n## Project Architecture\n\n### Frontend (React + TypeScript + Vite)\n- **Pages:**\n  - Dashboard - Overview of cloud infrastructure\n  - Virtual Machines - VM management\n  - Kubernetes - K8s cluster management\n  - Database - DBaaS management\n  - Networks - Network configuration\n  - Storage - Storage management\n  - Monitoring - Resource monitoring with real-time metrics\n  - Billing - Indian GST-compliant billing with CGST/SGST/IGST\n  - Payment Gateways - Payment provider configuration (Stripe, Razorpay, PayPal)\n  - Pricing Calculator - Infrastructure cost estimation tool\n  - Load Balancer - High-availability load balancing service\n  - GPU Instances - NVIDIA GPU compute for AI/ML workloads\n  - SSL Certificates - Automated SSL/TLS certificate management\n  - CDN Service - Global content delivery network\n  - Auto-Scaling - VM auto-scaling groups with dynamic policies\n  - Resellers - Reseller management\n  - White-Label - Custom branding and domains\n  - Reseller Customers - Customer management\n  - Super Admin - Hierarchical tenant tree management\n  - Feature Management - Enable/disable features dynamically\n  - Admin Rights - RBAC administration\n  - Security - 2FA and security settings\n  - Login - Authentication page\n\n### Backend (Express + TypeScript)\n- **Storage:** MemStorage with support for PostgreSQL (Drizzle ORM)\n- **Authentication:** Session-based with passport, bcrypt, otplib, QRCode\n- **CloudStack Integration:** Direct API client with async job polling\n- **API Routes:**\n  - `/api/auth/*` - Authentication endpoints\n  - `/api/vms` - Virtual machine management with CloudStack proxy\n  - `/api/vms/:vmId/snapshots` - VM snapshot management (list, create)\n  - `/api/snapshots/:id` - Snapshot operations (delete)\n  - `/api/snapshots/:id/restore` - Restore VM from snapshot\n  - `/api/cloudstack/*` - CloudStack metadata (zones, templates, offerings)\n  - `/api/kubernetes/clusters` - Kubernetes cluster management\n  - `/api/databases` - Database instance management\n  - `/api/feature-flags` - Feature flag management (list all, update)\n  - `/api/feature-flags/:id` - Individual feature flag operations\n- **Middleware:**\n  - `requireFeature(key)` - Feature flag validation for API routes\n\n### Database Schema\n- **users:** User accounts with 2FA fields, organizationId, and accountType\n- **virtual_machines:** VM cache with CloudStack IDs and metadata\n- **vm_snapshots:** VM snapshot records with CloudStack snapshot IDs, names, descriptions, and state tracking\n- **kubernetes_clusters:** K8s cluster configurations and metrics\n- **databases:** Database instance configurations and monitoring\n- **feature_flags:** Feature toggle system with key, name, description, category, enabled status, icon, and sort order\n- **roles:** System and custom roles with organization isolation\n- **permissions:** Granular permissions organized by category (Compute, Networking, Storage, Billing, IAM)\n- **role_permissions:** Many-to-many relationship between roles and permissions\n- **user_roles:** Many-to-many relationship between users and roles with grant tracking\n- **team_members:** Team member invitations and status with organization isolation\n\n## User Preferences\n\n### Branding\n- Main Brand: **AkashOne.com**\n- Company: **Mieux Technologies Pvt Ltd**\n- Domain focus: Cloud infrastructure management for Indian market\n- GST-compliant billing required\n\n### Design System\n- Theme: Dark mode primary with light mode support\n- Fonts: Inter (UI), JetBrains Mono (code/technical)\n- Color Scheme: Modern SaaS dashboard aesthetic\n- Components: Shadcn UI with Tailwind CSS\n\n### Features Priority\n1. Kubernetes-as-a-Service (KaaS) with one-click deployment ✅\n2. Database-as-a-Service (DBaaS) with MySQL/PostgreSQL/MongoDB/Redis ✅\n3. Authentication with password and 2FA support ✅\n4. Indian GST billing with invoice management ✅\n5. Reseller white-label capabilities ✅\n6. Super admin hierarchical tenant management ✅\n7. Marketplace/Templates for application stacks (Pending)\n8. Advanced monitoring with real-time alerts (Pending)\n9. Payment gateway integration (Stripe, Razorpay, PayPal) (Pending)\n10. DNS-as-a-Service (Pending)\n11. Helpdesk/Support tickets system (Pending)\n12. Terraform integration (Pending)\n\n## Development Notes\n\n### Tech Stack\n- **Frontend:** React 18, TypeScript, Vite, Wouter (routing), TanStack Query\n- **Backend:** Express, TypeScript, tsx (runtime)\n- **Database:** PostgreSQL with Drizzle ORM\n- **UI:** Shadcn UI, Tailwind CSS, Radix UI, Lucide icons\n- **Auth:** Passport, bcrypt, otplib, QRCode\n\n### Key Patterns\n- Session-based authentication with secure cookies\n- MemStorage pattern with PostgreSQL migration path\n- React Query for data fetching and caching\n- Shadcn sidebar for navigation\n- Server-side rendering with client-side hydration\n\n### Environment Secrets\n- `DATABASE_URL` - PostgreSQL connection string\n- `SESSION_SECRET` - Session encryption key\n- `CLOUDSTACK_API_URL` - CloudStack API endpoint (required for VM provisioning)\n- `CLOUDSTACK_API_KEY` - CloudStack API key (required for VM provisioning)\n- `CLOUDSTACK_SECRET_KEY` - CloudStack secret key (required for VM provisioning)\n- User-specific: TOTP secrets stored encrypted in database\n\n## API Documentation\n\n### Authentication\n- `POST /api/auth/register` - Register new user\n- `POST /api/auth/login` - Login with credentials\n- `POST /api/auth/verify-2fa` - Verify TOTP code\n- `GET /api/auth/me` - Get current user\n- `GET /api/auth/2fa/setup` - Generate 2FA QR code\n- `POST /api/auth/2fa/enable` - Enable 2FA\n- `POST /api/auth/2fa/disable` - Disable 2FA\n- `POST /api/auth/logout` - Logout\n\n### Virtual Machines (CloudStack)\n- `GET /api/vms` - List user's virtual machines\n- `POST /api/vms` - Deploy new VM (async with job polling)\n- `POST /api/vms/:id/start` - Start stopped VM\n- `POST /api/vms/:id/stop` - Stop running VM\n- `POST /api/vms/:id/reboot` - Reboot running VM\n- `DELETE /api/vms/:id` - Destroy VM (expunge from CloudStack)\n- `GET /api/cloudstack/zones` - List available zones\n- `GET /api/cloudstack/templates?zoneId=X` - List OS templates for zone\n- `GET /api/cloudstack/service-offerings` - List compute plans\n\n### Kubernetes Clusters\n- `GET /api/kubernetes/clusters` - List all clusters\n- `POST /api/kubernetes/clusters` - Create new cluster\n- `PATCH /api/kubernetes/clusters/:id` - Update cluster\n- `DELETE /api/kubernetes/clusters/:id` - Delete cluster\n\n### Databases\n- `GET /api/databases` - List all database instances\n- `POST /api/databases` - Create new database\n- `PATCH /api/databases/:id` - Update database\n- `DELETE /api/databases/:id` - Delete database\n\n### IAM (Identity and Access Management)\n- `GET /api/iam/roles` - List all roles (filtered by organization)\n- `POST /api/iam/roles` - Create custom role\n- `PATCH /api/iam/roles/:id` - Update role\n- `DELETE /api/iam/roles/:id` - Delete role\n- `GET /api/iam/permissions` - List all permissions\n- `GET /api/iam/roles/:roleId/permissions` - Get role permissions\n- `POST /api/iam/roles/:roleId/permissions` - Assign permission to role\n- `DELETE /api/iam/roles/:roleId/permissions/:permissionId` - Remove permission from role\n- `GET /api/iam/team-members` - List organization team members\n- `POST /api/iam/team-members` - Invite team member\n- `PATCH /api/iam/team-members/:id` - Update team member\n- `DELETE /api/iam/team-members/:id` - Remove team member\n- `GET /api/iam/users/:userId/roles` - Get user roles\n- `POST /api/iam/users/:userId/roles` - Assign role to user\n- `DELETE /api/iam/users/:userId/roles/:roleId` - Remove role from user\n- `GET /api/iam/me/permissions` - Get current user permissions\n\n## Deployment\n\nThe application runs on port 5000 with:\n- Express backend serving API\n- Vite dev server for frontend (development)\n- Session-based authentication\n- PostgreSQL database for persistence\n\n## Future Enhancements\n\nBased on StackBill feature analysis:\n1. Marketplace with 125+ application templates\n2. Advanced monitoring (StackWatch) with AI-powered alerts\n3. Payment gateway integration (Stripe, Razorpay, PayPal)\n4. Multi-currency support\n5. DNS-as-a-Service with PowerDNS\n6. Helpdesk/ticketing system\n7. Terraform integration for IaC\n8. Reserved instance pricing models\n9. CDN service integration\n10. Advanced analytics and reporting\n\n## Contact\n\n- Platform: AkashOne.com\n- Company: Mieux Technologies Pvt Ltd\n- Support: admin@akashone.com\n","size_bytes":13256},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { randomUUID } from \"crypto\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport {\n  registerUser,\n  loginUser,\n  verifyTwoFactor,\n  generateTwoFactorSecret,\n  enableTwoFactor,\n  disableTwoFactor,\n} from \"./auth\";\nimport { createFeatureFlagMiddleware } from \"./middleware/feature-flags\";\nimport { insertDiscountCouponSchema } from \"@shared/schema\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(\n    session({\n      secret: process.env.SESSION_SECRET || \"development-secret-key\",\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        secure: process.env.NODE_ENV === \"production\",\n        httpOnly: true,\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      },\n    })\n  );\n\n  // Feature flag middleware factory\n  const requireFeature = createFeatureFlagMiddleware(storage);\n  \n  // Usage example for protecting routes with feature flags:\n  // app.get(\"/api/payment-gateways\", requireAuth, requireFeature(\"payment_gateway\"), async (req, res) => {\n  //   ... route handler\n  // });\n\n  // Register endpoint\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, email, password, gstNumber } = req.body;\n\n      if (!username || !email || !password || !gstNumber) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      await registerUser(username, email, password, gstNumber);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      if (!username || !password) {\n        return res.status(400).json({ message: \"Missing credentials\" });\n      }\n\n      const result = await loginUser(username, password);\n\n      if (result.requiresTwoFactor) {\n        res.json(result);\n      } else {\n        req.session.userId = result.user?.id;\n        \n        // Log successful login\n        if (result.user) {\n          await storage.createUserActivity({\n            userId: result.user.id,\n            username: result.user.username,\n            action: \"login\",\n            resourceType: null,\n            resourceId: null,\n            resourceName: null,\n            ipAddress: req.ip || null,\n            userAgent: req.headers[\"user-agent\"] || null,\n            metadata: { loginMethod: \"password\" },\n          });\n        }\n        \n        res.json(result);\n      }\n    } catch (error: any) {\n      res.status(401).json({ message: error.message });\n    }\n  });\n\n  // Verify 2FA endpoint\n  app.post(\"/api/auth/verify-2fa\", async (req, res) => {\n    try {\n      const { sessionToken, twoFactorCode } = req.body;\n\n      if (!sessionToken || !twoFactorCode) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const result = await verifyTwoFactor(sessionToken, twoFactorCode);\n      req.session.userId = result.user.id;\n      \n      // Log successful 2FA login\n      await storage.createUserActivity({\n        userId: result.user.id,\n        username: result.user.username,\n        action: \"login\",\n        resourceType: null,\n        resourceId: null,\n        resourceName: null,\n        ipAddress: req.ip || null,\n        userAgent: req.headers[\"user-agent\"] || null,\n        metadata: { loginMethod: \"2fa\" },\n      });\n      \n      res.json(result);\n    } catch (error: any) {\n      res.status(401).json({ message: error.message });\n    }\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Don't send password or secret\n      const { password, twoFactorSecret, ...safeUser } = user;\n      res.json(safeUser);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Setup 2FA endpoint\n  app.get(\"/api/auth/2fa/setup\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const result = await generateTwoFactorSecret(req.session.userId);\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Enable 2FA endpoint\n  app.post(\"/api/auth/2fa/enable\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { code } = req.body;\n\n      if (!code) {\n        return res.status(400).json({ message: \"Verification code required\" });\n      }\n\n      const result = await enableTwoFactor(req.session.userId, code);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Disable 2FA endpoint\n  app.post(\"/api/auth/2fa/disable\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const result = await disableTwoFactor(req.session.userId);\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  // Kubernetes Cluster endpoints\n  app.get(\"/api/kubernetes/clusters\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const clusters = await storage.getKubernetesClusters(req.session.userId);\n      res.json(clusters);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/kubernetes/clusters\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { name, version, region, masterNodes, workerNodes, instanceType, autoHealing, autoScaling } = req.body;\n\n      if (!name || !version || !region || !instanceType) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const cluster = await storage.createKubernetesCluster({\n        name,\n        version,\n        region,\n        masterNodes: parseInt(masterNodes) || 3,\n        workerNodes: parseInt(workerNodes) || 3,\n        instanceType,\n        autoHealing: autoHealing !== false,\n        autoScaling: autoScaling === true,\n        status: \"running\",\n        cpuTotal: 0,\n        memoryTotal: 0,\n        userId: req.session.userId,\n      });\n\n      res.json(cluster);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/kubernetes/clusters/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      const updates = req.body;\n\n      const cluster = await storage.updateKubernetesCluster(id, updates);\n\n      if (!cluster) {\n        return res.status(404).json({ message: \"Cluster not found\" });\n      }\n\n      res.json(cluster);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/kubernetes/clusters/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      const deleted = await storage.deleteKubernetesCluster(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Cluster not found\" });\n      }\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Database endpoints\n  app.get(\"/api/databases\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const databases = await storage.getDatabases(req.session.userId);\n      res.json(databases);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/databases\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { name, engine, version, region, storage, cpu, memory, instanceType, backupEnabled, multiAZ } = req.body;\n\n      if (!name || !engine || !version || !region || !instanceType) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const database = await storage.createDatabase({\n        name,\n        engine,\n        version,\n        region,\n        storage: parseInt(storage) || 100,\n        cpu: parseInt(cpu) || 2,\n        memory: parseInt(memory) || 8,\n        instanceType,\n        backupEnabled: backupEnabled !== false,\n        multiAZ: multiAZ === true,\n        status: \"running\",\n        port: 5432,\n        connectionsMax: 200,\n        userId: req.session.userId,\n      });\n\n      res.json(database);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/databases/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      const updates = req.body;\n\n      const database = await storage.updateDatabase(id, updates);\n\n      if (!database) {\n        return res.status(404).json({ message: \"Database not found\" });\n      }\n\n      res.json(database);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/databases/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      const deleted = await storage.deleteDatabase(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Database not found\" });\n      }\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // DNS Domain endpoints\n  app.get(\"/api/dns/domains\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const domains = await storage.getDnsDomains(req.session.userId);\n      res.json(domains);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/dns/domains\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { name, dnssec, nameservers } = req.body;\n\n      if (!name) {\n        return res.status(400).json({ message: \"Domain name is required\" });\n      }\n\n      const domain = await storage.createDnsDomain({\n        name,\n        dnssec: dnssec === true,\n        nameservers: nameservers || undefined,\n        status: \"pending\",\n        userId: req.session.userId,\n      });\n\n      res.json(domain);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/dns/domains/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      \n      // Verify ownership before allowing update\n      const existingDomain = await storage.getDnsDomain(id);\n      if (!existingDomain) {\n        return res.status(404).json({ message: \"Domain not found\" });\n      }\n      if (existingDomain.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Sanitize updates - only allow specific fields, never userId\n      const { status, dnssec, nameservers } = req.body;\n      const sanitizedUpdates: any = {};\n      if (status !== undefined) sanitizedUpdates.status = status;\n      if (dnssec !== undefined) sanitizedUpdates.dnssec = dnssec;\n      if (nameservers !== undefined) sanitizedUpdates.nameservers = nameservers;\n\n      const domain = await storage.updateDnsDomain(id, sanitizedUpdates);\n\n      res.json(domain);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/dns/domains/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      \n      // Verify ownership before allowing delete\n      const existingDomain = await storage.getDnsDomain(id);\n      if (!existingDomain) {\n        return res.status(404).json({ message: \"Domain not found\" });\n      }\n      if (existingDomain.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const deleted = await storage.deleteDnsDomain(id);\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // DNS Record endpoints\n  app.get(\"/api/dns/records/:domainId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { domainId } = req.params;\n      \n      // Verify domain ownership before returning records\n      const domain = await storage.getDnsDomain(domainId);\n      if (!domain) {\n        return res.status(404).json({ message: \"Domain not found\" });\n      }\n      if (domain.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const records = await storage.getDnsRecords(domainId);\n      res.json(records);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/dns/records\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { domainId, type, name, value, ttl, priority } = req.body;\n\n      if (!domainId || !type || !name || !value) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Verify domain ownership before creating record\n      const domain = await storage.getDnsDomain(domainId);\n      if (!domain) {\n        return res.status(404).json({ message: \"Domain not found\" });\n      }\n      if (domain.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const record = await storage.createDnsRecord({\n        domainId,\n        type,\n        name,\n        value,\n        ttl: ttl ? parseInt(ttl) : undefined,\n        priority: priority ? parseInt(priority) : undefined,\n        userId: req.session.userId,\n      });\n\n      res.json(record);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/dns/records/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      \n      // Verify record ownership before allowing update\n      const existingRecord = await storage.getDnsRecord(id);\n      if (!existingRecord) {\n        return res.status(404).json({ message: \"Record not found\" });\n      }\n      if (existingRecord.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Sanitize updates - only allow specific fields, never userId or domainId\n      const { type, name, value, ttl, priority } = req.body;\n      const sanitizedUpdates: any = {};\n      if (type !== undefined) sanitizedUpdates.type = type;\n      if (name !== undefined) sanitizedUpdates.name = name;\n      if (value !== undefined) sanitizedUpdates.value = value;\n      if (ttl !== undefined) sanitizedUpdates.ttl = ttl;\n      if (priority !== undefined) sanitizedUpdates.priority = priority;\n\n      const record = await storage.updateDnsRecord(id, sanitizedUpdates);\n\n      res.json(record);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/dns/records/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      \n      // Verify record ownership before allowing delete\n      const existingRecord = await storage.getDnsRecord(id);\n      if (!existingRecord) {\n        return res.status(404).json({ message: \"Record not found\" });\n      }\n      if (existingRecord.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const deleted = await storage.deleteDnsRecord(id);\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Virtual Machines endpoints\n  // Get CloudStack zones (for provisioning wizard)\n  app.get(\"/api/cloudstack/zones\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      const result = await cloudstack.listZones();\n      res.json(result.zone || []);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get CloudStack templates (for provisioning wizard)\n  app.get(\"/api/cloudstack/templates\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { zoneId } = req.query;\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      const result = await cloudstack.listTemplates(\"featured\", zoneId as string);\n      res.json(result.template || []);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get CloudStack service offerings (for provisioning wizard)\n  app.get(\"/api/cloudstack/service-offerings\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      const result = await cloudstack.listServiceOfferings();\n      res.json(result.serviceoffering || []);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // List virtual machines\n  app.get(\"/api/vms\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const vms = await storage.getVirtualMachines(req.session.userId);\n      res.json(vms);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Deploy a new virtual machine\n  app.post(\"/api/vms\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { name, displayName, templateId, serviceOfferingId, zoneId, networkIds } = req.body;\n\n      if (!name || !templateId || !serviceOfferingId || !zoneId) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Call CloudStack API to deploy VM (polls async job until complete)\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      \n      const jobResult = await cloudstack.deployVirtualMachine({\n        name,\n        displayName: displayName || name,\n        templateId,\n        serviceOfferingId,\n        zoneId,\n        networkIds: networkIds || [],\n      });\n\n      // After async job completes, extract VM data from job result\n      const vmData = jobResult.virtualmachine;\n      \n      if (!vmData) {\n        throw new Error(\"VM deployment completed but no VM data returned\");\n      }\n\n      // Cache VM in our database\n      const vm = await storage.createVirtualMachine({\n        cloudstackId: vmData.id,\n        name: vmData.name,\n        displayName: vmData.displayname || vmData.name,\n        state: vmData.state,\n        templateId: vmData.templateid,\n        templateName: vmData.templatename || null,\n        serviceOfferingId: vmData.serviceofferingid,\n        serviceOfferingName: vmData.serviceofferingname || null,\n        zoneId: vmData.zoneid,\n        zoneName: vmData.zonename || null,\n        cpu: vmData.cpunumber || 1,\n        memory: vmData.memory || 512,\n        ipAddress: vmData.nic?.[0]?.ipaddress || null,\n        networkIds: vmData.nic?.map((n: any) => n.networkid) || null,\n        userId: req.session.userId,\n      });\n\n      // Log VM creation activity\n      const user = await storage.getUser(req.session.userId);\n      if (user) {\n        await storage.createUserActivity({\n          userId: user.id,\n          username: user.username,\n          action: \"vm.create\",\n          resourceType: \"vm\",\n          resourceId: vm.id,\n          resourceName: vm.displayName,\n          ipAddress: req.ip || null,\n          userAgent: req.headers[\"user-agent\"] || null,\n          metadata: {\n            cpu: vm.cpu,\n            memory: vm.memory,\n            templateName: vm.templateName,\n            zoneName: vm.zoneName,\n          },\n        });\n      }\n\n      res.json(vm);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Start a virtual machine\n  app.post(\"/api/vms/:id/start\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n\n      // Verify ownership\n      const vm = await storage.getVirtualMachine(id);\n      if (!vm) {\n        return res.status(404).json({ message: \"VM not found\" });\n      }\n      if (vm.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Call CloudStack API (polls async job until complete)\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      const jobResult = await cloudstack.startVirtualMachine(vm.cloudstackId);\n\n      // Update state from job result and return updated VM\n      const vmData = jobResult.virtualmachine;\n      let updatedVM = vm;\n      if (vmData) {\n        updatedVM = await storage.updateVirtualMachine(id, { \n          state: vmData.state,\n          ipAddress: vmData.nic?.[0]?.ipaddress || vm.ipAddress,\n        }) || vm;\n      }\n\n      // Log VM start activity\n      const user = await storage.getUser(req.session.userId);\n      if (user) {\n        await storage.createUserActivity({\n          userId: user.id,\n          username: user.username,\n          action: \"vm.start\",\n          resourceType: \"vm\",\n          resourceId: updatedVM.id,\n          resourceName: updatedVM.displayName,\n          ipAddress: req.ip || null,\n          userAgent: req.headers[\"user-agent\"] || null,\n          metadata: { state: updatedVM.state },\n        });\n      }\n\n      res.json(updatedVM);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Stop a virtual machine\n  app.post(\"/api/vms/:id/stop\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n\n      // Verify ownership\n      const vm = await storage.getVirtualMachine(id);\n      if (!vm) {\n        return res.status(404).json({ message: \"VM not found\" });\n      }\n      if (vm.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Call CloudStack API (polls async job until complete)\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      const jobResult = await cloudstack.stopVirtualMachine(vm.cloudstackId);\n\n      // Update state from job result and return updated VM\n      const vmData = jobResult.virtualmachine;\n      let updatedVM = vm;\n      if (vmData) {\n        updatedVM = await storage.updateVirtualMachine(id, { state: vmData.state }) || vm;\n      }\n\n      // Log VM stop activity\n      const user = await storage.getUser(req.session.userId);\n      if (user) {\n        await storage.createUserActivity({\n          userId: user.id,\n          username: user.username,\n          action: \"vm.stop\",\n          resourceType: \"vm\",\n          resourceId: updatedVM.id,\n          resourceName: updatedVM.displayName,\n          ipAddress: req.ip || null,\n          userAgent: req.headers[\"user-agent\"] || null,\n          metadata: { state: updatedVM.state },\n        });\n      }\n\n      res.json(updatedVM);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Reboot a virtual machine\n  app.post(\"/api/vms/:id/reboot\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n\n      // Verify ownership\n      const vm = await storage.getVirtualMachine(id);\n      if (!vm) {\n        return res.status(404).json({ message: \"VM not found\" });\n      }\n      if (vm.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Call CloudStack API (polls async job until complete)\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      const jobResult = await cloudstack.rebootVirtualMachine(vm.cloudstackId);\n\n      // Update state from job result and return updated VM\n      const vmData = jobResult.virtualmachine;\n      let updatedVM = vm;\n      if (vmData) {\n        updatedVM = await storage.updateVirtualMachine(id, { state: vmData.state }) || vm;\n      }\n\n      // Log VM reboot activity\n      const user = await storage.getUser(req.session.userId);\n      if (user) {\n        await storage.createUserActivity({\n          userId: user.id,\n          username: user.username,\n          action: \"vm.reboot\",\n          resourceType: \"vm\",\n          resourceId: updatedVM.id,\n          resourceName: updatedVM.displayName,\n          ipAddress: req.ip || null,\n          userAgent: req.headers[\"user-agent\"] || null,\n          metadata: { state: updatedVM.state },\n        });\n      }\n\n      res.json(updatedVM);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Destroy a virtual machine\n  app.delete(\"/api/vms/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n\n      // Verify ownership\n      const vm = await storage.getVirtualMachine(id);\n      if (!vm) {\n        return res.status(404).json({ message: \"VM not found\" });\n      }\n      if (vm.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Log VM delete activity before deletion\n      const user = await storage.getUser(req.session.userId);\n      if (user) {\n        await storage.createUserActivity({\n          userId: user.id,\n          username: user.username,\n          action: \"vm.delete\",\n          resourceType: \"vm\",\n          resourceId: vm.id,\n          resourceName: vm.displayName,\n          ipAddress: req.ip || null,\n          userAgent: req.headers[\"user-agent\"] || null,\n          metadata: {\n            cloudstackId: vm.cloudstackId,\n            zoneName: vm.zoneName,\n          },\n        });\n      }\n\n      // Call CloudStack API (polls async job until complete)\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      await cloudstack.destroyVirtualMachine(vm.cloudstackId, true);\n\n      // Remove from cache after successful destruction\n      await storage.deleteVirtualMachine(id);\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // ============================================\n  // VM SNAPSHOTS\n  // ============================================\n\n  // List VM snapshots\n  app.get(\"/api/vms/:vmId/snapshots\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const vmId = req.params.vmId;\n\n      // Verify VM ownership\n      const vm = await storage.getVirtualMachine(vmId);\n      if (!vm || vm.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"VM not found or access denied\" });\n      }\n\n      // Get snapshots from storage\n      const snapshots = await storage.getVMSnapshots(vmId, req.session.userId);\n      res.json(snapshots);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Create VM snapshot\n  app.post(\"/api/vms/:vmId/snapshots\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const vmId = req.params.vmId;\n      const { name, description, snapshotMemory } = req.body;\n\n      // Verify VM ownership\n      const vm = await storage.getVirtualMachine(vmId);\n      if (!vm || vm.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"VM not found or access denied\" });\n      }\n\n      // Call CloudStack API\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      const cloudstackSnapshot = await cloudstack.createVMSnapshot(\n        vm.cloudstackId,\n        name,\n        description,\n        snapshotMemory ?? true\n      );\n\n      // Store snapshot in database\n      const snapshot = await storage.createVMSnapshot({\n        cloudstackSnapshotId: cloudstackSnapshot.id,\n        vmId: vm.id,\n        userId: req.session.userId,\n        name: cloudstackSnapshot.name || name,\n        description: cloudstackSnapshot.description || description || null,\n        state: cloudstackSnapshot.state,\n        snapshotMemory: snapshotMemory ?? true,\n      });\n\n      res.json(snapshot);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Delete VM snapshot\n  app.delete(\"/api/snapshots/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const snapshotId = req.params.id;\n\n      // Get snapshot from storage\n      const snapshot = await storage.getVMSnapshot(snapshotId);\n      if (!snapshot) {\n        return res.status(404).json({ message: \"Snapshot not found\" });\n      }\n\n      // Verify ownership via VM\n      const vm = await storage.getVirtualMachine(snapshot.vmId);\n      if (!vm || vm.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Call CloudStack API\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      await cloudstack.deleteVMSnapshot(snapshot.cloudstackSnapshotId);\n\n      // Delete from storage\n      await storage.deleteVMSnapshot(snapshotId);\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Restore VM to snapshot\n  app.post(\"/api/snapshots/:id/restore\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const snapshotId = req.params.id;\n\n      // Get snapshot from storage\n      const snapshot = await storage.getVMSnapshot(snapshotId);\n      if (!snapshot) {\n        return res.status(404).json({ message: \"Snapshot not found\" });\n      }\n\n      // Verify ownership via VM\n      const vm = await storage.getVirtualMachine(snapshot.vmId);\n      if (!vm || vm.userId !== req.session.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Call CloudStack API\n      const { getCloudStackClient } = await import(\"./cloudstack/client\");\n      const cloudstack = getCloudStackClient();\n      const restoredVM = await cloudstack.revertToVMSnapshot(snapshot.cloudstackSnapshotId);\n\n      // Update VM state in storage\n      if (restoredVM) {\n        await storage.updateVirtualMachine(vm.id, {\n          state: restoredVM.state,\n          lastSynced: new Date(),\n        });\n      }\n\n      res.json({ success: true, vm: restoredVM });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // ===================================\n  // Feature Flags Management\n  // ===================================\n\n  // Get all feature flags\n  app.get(\"/api/feature-flags\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const flags = await storage.getFeatureFlags();\n      res.json(flags);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get feature flag by key\n  app.get(\"/api/feature-flags/key/:key\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const flag = await storage.getFeatureFlagByKey(req.params.key);\n      if (!flag) {\n        return res.status(404).json({ message: \"Feature flag not found\" });\n      }\n\n      res.json(flag);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Update feature flag (toggle enabled/disabled)\n  app.patch(\"/api/feature-flags/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      // TODO: Add super admin role check here\n      // For now, any authenticated user can toggle features (update this when RBAC is implemented)\n\n      const { enabled } = req.body;\n      if (typeof enabled !== \"boolean\") {\n        return res.status(400).json({ message: \"Invalid request: enabled must be boolean\" });\n      }\n\n      const updatedFlag = await storage.updateFeatureFlag(req.params.id, { enabled });\n      if (!updatedFlag) {\n        return res.status(404).json({ message: \"Feature flag not found\" });\n      }\n\n      res.json(updatedFlag);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ===================================\n  // Activity Logging\n  // ===================================\n\n  // Create activity log\n  app.post(\"/api/activity-logs\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { action, resourceType, resourceId, metadata } = req.body;\n      \n      if (!action || !resourceType) {\n        return res.status(400).json({ message: \"Missing required fields: action and resourceType\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      const activity = await storage.createUserActivity({\n        userId: req.session.userId,\n        username: user.username,\n        action,\n        resourceType: resourceType || null,\n        resourceId: resourceId || null,\n        resourceName: null,\n        ipAddress: req.ip || null,\n        userAgent: req.headers[\"user-agent\"] || null,\n        metadata: metadata || null,\n      });\n\n      res.json(activity);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get activity logs (with optional user filtering)\n  app.get(\"/api/activity-logs\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { userId } = req.query;\n      \n      // If userId is provided, filter by that user\n      // Otherwise, return all activities (for admin view)\n      let activities;\n      \n      if (userId && typeof userId === \"string\") {\n        activities = await storage.getUserActivities(userId);\n      } else {\n        // Call getUserActivities without parameters to get all activities\n        activities = await storage.getUserActivities();\n      }\n\n      res.json(activities);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ===================================\n  // IAM - Roles Management\n  // ===================================\n\n  // Get all roles (filtered by organization if user is not admin)\n  app.get(\"/api/iam/roles\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Get roles - system roles plus org-specific roles\n      const roles = await storage.getRoles(user.organizationId ?? undefined);\n      res.json(roles);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Create custom role\n  app.post(\"/api/iam/roles\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Check permission\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"iam.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const { name, description } = req.body;\n      if (!name) {\n        return res.status(400).json({ message: \"Role name is required\" });\n      }\n\n      const role = await storage.createRole({\n        name,\n        description,\n        isSystem: false,\n        organizationId: user.organizationId,\n      });\n\n      res.status(201).json(role);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Update role\n  app.patch(\"/api/iam/roles/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"iam.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const role = await storage.getRole(req.params.id);\n      if (!role) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n\n      if (role.isSystem) {\n        return res.status(400).json({ message: \"Cannot modify system roles\" });\n      }\n\n      const { name, description } = req.body;\n      const updatedRole = await storage.updateRole(req.params.id, { name, description });\n      res.json(updatedRole);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Delete role\n  app.delete(\"/api/iam/roles/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"iam.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const role = await storage.getRole(req.params.id);\n      if (!role) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n\n      if (role.isSystem) {\n        return res.status(400).json({ message: \"Cannot delete system roles\" });\n      }\n\n      await storage.deleteRole(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ===================================\n  // IAM - Permissions Management\n  // ===================================\n\n  // Get all permissions\n  app.get(\"/api/iam/permissions\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const permissions = await storage.getPermissions();\n      res.json(permissions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get permissions for a specific role\n  app.get(\"/api/iam/roles/:roleId/permissions\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const permissions = await storage.getRolePermissions(req.params.roleId);\n      res.json(permissions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Assign permission to role\n  app.post(\"/api/iam/roles/:roleId/permissions\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"iam.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const role = await storage.getRole(req.params.roleId);\n      if (!role) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n\n      if (role.isSystem) {\n        return res.status(400).json({ message: \"Cannot modify system role permissions\" });\n      }\n\n      const { permissionId } = req.body;\n      if (!permissionId) {\n        return res.status(400).json({ message: \"Permission ID is required\" });\n      }\n\n      const rolePermission = await storage.assignPermissionToRole(req.params.roleId, permissionId);\n      res.status(201).json(rolePermission);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Remove permission from role\n  app.delete(\"/api/iam/roles/:roleId/permissions/:permissionId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"iam.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const role = await storage.getRole(req.params.roleId);\n      if (!role) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n\n      if (role.isSystem) {\n        return res.status(400).json({ message: \"Cannot modify system role permissions\" });\n      }\n\n      await storage.removePermissionFromRole(req.params.roleId, req.params.permissionId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ===================================\n  // IAM - Team Members Management\n  // ===================================\n\n  // Get all team members in organization\n  app.get(\"/api/iam/team-members\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user || !user.organizationId) {\n        return res.status(400).json({ message: \"User not associated with an organization\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"team.view\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const teamMembers = await storage.getTeamMembers(user.organizationId);\n      \n      // Enrich with user roles\n      const enrichedMembers = await Promise.all(\n        teamMembers.map(async (member) => {\n          if (member.userId) {\n            const roles = await storage.getUserRoles(member.userId);\n            return { ...member, roles };\n          }\n          return { ...member, roles: [] };\n        })\n      );\n\n      res.json(enrichedMembers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Invite team member\n  app.post(\"/api/iam/team-members\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      if (!user || !user.organizationId) {\n        return res.status(400).json({ message: \"User not associated with an organization\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"team.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const { email, roleIds } = req.body;\n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      // Check if member already exists\n      const existing = await storage.getTeamMemberByEmail(email, user.organizationId);\n      if (existing) {\n        return res.status(400).json({ message: \"Team member already exists\" });\n      }\n\n      // Generate invitation token\n      const invitationToken = randomUUID();\n\n      const teamMember = await storage.createTeamMember({\n        email,\n        organizationId: user.organizationId,\n        invitedBy: req.session.userId,\n        invitationToken,\n        status: \"invited\",\n      });\n\n      // TODO: Send invitation email with token\n\n      res.status(201).json(teamMember);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Update team member (change status, assign roles, etc.)\n  app.patch(\"/api/iam/team-members/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"team.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const member = await storage.getTeamMember(req.params.id);\n      if (!member) {\n        return res.status(404).json({ message: \"Team member not found\" });\n      }\n\n      const { status } = req.body;\n      const updatedMember = await storage.updateTeamMember(req.params.id, { status });\n      res.json(updatedMember);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Remove team member\n  app.delete(\"/api/iam/team-members/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"team.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const member = await storage.getTeamMember(req.params.id);\n      if (!member) {\n        return res.status(404).json({ message: \"Team member not found\" });\n      }\n\n      await storage.deleteTeamMember(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ===================================\n  // IAM - User Role Assignments\n  // ===================================\n\n  // Get roles for a user\n  app.get(\"/api/iam/users/:userId/roles\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"team.view\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const roles = await storage.getUserRoles(req.params.userId);\n      res.json(roles);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Assign role to user\n  app.post(\"/api/iam/users/:userId/roles\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"team.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const { roleId } = req.body;\n      if (!roleId) {\n        return res.status(400).json({ message: \"Role ID is required\" });\n      }\n\n      const userRole = await storage.assignRoleToUser(\n        req.params.userId,\n        roleId,\n        req.session.userId\n      );\n      res.status(201).json(userRole);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Remove role from user\n  app.delete(\"/api/iam/users/:userId/roles/:roleId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const hasPermission = await storage.userHasPermission(req.session.userId, \"team.manage\");\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      await storage.removeRoleFromUser(req.params.userId, req.params.roleId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get current user's permissions\n  app.get(\"/api/iam/me/permissions\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const roles = await storage.getUserRoles(req.session.userId);\n      const allPermissions: Set<string> = new Set();\n\n      for (const role of roles) {\n        const permissions = await storage.getRolePermissions(role.id);\n        permissions.forEach((p) => allPermissions.add(p.key));\n      }\n\n      res.json(Array.from(allPermissions));\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Discount Coupons Management\n  app.get(\"/api/coupons\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const coupons = await storage.getDiscountCoupons();\n      res.json(coupons);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/coupons/:id\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const coupon = await storage.getDiscountCoupon(req.params.id);\n      if (!coupon) {\n        return res.status(404).json({ message: \"Coupon not found\" });\n      }\n      res.json(coupon);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/coupons/validate\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const { code, orderAmount } = req.body;\n      const result = await storage.validateCoupon(code, orderAmount);\n      res.json(result);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/coupons\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const validatedData = insertDiscountCouponSchema.parse(req.body);\n      const coupon = await storage.createDiscountCoupon({\n        ...validatedData,\n        createdBy: req.session.userId,\n      });\n      res.status(201).json(coupon);\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid coupon data\", errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/coupons/:id\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const coupon = await storage.updateDiscountCoupon(req.params.id, req.body);\n      if (!coupon) {\n        return res.status(404).json({ message: \"Coupon not found\" });\n      }\n      res.json(coupon);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/coupons/:id\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const deleted = await storage.deleteDiscountCoupon(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Coupon not found\" });\n      }\n      res.json({ message: \"Coupon deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Update user discount percentage (Super Admin only)\n  app.patch(\"/api/users/:id/discount\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const currentUser = await storage.getUser(req.session.userId);\n      if (!currentUser || currentUser.accountType !== \"super_admin\") {\n        return res.status(403).json({ message: \"Only super admins can set discount percentages\" });\n      }\n\n      const { discountPercentage } = req.body;\n      \n      if (typeof discountPercentage !== \"number\" || discountPercentage < 0 || discountPercentage > 100) {\n        return res.status(400).json({ message: \"Discount percentage must be between 0 and 100\" });\n      }\n\n      const user = await storage.updateUser(req.params.id, {\n        defaultDiscountPercentage: discountPercentage,\n      });\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"Discount percentage updated successfully\", user });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":55863},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"cloudstack-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1609},"client/src/pages/dashboard.tsx":{"content":"import { MetricCard } from \"@/components/metric-card\";\nimport { Server, Cpu, HardDrive, Network } from \"lucide-react\";\nimport { ResourceChart } from \"@/components/resource-chart\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\n//todo: remove mock functionality\nconst mockCPUData = Array.from({ length: 12 }, (_, i) => ({\n  time: `${i * 2}h`,\n  value: Math.floor(Math.random() * 40) + 30,\n}));\n\n//todo: remove mock functionality\nconst mockMemoryData = Array.from({ length: 12 }, (_, i) => ({\n  time: `${i * 2}h`,\n  value: Math.floor(Math.random() * 30) + 50,\n}));\n\n//todo: remove mock functionality\nconst recentActivity = [\n  { id: 1, action: \"VM Created\", resource: \"web-server-03\", time: \"2 min ago\", type: \"success\" },\n  { id: 2, action: \"Network Modified\", resource: \"vpc-prod-01\", time: \"15 min ago\", type: \"info\" },\n  { id: 3, action: \"VM Stopped\", resource: \"db-primary\", time: \"1 hour ago\", type: \"warning\" },\n  { id: 4, action: \"Snapshot Created\", resource: \"web-server-02\", time: \"3 hours ago\", type: \"success\" },\n];\n\nexport default function Dashboard() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Overview of your cloud infrastructure\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard\n          title=\"Virtual Machines\"\n          value=\"24\"\n          icon={Server}\n          trend=\"+3 from last week\"\n          trendUp={true}\n        />\n        <MetricCard\n          title=\"CPU Usage\"\n          value=\"42%\"\n          icon={Cpu}\n          trend=\"Normal operation\"\n          trendUp={true}\n        />\n        <MetricCard\n          title=\"Memory\"\n          value=\"68%\"\n          icon={HardDrive}\n          trend=\"+5% from yesterday\"\n          trendUp={false}\n        />\n        <MetricCard\n          title=\"Networks\"\n          value=\"8\"\n          icon={Network}\n          trend=\"2 VPCs, 6 isolated\"\n        />\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-2\">\n        <ResourceChart\n          title=\"CPU Usage (24h)\"\n          data={mockCPUData}\n          color=\"hsl(var(--chart-1))\"\n        />\n        <ResourceChart\n          title=\"Memory Usage (24h)\"\n          data={mockMemoryData}\n          color=\"hsl(var(--chart-2))\"\n        />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base font-medium\">Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {recentActivity.map((activity) => (\n              <div\n                key={activity.id}\n                className=\"flex items-center justify-between border-b border-border pb-3 last:border-0 last:pb-0\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <Badge\n                    variant=\"outline\"\n                    className={\n                      activity.type === \"success\"\n                        ? \"bg-chart-2/10 text-chart-2 border-chart-2/20\"\n                        : activity.type === \"warning\"\n                        ? \"bg-chart-3/10 text-chart-3 border-chart-3/20\"\n                        : \"bg-chart-1/10 text-chart-1 border-chart-1/20\"\n                    }\n                  >\n                    {activity.action}\n                  </Badge>\n                  <span className=\"font-mono text-sm\" data-testid={`activity-resource-${activity.id}`}>\n                    {activity.resource}\n                  </span>\n                </div>\n                <span className=\"text-sm text-muted-foreground\">{activity.time}</span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3874},"client/src/components/examples/NetworkCard.tsx":{"content":"import { NetworkCard } from '../network-card';\n\nconst mockNetwork = {\n  id: \"net-001\",\n  name: \"vpc-production\",\n  type: \"vpc\" as const,\n  cidr: \"10.0.0.0/16\",\n  gateway: \"10.0.0.1\",\n  vlan: \"100\",\n  vmCount: 12,\n};\n\nexport default function NetworkCardExample() {\n  return (\n    <NetworkCard \n      network={mockNetwork} \n      onConfigure={(id) => console.log('Configuring:', id)}\n    />\n  );\n}\n","size_bytes":396},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from '../app-sidebar';\nimport { SidebarProvider } from '@/components/ui/sidebar';\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-[600px] w-full\">\n        <AppSidebar />\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":425},"client/src/components/vm-table.tsx":{"content":"import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { StatusBadge, VMStatus } from \"@/components/status-badge\";\nimport { Play, Square, RotateCw, Trash2, MoreHorizontal } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport interface VirtualMachine {\n  id: string;\n  name: string;\n  status: VMStatus;\n  ip: string;\n  template: string;\n  cpu: string;\n  memory: string;\n  zone: string;\n}\n\ninterface VMTableProps {\n  vms: VirtualMachine[];\n  onAction?: (action: string, vmId: string) => void;\n}\n\nexport function VMTable({ vms, onAction }: VMTableProps) {\n  return (\n    <div className=\"rounded-md border\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Name</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead>IP Address</TableHead>\n            <TableHead>Template</TableHead>\n            <TableHead>CPU/Memory</TableHead>\n            <TableHead>Zone</TableHead>\n            <TableHead className=\"text-right\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {vms.map((vm) => (\n            <TableRow key={vm.id} className=\"hover-elevate\">\n              <TableCell className=\"font-medium\" data-testid={`vm-name-${vm.id}`}>{vm.name}</TableCell>\n              <TableCell>\n                <StatusBadge status={vm.status} />\n              </TableCell>\n              <TableCell className=\"font-mono text-sm\">{vm.ip}</TableCell>\n              <TableCell className=\"text-sm text-muted-foreground\">{vm.template}</TableCell>\n              <TableCell className=\"text-sm\">{vm.cpu} / {vm.memory}</TableCell>\n              <TableCell className=\"text-sm text-muted-foreground\">{vm.zone}</TableCell>\n              <TableCell className=\"text-right\">\n                <div className=\"flex items-center justify-end gap-2\">\n                  {vm.status === \"stopped\" && (\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      onClick={() => onAction?.(\"start\", vm.id)}\n                      data-testid={`button-start-${vm.id}`}\n                    >\n                      <Play className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {vm.status === \"running\" && (\n                    <>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => onAction?.(\"stop\", vm.id)}\n                        data-testid={`button-stop-${vm.id}`}\n                      >\n                        <Square className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => onAction?.(\"restart\", vm.id)}\n                        data-testid={`button-restart-${vm.id}`}\n                      >\n                        <RotateCw className=\"h-4 w-4\" />\n                      </Button>\n                    </>\n                  )}\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button size=\"icon\" variant=\"ghost\" data-testid={`button-more-${vm.id}`}>\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem onClick={() => onAction?.(\"console\", vm.id)}>\n                        Open Console\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => onAction?.(\"snapshot\", vm.id)}>\n                        Create Snapshot\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => onAction?.(\"migrate\", vm.id)}>\n                        Migrate\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        className=\"text-destructive\"\n                        onClick={() => onAction?.(\"delete\", vm.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","size_bytes":4640},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport Dashboard from \"@/pages/dashboard\";\nimport VirtualMachines from \"@/pages/virtual-machines\";\nimport Networks from \"@/pages/networks\";\nimport Storage from \"@/pages/storage\";\nimport Monitoring from \"@/pages/monitoring\";\nimport Billing from \"@/pages/billing\";\nimport DiscountCoupons from \"@/pages/discount-coupons\";\nimport Resellers from \"@/pages/resellers\";\nimport WhiteLabel from \"@/pages/whitelabel\";\nimport ResellerCustomers from \"@/pages/reseller-customers\";\nimport SuperAdmin from \"@/pages/super-admin\";\nimport AdminRights from \"@/pages/admin-rights\";\nimport AllVMs from \"@/pages/all-vms\";\nimport AllKubernetes from \"@/pages/all-kubernetes\";\nimport SecuritySettings from \"@/pages/security-settings\";\nimport FeatureManagement from \"@/pages/feature-management\";\nimport PaymentGateways from \"@/pages/payment-gateways\";\nimport PricingCalculator from \"@/pages/pricing-calculator\";\nimport LoadBalancer from \"@/pages/load-balancer\";\nimport GPUInstances from \"@/pages/gpu-instances\";\nimport SSLCertificates from \"@/pages/ssl-certificates\";\nimport CDN from \"@/pages/cdn\";\nimport AutoScaling from \"@/pages/auto-scaling\";\nimport Kubernetes from \"@/pages/kubernetes\";\nimport Database from \"@/pages/database\";\nimport Marketplace from \"@/pages/marketplace\";\nimport ObjectStorage from \"@/pages/object-storage\";\nimport DNS from \"@/pages/dns\";\nimport TeamManagement from \"@/pages/team-management\";\nimport RoleManagement from \"@/pages/role-management\";\nimport UserDiscounts from \"@/pages/user-discounts\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\nimport Volumes from \"@/pages/volumes\";\nimport Firewall from \"@/pages/firewall\";\nimport SecurityGroups from \"@/pages/security-groups\";\nimport VPC from \"@/pages/vpc\";\nimport ElasticIP from \"@/pages/elastic-ip\";\nimport SSHKeys from \"@/pages/ssh-keys\";\nimport ImagesTemplates from \"@/pages/images-templates\";\nimport ResourceTags from \"@/pages/resource-tags\";\nimport ActivityLogs from \"@/pages/activity-logs\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nfunction Router() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/vms\" component={VirtualMachines} />\n      <Route path=\"/kubernetes\" component={Kubernetes} />\n      <Route path=\"/database\" component={Database} />\n      <Route path=\"/marketplace\" component={Marketplace} />\n      <Route path=\"/object-storage\" component={ObjectStorage} />\n      <Route path=\"/dns\" component={DNS} />\n      <Route path=\"/networks\" component={Networks} />\n      <Route path=\"/storage\" component={Storage} />\n      <Route path=\"/monitoring\" component={Monitoring} />\n      <Route path=\"/billing\" component={Billing} />\n      <Route path=\"/billing/coupons\" component={DiscountCoupons} />\n      <Route path=\"/billing/user-discounts\" component={UserDiscounts} />\n      <Route path=\"/resellers\" component={Resellers} />\n      <Route path=\"/whitelabel\" component={WhiteLabel} />\n      <Route path=\"/customers\" component={ResellerCustomers} />\n      <Route path=\"/super-admin\" component={SuperAdmin} />\n      <Route path=\"/feature-management\" component={FeatureManagement} />\n      <Route path=\"/admin-rights\" component={AdminRights} />\n      <Route path=\"/all-vms\" component={AllVMs} />\n      <Route path=\"/all-kubernetes\" component={AllKubernetes} />\n      <Route path=\"/security\" component={SecuritySettings} />\n      <Route path=\"/payment-gateways\" component={PaymentGateways} />\n      <Route path=\"/pricing-calculator\" component={PricingCalculator} />\n      <Route path=\"/load-balancer\" component={LoadBalancer} />\n      <Route path=\"/gpu-instances\" component={GPUInstances} />\n      <Route path=\"/ssl-certificates\" component={SSLCertificates} />\n      <Route path=\"/cdn\" component={CDN} />\n      <Route path=\"/auto-scaling\" component={AutoScaling} />\n      <Route path=\"/team-management\" component={TeamManagement} />\n      <Route path=\"/role-management\" component={RoleManagement} />\n      <Route path=\"/volumes\" component={Volumes} />\n      <Route path=\"/firewall\" component={Firewall} />\n      <Route path=\"/security-groups\" component={SecurityGroups} />\n      <Route path=\"/vpc\" component={VPC} />\n      <Route path=\"/elastic-ip\" component={ElasticIP} />\n      <Route path=\"/ssh-keys\" component={SSHKeys} />\n      <Route path=\"/images-templates\" component={ImagesTemplates} />\n      <Route path=\"/resource-tags\" component={ResourceTags} />\n      <Route path=\"/activity-logs\" component={ActivityLogs} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                <header className=\"flex items-center justify-between p-4 border-b\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <ThemeToggle />\n                </header>\n                <main className=\"flex-1 overflow-auto p-6\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":6344},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/create-vm-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Plus } from \"lucide-react\";\n\ninterface CreateVMDialogProps {\n  onCreateVM?: (data: any) => void;\n}\n\nexport function CreateVMDialog({ onCreateVM }: CreateVMDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    template: \"\",\n    zone: \"\",\n    serviceOffering: \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Creating VM:\", formData);\n    onCreateVM?.(formData);\n    setOpen(false);\n    setFormData({ name: \"\", template: \"\", zone: \"\", serviceOffering: \"\" });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button data-testid=\"button-create-vm\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create VM\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <form onSubmit={handleSubmit}>\n          <DialogHeader>\n            <DialogTitle>Create Virtual Machine</DialogTitle>\n            <DialogDescription>\n              Deploy a new virtual machine instance from a template.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"vm-name\">VM Name</Label>\n              <Input\n                id=\"vm-name\"\n                placeholder=\"my-webserver-01\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                data-testid=\"input-vm-name\"\n                required\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"template\">Template</Label>\n              <Select\n                value={formData.template}\n                onValueChange={(value) => setFormData({ ...formData, template: value })}\n                required\n              >\n                <SelectTrigger id=\"template\" data-testid=\"select-template\">\n                  <SelectValue placeholder=\"Select a template\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"ubuntu-22.04\">Ubuntu 22.04 LTS</SelectItem>\n                  <SelectItem value=\"centos-8\">CentOS 8</SelectItem>\n                  <SelectItem value=\"debian-11\">Debian 11</SelectItem>\n                  <SelectItem value=\"windows-2022\">Windows Server 2022</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"service-offering\">Service Offering</Label>\n              <Select\n                value={formData.serviceOffering}\n                onValueChange={(value) => setFormData({ ...formData, serviceOffering: value })}\n                required\n              >\n                <SelectTrigger id=\"service-offering\" data-testid=\"select-service-offering\">\n                  <SelectValue placeholder=\"Select compute resources\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"small\">Small (1 vCPU, 2GB RAM)</SelectItem>\n                  <SelectItem value=\"medium\">Medium (2 vCPU, 4GB RAM)</SelectItem>\n                  <SelectItem value=\"large\">Large (4 vCPU, 8GB RAM)</SelectItem>\n                  <SelectItem value=\"xlarge\">X-Large (8 vCPU, 16GB RAM)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"zone\">Zone</Label>\n              <Select\n                value={formData.zone}\n                onValueChange={(value) => setFormData({ ...formData, zone: value })}\n                required\n              >\n                <SelectTrigger id=\"zone\" data-testid=\"select-zone\">\n                  <SelectValue placeholder=\"Select availability zone\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"zone-1\">Zone 1 (US-East)</SelectItem>\n                  <SelectItem value=\"zone-2\">Zone 2 (US-West)</SelectItem>\n                  <SelectItem value=\"zone-3\">Zone 3 (EU-Central)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" data-testid=\"button-submit-vm\">Create VM</Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5043},"client/src/components/examples/AdminRights.tsx":{"content":"import AdminRights from '../../pages/admin-rights';\n\nexport default function AdminRightsExample() {\n  return <AdminRights />;\n}\n","size_bytes":128},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/marketplace.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Search,\n  Rocket,\n  Database as DatabaseIcon,\n  Server,\n  Globe,\n  Zap,\n  Shield,\n  Cloud,\n  Code,\n  Package,\n  TrendingUp,\n  Star,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MarketplaceTemplate {\n  id: string;\n  name: string;\n  category: \"database\" | \"web\" | \"caching\" | \"cms\" | \"devtools\" | \"monitoring\";\n  description: string;\n  longDescription: string;\n  version: string;\n  icon: any;\n  iconColor: string;\n  requirements: {\n    cpu: number;\n    memory: number;\n    storage: number;\n  };\n  estimatedCost: number;\n  popularity: number;\n  tags: string[];\n  deploymentType: \"vm\" | \"database\" | \"kubernetes\";\n}\n\nconst marketplaceTemplates: MarketplaceTemplate[] = [\n  {\n    id: \"wordpress\",\n    name: \"WordPress\",\n    category: \"cms\",\n    description: \"Popular content management system for websites and blogs\",\n    longDescription: \"WordPress is a free and open-source content management system written in PHP. Features include a plugin architecture and a template system, referred to within WordPress as Themes.\",\n    version: \"6.4.2\",\n    icon: Globe,\n    iconColor: \"text-blue-500\",\n    requirements: { cpu: 2, memory: 4, storage: 20 },\n    estimatedCost: 25,\n    popularity: 95,\n    tags: [\"CMS\", \"PHP\", \"MySQL\", \"Blog\"],\n    deploymentType: \"vm\",\n  },\n  {\n    id: \"mysql\",\n    name: \"MySQL Server\",\n    category: \"database\",\n    description: \"Popular open-source relational database management system\",\n    longDescription: \"MySQL is a widely used, open-source relational database management system. Known for its speed, reliability, and ease of use, it's the database of choice for web applications.\",\n    version: \"8.0.35\",\n    icon: DatabaseIcon,\n    iconColor: \"text-orange-500\",\n    requirements: { cpu: 2, memory: 8, storage: 50 },\n    estimatedCost: 35,\n    popularity: 92,\n    tags: [\"Database\", \"SQL\", \"RDBMS\"],\n    deploymentType: \"database\",\n  },\n  {\n    id: \"postgresql\",\n    name: \"PostgreSQL\",\n    category: \"database\",\n    description: \"Advanced open-source relational database\",\n    longDescription: \"PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.\",\n    version: \"15.4\",\n    icon: DatabaseIcon,\n    iconColor: \"text-indigo-500\",\n    requirements: { cpu: 2, memory: 8, storage: 50 },\n    estimatedCost: 35,\n    popularity: 90,\n    tags: [\"Database\", \"SQL\", \"JSONB\"],\n    deploymentType: \"database\",\n  },\n  {\n    id: \"redis\",\n    name: \"Redis\",\n    category: \"caching\",\n    description: \"In-memory data structure store for caching and real-time analytics\",\n    longDescription: \"Redis is an open source, in-memory data structure store, used as a database, cache, and message broker. It supports various data structures such as strings, hashes, lists, sets, and more.\",\n    version: \"7.2.3\",\n    icon: Zap,\n    iconColor: \"text-red-500\",\n    requirements: { cpu: 1, memory: 4, storage: 10 },\n    estimatedCost: 20,\n    popularity: 88,\n    tags: [\"Cache\", \"In-Memory\", \"NoSQL\"],\n    deploymentType: \"database\",\n  },\n  {\n    id: \"mongodb\",\n    name: \"MongoDB\",\n    category: \"database\",\n    description: \"Popular NoSQL document database\",\n    longDescription: \"MongoDB is a source-available cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas.\",\n    version: \"7.0.2\",\n    icon: DatabaseIcon,\n    iconColor: \"text-green-500\",\n    requirements: { cpu: 2, memory: 8, storage: 50 },\n    estimatedCost: 35,\n    popularity: 87,\n    tags: [\"NoSQL\", \"Document DB\", \"JSON\"],\n    deploymentType: \"database\",\n  },\n  {\n    id: \"nginx\",\n    name: \"NGINX\",\n    category: \"web\",\n    description: \"High-performance HTTP server and reverse proxy\",\n    longDescription: \"NGINX is a web server that can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. Known for its high performance, stability, rich feature set, simple configuration, and low resource consumption.\",\n    version: \"1.25.3\",\n    icon: Server,\n    iconColor: \"text-green-600\",\n    requirements: { cpu: 1, memory: 2, storage: 10 },\n    estimatedCost: 15,\n    popularity: 85,\n    tags: [\"Web Server\", \"Reverse Proxy\", \"Load Balancer\"],\n    deploymentType: \"vm\",\n  },\n  {\n    id: \"docker\",\n    name: \"Docker Engine\",\n    category: \"devtools\",\n    description: \"Container runtime for building and running applications\",\n    longDescription: \"Docker is a platform designed to help developers build, share, and run modern applications. It provides tools to package applications into containers—standardized executable components combining application source code with the OS libraries.\",\n    version: \"24.0.7\",\n    icon: Package,\n    iconColor: \"text-blue-600\",\n    requirements: { cpu: 2, memory: 4, storage: 30 },\n    estimatedCost: 25,\n    popularity: 93,\n    tags: [\"Containers\", \"DevOps\", \"CI/CD\"],\n    deploymentType: \"vm\",\n  },\n  {\n    id: \"grafana\",\n    name: \"Grafana\",\n    category: \"monitoring\",\n    description: \"Analytics and monitoring platform\",\n    longDescription: \"Grafana is an open-source analytics and monitoring platform. It allows you to query, visualize, alert on, and understand your metrics no matter where they are stored.\",\n    version: \"10.2.2\",\n    icon: TrendingUp,\n    iconColor: \"text-orange-600\",\n    requirements: { cpu: 2, memory: 4, storage: 20 },\n    estimatedCost: 25,\n    popularity: 82,\n    tags: [\"Monitoring\", \"Analytics\", \"Dashboards\"],\n    deploymentType: \"vm\",\n  },\n  {\n    id: \"gitlab\",\n    name: \"GitLab CE\",\n    category: \"devtools\",\n    description: \"Complete DevOps platform delivered as a single application\",\n    longDescription: \"GitLab is a web-based DevOps lifecycle tool that provides a Git repository manager providing wiki, issue-tracking and CI/CD pipeline features, using an open-source license.\",\n    version: \"16.6.1\",\n    icon: Code,\n    iconColor: \"text-purple-500\",\n    requirements: { cpu: 4, memory: 8, storage: 50 },\n    estimatedCost: 50,\n    popularity: 80,\n    tags: [\"Git\", \"CI/CD\", \"DevOps\"],\n    deploymentType: \"vm\",\n  },\n  {\n    id: \"nextcloud\",\n    name: \"Nextcloud\",\n    category: \"cms\",\n    description: \"Self-hosted file sharing and collaboration platform\",\n    longDescription: \"Nextcloud is a suite of client-server software for creating and using file hosting services. It offers an on-premise cloud storage solution that gives you full control over your data.\",\n    version: \"27.1.4\",\n    icon: Cloud,\n    iconColor: \"text-blue-500\",\n    requirements: { cpu: 2, memory: 4, storage: 100 },\n    estimatedCost: 30,\n    popularity: 78,\n    tags: [\"File Sharing\", \"Collaboration\", \"Storage\"],\n    deploymentType: \"vm\",\n  },\n  {\n    id: \"elasticsearch\",\n    name: \"Elasticsearch\",\n    category: \"database\",\n    description: \"Distributed search and analytics engine\",\n    longDescription: \"Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search.\",\n    version: \"8.11.1\",\n    icon: Search,\n    iconColor: \"text-yellow-500\",\n    requirements: { cpu: 4, memory: 16, storage: 100 },\n    estimatedCost: 75,\n    popularity: 84,\n    tags: [\"Search\", \"Analytics\", \"Big Data\"],\n    deploymentType: \"vm\",\n  },\n  {\n    id: \"minio\",\n    name: \"MinIO\",\n    category: \"database\",\n    description: \"High-performance S3-compatible object storage\",\n    longDescription: \"MinIO is a High Performance Object Storage released under GNU AGPLv3. It is API compatible with Amazon S3 cloud storage service. Perfect for storing unstructured data like photos, videos, log files, backups.\",\n    version: \"2023.12.02\",\n    icon: Cloud,\n    iconColor: \"text-red-600\",\n    requirements: { cpu: 2, memory: 8, storage: 200 },\n    estimatedCost: 40,\n    popularity: 76,\n    tags: [\"Object Storage\", \"S3\", \"Cloud Storage\"],\n    deploymentType: \"vm\",\n  },\n];\n\nexport default function Marketplace() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<\"all\" | MarketplaceTemplate[\"category\"]>(\"all\");\n  const [selectedTemplate, setSelectedTemplate] = useState<MarketplaceTemplate | null>(null);\n  const [deployDialogOpen, setDeployDialogOpen] = useState(false);\n  const [deploymentConfig, setDeploymentConfig] = useState({\n    name: \"\",\n    region: \"us-east-1\",\n    instanceType: \"m5.large\",\n  });\n\n  const filteredTemplates = marketplaceTemplates\n    .filter((template) => {\n      const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n      const matchesCategory = selectedCategory === \"all\" || template.category === selectedCategory;\n      return matchesSearch && matchesCategory;\n    })\n    .sort((a, b) => b.popularity - a.popularity);\n\n  const handleDeploy = () => {\n    if (!selectedTemplate) return;\n\n    toast({\n      title: \"Deployment Started\",\n      description: `Deploying ${selectedTemplate.name} as \"${deploymentConfig.name}\"...`,\n    });\n\n    setTimeout(() => {\n      toast({\n        title: \"Deployment Successful\",\n        description: `${selectedTemplate.name} has been deployed and is now running.`,\n      });\n      setDeployDialogOpen(false);\n      setDeploymentConfig({ name: \"\", region: \"us-east-1\", instanceType: \"m5.large\" });\n      setSelectedTemplate(null);\n    }, 2000);\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"database\":\n        return DatabaseIcon;\n      case \"web\":\n        return Server;\n      case \"caching\":\n        return Zap;\n      case \"cms\":\n        return Globe;\n      case \"devtools\":\n        return Code;\n      case \"monitoring\":\n        return TrendingUp;\n      default:\n        return Package;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Marketplace</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Deploy pre-configured applications with a single click\n          </p>\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-my-deployments\">\n          <Rocket className=\"h-4 w-4 mr-2\" />\n          My Deployments\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available Templates</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-templates\">\n              {marketplaceTemplates.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Ready to deploy</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Most Popular</CardTitle>\n            <Star className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-popular-template\">\n              {marketplaceTemplates.sort((a, b) => b.popularity - a.popularity)[0].name}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {marketplaceTemplates.sort((a, b) => b.popularity - a.popularity)[0].popularity}% popularity\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Categories</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-categories\">\n              6\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Application types</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Deploy Time</CardTitle>\n            <Rocket className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-deploy-time\">\n              ~3 min\n            </div>\n            <p className=\"text-xs text-muted-foreground\">From click to running</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col gap-4\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Browse Templates</CardTitle>\n              <div className=\"relative w-96\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search templates, tags...\"\n                  className=\"pl-9\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-templates\"\n                />\n              </div>\n            </div>\n            <Tabs value={selectedCategory} onValueChange={(v) => setSelectedCategory(v as any)}>\n              <TabsList data-testid=\"tabs-category-filter\">\n                <TabsTrigger value=\"all\" data-testid=\"tab-all\">All</TabsTrigger>\n                <TabsTrigger value=\"database\" data-testid=\"tab-database\">Databases</TabsTrigger>\n                <TabsTrigger value=\"web\" data-testid=\"tab-web\">Web Servers</TabsTrigger>\n                <TabsTrigger value=\"caching\" data-testid=\"tab-caching\">Caching</TabsTrigger>\n                <TabsTrigger value=\"cms\" data-testid=\"tab-cms\">CMS</TabsTrigger>\n                <TabsTrigger value=\"devtools\" data-testid=\"tab-devtools\">Dev Tools</TabsTrigger>\n                <TabsTrigger value=\"monitoring\" data-testid=\"tab-monitoring\">Monitoring</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            {filteredTemplates.map((template) => (\n              <Card key={template.id} className=\"hover-elevate\" data-testid={`card-template-${template.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`p-2 rounded-lg bg-muted`}>\n                        <template.icon className={`h-6 w-6 ${template.iconColor}`} />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                        <CardDescription className=\"text-xs\">{template.version}</CardDescription>\n                      </div>\n                    </div>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {template.popularity}%\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">{template.description}</p>\n                  <div className=\"flex flex-wrap gap-1 mb-4\">\n                    {template.tags.slice(0, 3).map((tag) => (\n                      <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-2 text-xs text-muted-foreground mb-4\">\n                    <div>\n                      <p className=\"font-medium text-foreground\">{template.requirements.cpu}</p>\n                      <p>vCPU</p>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">{template.requirements.memory} GB</p>\n                      <p>RAM</p>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">{template.requirements.storage} GB</p>\n                      <p>Storage</p>\n                    </div>\n                  </div>\n                  <div className=\"text-sm mb-4\">\n                    <p className=\"text-muted-foreground\">Est. Cost</p>\n                    <p className=\"text-lg font-bold\">${template.estimatedCost}/mo</p>\n                  </div>\n                </CardContent>\n                <CardFooter>\n                  <Button\n                    className=\"w-full\"\n                    onClick={() => {\n                      setSelectedTemplate(template);\n                      setDeploymentConfig({ ...deploymentConfig, name: template.name.toLowerCase().replace(/\\s+/g, \"-\") });\n                      setDeployDialogOpen(true);\n                    }}\n                    data-testid={`button-deploy-${template.id}`}\n                  >\n                    <Rocket className=\"h-4 w-4 mr-2\" />\n                    Deploy Now\n                  </Button>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n          {filteredTemplates.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No templates found</h3>\n              <p className=\"text-muted-foreground\">Try adjusting your search or filters</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={deployDialogOpen} onOpenChange={setDeployDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Deploy {selectedTemplate?.name}</DialogTitle>\n            <DialogDescription>\n              Configure and deploy {selectedTemplate?.name} with one click\n            </DialogDescription>\n          </DialogHeader>\n          {selectedTemplate && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label>Template Information</Label>\n                <Card>\n                  <CardContent className=\"pt-4\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {selectedTemplate.longDescription}\n                    </p>\n                    <div className=\"flex items-center gap-4 text-sm\">\n                      <div>\n                        <span className=\"font-medium\">Version:</span> {selectedTemplate.version}\n                      </div>\n                      <div>\n                        <span className=\"font-medium\">Category:</span> {selectedTemplate.category}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"deployment-name\">Deployment Name</Label>\n                <Input\n                  id=\"deployment-name\"\n                  placeholder=\"my-app\"\n                  value={deploymentConfig.name}\n                  onChange={(e) => setDeploymentConfig({ ...deploymentConfig, name: e.target.value })}\n                  data-testid=\"input-deployment-name\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"region\">Region</Label>\n                  <Select\n                    value={deploymentConfig.region}\n                    onValueChange={(value) => setDeploymentConfig({ ...deploymentConfig, region: value })}\n                  >\n                    <SelectTrigger id=\"region\" data-testid=\"select-region\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"us-east-1\">US East (N. Virginia)</SelectItem>\n                      <SelectItem value=\"us-west-2\">US West (Oregon)</SelectItem>\n                      <SelectItem value=\"eu-central-1\">EU (Frankfurt)</SelectItem>\n                      <SelectItem value=\"ap-south-1\">Asia Pacific (Mumbai)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"instance-type\">Instance Type</Label>\n                  <Select\n                    value={deploymentConfig.instanceType}\n                    onValueChange={(value) => setDeploymentConfig({ ...deploymentConfig, instanceType: value })}\n                  >\n                    <SelectTrigger id=\"instance-type\" data-testid=\"select-instance-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"t3.medium\">t3.medium (2 vCPU, 4 GB RAM) - $30/mo</SelectItem>\n                      <SelectItem value=\"m5.large\">m5.large (2 vCPU, 8 GB RAM) - $70/mo</SelectItem>\n                      <SelectItem value=\"m5.xlarge\">m5.xlarge (4 vCPU, 16 GB RAM) - $140/mo</SelectItem>\n                      <SelectItem value=\"m5.2xlarge\">m5.2xlarge (8 vCPU, 32 GB RAM) - $280/mo</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Requirements</Label>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <Card>\n                    <CardContent className=\"pt-4 text-center\">\n                      <p className=\"text-2xl font-bold\">{selectedTemplate.requirements.cpu}</p>\n                      <p className=\"text-sm text-muted-foreground\">vCPU cores</p>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"pt-4 text-center\">\n                      <p className=\"text-2xl font-bold\">{selectedTemplate.requirements.memory}</p>\n                      <p className=\"text-sm text-muted-foreground\">GB RAM</p>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"pt-4 text-center\">\n                      <p className=\"text-2xl font-bold\">{selectedTemplate.requirements.storage}</p>\n                      <p className=\"text-sm text-muted-foreground\">GB Storage</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label>Estimated Monthly Cost</Label>\n                <Card className=\"bg-muted\">\n                  <CardContent className=\"pt-4\">\n                    <p className=\"text-3xl font-bold\">${selectedTemplate.estimatedCost}/month</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Includes compute, storage, and bandwidth\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setDeployDialogOpen(false)}\n              data-testid=\"button-cancel-deploy\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleDeploy}\n              disabled={!deploymentConfig.name}\n              data-testid=\"button-confirm-deploy\"\n            >\n              <Rocket className=\"h-4 w-4 mr-2\" />\n              Deploy Now\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":24889},"client/src/components/network-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Network, Settings } from \"lucide-react\";\n\nexport interface NetworkInfo {\n  id: string;\n  name: string;\n  type: \"isolated\" | \"shared\" | \"vpc\";\n  cidr: string;\n  gateway: string;\n  vlan?: string;\n  vmCount: number;\n}\n\ninterface NetworkCardProps {\n  network: NetworkInfo;\n  onConfigure?: (id: string) => void;\n}\n\nexport function NetworkCard({ network, onConfigure }: NetworkCardProps) {\n  const typeColors = {\n    isolated: \"bg-chart-1/10 text-chart-1 border-chart-1/20\",\n    shared: \"bg-chart-2/10 text-chart-2 border-chart-2/20\",\n    vpc: \"bg-chart-4/10 text-chart-4 border-chart-4/20\",\n  };\n\n  return (\n    <Card className=\"hover-elevate\">\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-3\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-muted\">\n            <Network className=\"h-5 w-5 text-muted-foreground\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-sm\" data-testid={`network-name-${network.id}`}>{network.name}</h3>\n            <p className=\"text-xs text-muted-foreground font-mono\">{network.cidr}</p>\n          </div>\n        </div>\n        <Badge variant=\"outline\" className={typeColors[network.type]}>\n          {network.type.toUpperCase()}\n        </Badge>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <p className=\"text-muted-foreground\">Gateway</p>\n            <p className=\"font-mono text-sm\">{network.gateway}</p>\n          </div>\n          {network.vlan && (\n            <div>\n              <p className=\"text-muted-foreground\">VLAN</p>\n              <p className=\"font-medium\">{network.vlan}</p>\n            </div>\n          )}\n          <div>\n            <p className=\"text-muted-foreground\">VMs</p>\n            <p className=\"font-medium\">{network.vmCount}</p>\n          </div>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"w-full mt-4\"\n          onClick={() => onConfigure?.(network.id)}\n          data-testid={`button-configure-${network.id}`}\n        >\n          <Settings className=\"h-4 w-4 mr-2\" />\n          Configure\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2474},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/app-sidebar.tsx":{"content":"import { Server, Network, HardDrive, LayoutDashboard, Settings, BarChart3, Shield, Receipt, Store, Palette, UserCog, Crown, UserCheck, Boxes, Database, Cloud, Globe, CreditCard, Calculator, Zap, Cloudy, TrendingUp, Users, Tag, Percent, Lock, MapPin, Key, Image } from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { FeatureFlag } from \"@shared/schema\";\n\ninterface MenuItem {\n  title: string;\n  url: string;\n  icon: any;\n  featureKey?: string; // Optional feature key for dynamic filtering\n}\n\nconst menuItems: MenuItem[] = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: LayoutDashboard,\n  },\n  {\n    title: \"Virtual Machines\",\n    url: \"/vms\",\n    icon: Server,\n  },\n  {\n    title: \"Networks\",\n    url: \"/networks\",\n    icon: Network,\n  },\n  {\n    title: \"Kubernetes\",\n    url: \"/kubernetes\",\n    icon: Boxes,\n  },\n  {\n    title: \"Database\",\n    url: \"/database\",\n    icon: Database,\n    featureKey: \"database\",\n  },\n  {\n    title: \"Object Storage\",\n    url: \"/object-storage\",\n    icon: Cloud,\n    featureKey: \"object_storage\",\n  },\n  {\n    title: \"DNS\",\n    url: \"/dns\",\n    icon: Globe,\n    featureKey: \"dns\",\n  },\n  {\n    title: \"Storage\",\n    url: \"/storage\",\n    icon: HardDrive,\n  },\n  {\n    title: \"Monitoring\",\n    url: \"/monitoring\",\n    icon: BarChart3,\n  },\n];\n\nconst billingItems: MenuItem[] = [\n  {\n    title: \"Billing\",\n    url: \"/billing\",\n    icon: Receipt,\n    featureKey: \"billing\",\n  },\n  {\n    title: \"Discount Coupons\",\n    url: \"/billing/coupons\",\n    icon: Tag,\n    featureKey: \"billing\",\n  },\n  {\n    title: \"User Discounts\",\n    url: \"/billing/user-discounts\",\n    icon: Percent,\n    featureKey: \"billing\",\n  },\n  {\n    title: \"Payment Gateways\",\n    url: \"/payment-gateways\",\n    icon: CreditCard,\n    featureKey: \"payment_gateway\",\n  },\n  {\n    title: \"Pricing Calculator\",\n    url: \"/pricing-calculator\",\n    icon: Calculator,\n    featureKey: \"pricing_calculator\",\n  },\n];\n\nconst advancedComputeItems: MenuItem[] = [\n  {\n    title: \"GPU Instances\",\n    url: \"/gpu-instances\",\n    icon: Zap,\n    featureKey: \"gpu_instances\",\n  },\n  {\n    title: \"Auto-Scaling Groups\",\n    url: \"/auto-scaling\",\n    icon: TrendingUp,\n    featureKey: \"vm_autoscaling\",\n  },\n];\n\nconst networkingItems: MenuItem[] = [\n  {\n    title: \"Load Balancer\",\n    url: \"/load-balancer\",\n    icon: Network,\n    featureKey: \"load_balancer\",\n  },\n  {\n    title: \"SSL Certificates\",\n    url: \"/ssl-certificates\",\n    icon: Shield,\n    featureKey: \"ssl_certificates\",\n  },\n  {\n    title: \"CDN Service\",\n    url: \"/cdn\",\n    icon: Cloudy,\n    featureKey: \"cdn_service\",\n  },\n];\n\nconst adminItems: MenuItem[] = [\n  {\n    title: \"Team Management\",\n    url: \"/team-management\",\n    icon: Users,\n  },\n  {\n    title: \"Role Management\",\n    url: \"/role-management\",\n    icon: Shield,\n  },\n  {\n    title: \"Activity Logs\",\n    url: \"/activity-logs\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Security\",\n    url: \"/security\",\n    icon: Shield,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\nconst resellerItems: MenuItem[] = [\n  {\n    title: \"Resellers\",\n    url: \"/resellers\",\n    icon: Store,\n  },\n  {\n    title: \"White-Label\",\n    url: \"/whitelabel\",\n    icon: Palette,\n  },\n  {\n    title: \"My Customers\",\n    url: \"/customers\",\n    icon: UserCog,\n  },\n];\n\nconst superAdminItems: MenuItem[] = [\n  {\n    title: \"Super Admin\",\n    url: \"/super-admin\",\n    icon: Crown,\n  },\n  {\n    title: \"Feature Management\",\n    url: \"/feature-management\",\n    icon: Settings,\n  },\n  {\n    title: \"Admin Rights\",\n    url: \"/admin-rights\",\n    icon: UserCheck,\n  },\n  {\n    title: \"All VMs\",\n    url: \"/all-vms\",\n    icon: Server,\n  },\n  {\n    title: \"All Kubernetes\",\n    url: \"/all-kubernetes\",\n    icon: Boxes,\n  },\n];\n\nconst cloudStackItems: MenuItem[] = [\n  {\n    title: \"Block Storage\",\n    url: \"/volumes\",\n    icon: HardDrive,\n    featureKey: \"volumes\",\n  },\n  {\n    title: \"Firewall Rules\",\n    url: \"/firewall\",\n    icon: Shield,\n    featureKey: \"firewall\",\n  },\n  {\n    title: \"Security Groups\",\n    url: \"/security-groups\",\n    icon: Lock,\n    featureKey: \"security_groups\",\n  },\n  {\n    title: \"VPC\",\n    url: \"/vpc\",\n    icon: Network,\n    featureKey: \"vpc\",\n  },\n  {\n    title: \"Elastic IP\",\n    url: \"/elastic-ip\",\n    icon: MapPin,\n    featureKey: \"elastic_ip\",\n  },\n  {\n    title: \"SSH Keys\",\n    url: \"/ssh-keys\",\n    icon: Key,\n    featureKey: \"ssh_keys\",\n  },\n  {\n    title: \"Images & Templates\",\n    url: \"/images-templates\",\n    icon: Image,\n    featureKey: \"images_templates\",\n  },\n  {\n    title: \"Resource Tags\",\n    url: \"/resource-tags\",\n    icon: Tag,\n    featureKey: \"resource_tags\",\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  // Fetch feature flags\n  const { data: features = [] } = useQuery<FeatureFlag[]>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  // Create a map of feature keys to enabled status\n  const featureMap = new Map<string, boolean>();\n  features.forEach((feature) => {\n    featureMap.set(feature.key, feature.enabled);\n  });\n\n  // Filter function for menu items based on feature flags\n  const filterByFeature = (items: MenuItem[]) => {\n    return items.filter((item) => {\n      // If no feature key, always show\n      if (!item.featureKey) return true;\n      // Show if feature is enabled (default to false if not found)\n      return featureMap.get(item.featureKey) === true;\n    });\n  };\n\n  const visibleMenuItems = filterByFeature(menuItems);\n  const visibleBillingItems = filterByFeature(billingItems);\n  const visibleAdvancedComputeItems = filterByFeature(advancedComputeItems);\n  const visibleNetworkingItems = filterByFeature(networkingItems);\n  const visibleCloudStackItems = filterByFeature(cloudStackItems);\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b border-sidebar-border p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary\">\n            <Server className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <div className=\"flex flex-col\">\n            <span className=\"text-sm font-semibold\">AkashOne.com</span>\n            <span className=\"text-xs text-muted-foreground\">Mieux Technologies</span>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Resources</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {visibleMenuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/ /g, '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {visibleAdvancedComputeItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Advanced Compute</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {visibleAdvancedComputeItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={location === item.url}>\n                      <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/ /g, '-')}`}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {visibleNetworkingItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Networking</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {visibleNetworkingItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={location === item.url}>\n                      <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/ /g, '-')}`}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {visibleCloudStackItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Infrastructure</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {visibleCloudStackItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={location === item.url}>\n                      <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/ /g, '-')}`}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        {visibleBillingItems.length > 0 && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Billing & Pricing</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {visibleBillingItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={location === item.url}>\n                      <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/ /g, '-')}`}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Super Admin</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {superAdminItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/ /g, '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        <SidebarGroup>\n          <SidebarGroupLabel>Reseller Portal</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {resellerItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/ /g, '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        <SidebarGroup>\n          <SidebarGroupLabel>Administration</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {adminItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/ /g, '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter className=\"border-t border-sidebar-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-sidebar-accent text-sidebar-accent-foreground\">\n            <span className=\"text-sm font-medium\">AD</span>\n          </div>\n          <div className=\"flex flex-col flex-1 min-w-0\">\n            <span className=\"text-sm font-medium truncate\">Admin User</span>\n            <span className=\"text-xs text-muted-foreground truncate\">admin@akashone.com</span>\n          </div>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":13590},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { authenticator } from \"otplib\";\nimport QRCode from \"qrcode\";\nimport { storage } from \"./storage\";\nimport { randomUUID } from \"crypto\";\n\nconst SALT_ROUNDS = 10;\n\n// Temporary session storage for 2FA login flow\nconst twoFactorSessions = new Map<string, { userId: string; expiresAt: number }>();\n\nexport async function registerUser(\n  username: string,\n  email: string,\n  password: string,\n  gstNumber: string\n) {\n  // Check if user already exists\n  const existingUser = await storage.getUserByUsername(username);\n  if (existingUser) {\n    throw new Error(\"Username already exists\");\n  }\n\n  const existingEmail = await storage.getUserByEmail(email);\n  if (existingEmail) {\n    throw new Error(\"Email already exists\");\n  }\n\n  // Validate GST number format\n  const gstRegex = /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/;\n  if (!gstRegex.test(gstNumber)) {\n    throw new Error(\"Invalid GST number format\");\n  }\n\n  // Hash password\n  const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);\n\n  // Generate email verification code (6-digit OTP)\n  const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();\n  const verificationExpiry = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n\n  // Create user\n  const user = await storage.createUser({\n    username,\n    email,\n    password: hashedPassword,\n    gstNumber,\n  });\n\n  // Update user with verification code\n  await storage.updateUser(user.id, {\n    emailVerificationCode: verificationCode,\n    emailVerificationExpiry: verificationExpiry,\n    emailVerified: false,\n  });\n\n  // Assign Admin role ONLY to the FIRST user (bootstrap admin)\n  // Subsequent users must be invited via team member system\n  const allUsers = await storage.getUsers();\n  const isFirstUser = allUsers.length === 1; // Only this user exists\n\n  if (isFirstUser) {\n    const roles = await storage.getRoles();\n    const adminRole = roles.find((r) => r.name === \"Admin\" && r.isSystem);\n    if (adminRole) {\n      await storage.assignRoleToUser(user.id, adminRole.id, user.id);\n    }\n  }\n\n  // TODO: Send verification email with OTP\n  // In a real implementation, integrate with SendGrid/Resend to send email\n  console.log(`[DEBUG] Email verification code for ${email}: ${verificationCode}`);\n\n  return { user, verificationCode }; // Return verification code for development/testing\n}\n\nexport async function verifyEmail(email: string, code: string) {\n  const user = await storage.getUserByEmail(email);\n\n  if (!user) {\n    throw new Error(\"User not found\");\n  }\n\n  if (user.emailVerified) {\n    throw new Error(\"Email already verified\");\n  }\n\n  if (!user.emailVerificationCode || !user.emailVerificationExpiry) {\n    throw new Error(\"No verification code found\");\n  }\n\n  if (new Date() > user.emailVerificationExpiry) {\n    throw new Error(\"Verification code expired\");\n  }\n\n  if (user.emailVerificationCode !== code) {\n    throw new Error(\"Invalid verification code\");\n  }\n\n  // Mark email as verified\n  await storage.updateUser(user.id, {\n    emailVerified: true,\n    emailVerificationCode: null,\n    emailVerificationExpiry: null,\n  });\n\n  return { success: true };\n}\n\nexport async function resendVerificationCode(email: string) {\n  const user = await storage.getUserByEmail(email);\n\n  if (!user) {\n    throw new Error(\"User not found\");\n  }\n\n  if (user.emailVerified) {\n    throw new Error(\"Email already verified\");\n  }\n\n  // Generate new verification code\n  const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();\n  const verificationExpiry = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n\n  await storage.updateUser(user.id, {\n    emailVerificationCode: verificationCode,\n    emailVerificationExpiry: verificationExpiry,\n  });\n\n  // TODO: Send verification email\n  console.log(`[DEBUG] New verification code for ${email}: ${verificationCode}`);\n\n  return { success: true, verificationCode };\n}\n\nexport async function loginUser(username: string, password: string) {\n  const user = await storage.getUserByUsername(username);\n\n  if (!user) {\n    throw new Error(\"Invalid credentials\");\n  }\n\n  const isValidPassword = await bcrypt.compare(password, user.password);\n\n  if (!isValidPassword) {\n    throw new Error(\"Invalid credentials\");\n  }\n\n  // Check if email is verified (skip in development for easier testing)\n  if (!user.emailVerified && process.env.NODE_ENV !== \"development\") {\n    throw new Error(\"Please verify your email before logging in\");\n  }\n  \n  // In development, auto-verify users on first login for easier testing\n  if (!user.emailVerified && process.env.NODE_ENV === \"development\") {\n    console.log(`[DEBUG] Auto-verifying ${user.email} in development mode`);\n    await storage.updateUser(user.id, { emailVerified: true });\n  }\n\n  // Update last login\n  await storage.updateUser(user.id, { lastLogin: new Date() });\n\n  // Check if 2FA is enabled\n  if (user.twoFactorEnabled && user.twoFactorSecret) {\n    // Generate temporary session token\n    const sessionToken = randomUUID();\n    const expiresAt = Date.now() + 5 * 60 * 1000; // 5 minutes\n    twoFactorSessions.set(sessionToken, { userId: user.id, expiresAt });\n\n    return {\n      requiresTwoFactor: true,\n      sessionToken,\n    };\n  }\n\n  return {\n    requiresTwoFactor: false,\n    user: { id: user.id, username: user.username, email: user.email },\n  };\n}\n\nexport async function verifyTwoFactor(sessionToken: string, code: string) {\n  const session = twoFactorSessions.get(sessionToken);\n\n  if (!session) {\n    throw new Error(\"Invalid or expired session\");\n  }\n\n  if (Date.now() > session.expiresAt) {\n    twoFactorSessions.delete(sessionToken);\n    throw new Error(\"Session expired\");\n  }\n\n  const user = await storage.getUser(session.userId);\n\n  if (!user || !user.twoFactorSecret) {\n    throw new Error(\"Invalid session\");\n  }\n\n  const isValid = authenticator.verify({\n    token: code,\n    secret: user.twoFactorSecret,\n  });\n\n  if (!isValid) {\n    throw new Error(\"Invalid verification code\");\n  }\n\n  // Clean up session\n  twoFactorSessions.delete(sessionToken);\n\n  return {\n    user: { id: user.id, username: user.username, email: user.email },\n  };\n}\n\nexport async function generateTwoFactorSecret(userId: string) {\n  const user = await storage.getUser(userId);\n\n  if (!user) {\n    throw new Error(\"User not found\");\n  }\n\n  const secret = authenticator.generateSecret();\n  const otpauthUrl = authenticator.keyuri(user.email, \"AkashOne.com\", secret);\n\n  // Generate QR code\n  const qrCodeUrl = await QRCode.toDataURL(otpauthUrl);\n\n  // Store the secret (but don't enable 2FA yet)\n  await storage.updateUser(userId, { twoFactorSecret: secret });\n\n  return {\n    secret,\n    qrCodeUrl,\n  };\n}\n\nexport async function enableTwoFactor(userId: string, code: string) {\n  const user = await storage.getUser(userId);\n\n  if (!user || !user.twoFactorSecret) {\n    throw new Error(\"2FA secret not found. Please setup 2FA first.\");\n  }\n\n  const isValid = authenticator.verify({\n    token: code,\n    secret: user.twoFactorSecret,\n  });\n\n  if (!isValid) {\n    throw new Error(\"Invalid verification code\");\n  }\n\n  await storage.updateUser(userId, { twoFactorEnabled: true });\n\n  return { success: true };\n}\n\nexport async function disableTwoFactor(userId: string) {\n  await storage.updateUser(userId, {\n    twoFactorEnabled: false,\n    twoFactorSecret: null,\n  });\n\n  return { success: true };\n}\n","size_bytes":7395},"client/src/pages/storage.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { HardDrive, Plus } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\n\n//todo: remove mock functionality\nconst mockVolumes = [\n  {\n    id: \"vol-001\",\n    name: \"root-web-server-01\",\n    size: \"50GB\",\n    used: 32,\n    type: \"ROOT\",\n    vm: \"web-server-01\",\n    state: \"attached\",\n  },\n  {\n    id: \"vol-002\",\n    name: \"data-db-primary\",\n    size: \"200GB\",\n    used: 68,\n    type: \"DATA\",\n    vm: \"db-primary\",\n    state: \"attached\",\n  },\n  {\n    id: \"vol-003\",\n    name: \"backup-volume\",\n    size: \"500GB\",\n    used: 45,\n    type: \"DATA\",\n    vm: null,\n    state: \"detached\",\n  },\n];\n\nexport default function Storage() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Storage</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage volumes and storage resources\n          </p>\n        </div>\n        <Button data-testid=\"button-create-volume\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Volume\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {mockVolumes.map((volume) => (\n          <Card key={volume.id} className=\"hover-elevate\">\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-3\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-muted\">\n                  <HardDrive className=\"h-5 w-5 text-muted-foreground\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-sm\" data-testid={`volume-name-${volume.id}`}>\n                    {volume.name}\n                  </h3>\n                  <p className=\"text-xs text-muted-foreground\">{volume.size}</p>\n                </div>\n              </div>\n              <Badge\n                variant=\"outline\"\n                className={\n                  volume.state === \"attached\"\n                    ? \"bg-chart-2/10 text-chart-2 border-chart-2/20\"\n                    : \"bg-muted text-muted-foreground border-border\"\n                }\n              >\n                {volume.state}\n              </Badge>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <div className=\"flex items-center justify-between text-sm mb-2\">\n                  <span className=\"text-muted-foreground\">Usage</span>\n                  <span className=\"font-medium\">{volume.used}%</span>\n                </div>\n                <Progress value={volume.used} className=\"h-2\" />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-muted-foreground\">Type</p>\n                  <p className=\"font-medium\">{volume.type}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">VM</p>\n                  <p className=\"font-medium truncate\">\n                    {volume.vm || <span className=\"text-muted-foreground\">—</span>}\n                  </p>\n                </div>\n              </div>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid={`button-manage-${volume.id}`}>\n                Manage Volume\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3695},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/examples/StatusBadge.tsx":{"content":"import { StatusBadge } from '../status-badge';\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"flex gap-2 flex-wrap p-4\">\n      <StatusBadge status=\"running\" />\n      <StatusBadge status=\"stopped\" />\n      <StatusBadge status=\"error\" />\n      <StatusBadge status=\"starting\" />\n    </div>\n  );\n}\n","size_bytes":326},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"server/cloudstack/client.ts":{"content":"import crypto from \"crypto\";\nimport axios, { AxiosInstance } from \"axios\";\n\nexport interface CloudStackConfig {\n  apiUrl: string;\n  apiKey: string;\n  secretKey: string;\n}\n\nexport class CloudStackClient {\n  private apiUrl: string;\n  private apiKey: string;\n  private secretKey: string;\n  private httpClient: AxiosInstance;\n\n  constructor(config: CloudStackConfig) {\n    this.apiUrl = config.apiUrl;\n    this.apiKey = config.apiKey;\n    this.secretKey = config.secretKey;\n\n    this.httpClient = axios.create({\n      baseURL: this.apiUrl,\n      timeout: 30000,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    });\n  }\n\n  /**\n   * Generate CloudStack API signature\n   * CloudStack uses HMAC SHA1 signature for authentication\n   */\n  private generateSignature(params: Record<string, any>): string {\n    // Sort parameters alphabetically\n    const sortedParams = Object.keys(params)\n      .sort()\n      .map((key) => `${encodeURIComponent(key).toLowerCase()}=${encodeURIComponent(params[key]).toLowerCase()}`)\n      .join(\"&\");\n\n    // Create HMAC SHA1 signature\n    const hmac = crypto.createHmac(\"sha1\", this.secretKey);\n    hmac.update(sortedParams);\n    const signature = hmac.digest(\"base64\");\n\n    return signature;\n  }\n\n  /**\n   * Make a CloudStack API request\n   */\n  async request(command: string, params: Record<string, any> = {}): Promise<any> {\n    const requestParams: Record<string, any> = {\n      command,\n      apiKey: this.apiKey,\n      response: \"json\",\n      ...params,\n    };\n\n    // Generate signature\n    const signature = this.generateSignature(requestParams);\n    requestParams.signature = signature;\n\n    try {\n      const response = await this.httpClient.get(\"\", {\n        params: requestParams,\n      });\n\n      // CloudStack wraps response in command-specific key\n      const commandKey = `${command.toLowerCase()}response`;\n      return response.data[commandKey] || response.data;\n    } catch (error: any) {\n      if (error.response?.data) {\n        const errorResponse = error.response.data;\n        const commandKey = `${command.toLowerCase()}response`;\n        const errorData = errorResponse[commandKey] || errorResponse;\n        \n        throw new Error(\n          errorData.errortext || \n          errorData.message || \n          `CloudStack API error: ${error.message}`\n        );\n      }\n      throw new Error(`CloudStack API request failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Poll an async job until completion\n   * CloudStack async operations return a jobid that needs to be polled\n   */\n  async pollAsyncJob(jobId: string, maxAttempts: number = 60, intervalMs: number = 2000): Promise<any> {\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      const result = await this.request(\"queryAsyncJobResult\", { jobid: jobId });\n      \n      // Job status: 0 = pending, 1 = success, 2 = failure\n      if (result.jobstatus === 1) {\n        // Job completed successfully\n        return result.jobresult;\n      } else if (result.jobstatus === 2) {\n        // Job failed\n        const errorMessage = result.jobresult?.errortext || result.jobresult?.errorcode || \"Job failed\";\n        throw new Error(`CloudStack job failed: ${errorMessage}`);\n      }\n      \n      // Job still pending, wait before next poll\n      await new Promise(resolve => setTimeout(resolve, intervalMs));\n    }\n    \n    throw new Error(`CloudStack job ${jobId} timed out after ${maxAttempts} attempts`);\n  }\n\n  // ============================================\n  // COMPUTE - Virtual Machines\n  // ============================================\n\n  /**\n   * List all zones\n   */\n  async listZones(available: boolean = true): Promise<any> {\n    return this.request(\"listZones\", { available });\n  }\n\n  /**\n   * List service offerings (compute plans)\n   */\n  async listServiceOfferings(): Promise<any> {\n    return this.request(\"listServiceOfferings\");\n  }\n\n  /**\n   * List templates (OS images)\n   */\n  async listTemplates(templateFilter: string = \"featured\", zoneId?: string): Promise<any> {\n    const params: any = { templatefilter: templateFilter };\n    if (zoneId) params.zoneid = zoneId;\n    return this.request(\"listTemplates\", params);\n  }\n\n  /**\n   * Deploy a new virtual machine\n   * This is an async operation - polls job until completion\n   */\n  async deployVirtualMachine(params: {\n    serviceOfferingId: string;\n    templateId: string;\n    zoneId: string;\n    name?: string;\n    displayName?: string;\n    networkIds?: string[];\n    keyPair?: string;\n    userData?: string;\n  }): Promise<any> {\n    const requestParams: any = {\n      serviceofferingid: params.serviceOfferingId,\n      templateid: params.templateId,\n      zoneid: params.zoneId,\n    };\n\n    if (params.name) requestParams.name = params.name;\n    if (params.displayName) requestParams.displayname = params.displayName;\n    if (params.networkIds?.length) requestParams.networkids = params.networkIds.join(\",\");\n    if (params.keyPair) requestParams.keypair = params.keyPair;\n    if (params.userData) requestParams.userdata = Buffer.from(params.userData).toString(\"base64\");\n\n    const response = await this.request(\"deployVirtualMachine\", requestParams);\n    \n    // CloudStack returns a job ID - poll until complete\n    if (response.jobid) {\n      return this.pollAsyncJob(response.jobid);\n    }\n    \n    return response;\n  }\n\n  /**\n   * List virtual machines\n   */\n  async listVirtualMachines(params?: {\n    id?: string;\n    name?: string;\n    state?: string;\n    zoneId?: string;\n  }): Promise<any> {\n    const requestParams: any = {};\n    if (params?.id) requestParams.id = params.id;\n    if (params?.name) requestParams.name = params.name;\n    if (params?.state) requestParams.state = params.state;\n    if (params?.zoneId) requestParams.zoneid = params.zoneId;\n\n    return this.request(\"listVirtualMachines\", requestParams);\n  }\n\n  /**\n   * Start a virtual machine\n   * This is an async operation - polls job until completion\n   */\n  async startVirtualMachine(id: string): Promise<any> {\n    const response = await this.request(\"startVirtualMachine\", { id });\n    \n    if (response.jobid) {\n      return this.pollAsyncJob(response.jobid);\n    }\n    \n    return response;\n  }\n\n  /**\n   * Stop a virtual machine\n   * This is an async operation - polls job until completion\n   */\n  async stopVirtualMachine(id: string, forced: boolean = false): Promise<any> {\n    const response = await this.request(\"stopVirtualMachine\", { id, forced });\n    \n    if (response.jobid) {\n      return this.pollAsyncJob(response.jobid);\n    }\n    \n    return response;\n  }\n\n  /**\n   * Reboot a virtual machine\n   * This is an async operation - polls job until completion\n   */\n  async rebootVirtualMachine(id: string): Promise<any> {\n    const response = await this.request(\"rebootVirtualMachine\", { id });\n    \n    if (response.jobid) {\n      return this.pollAsyncJob(response.jobid);\n    }\n    \n    return response;\n  }\n\n  /**\n   * Destroy a virtual machine\n   * This is an async operation - polls job until completion\n   */\n  async destroyVirtualMachine(id: string, expunge: boolean = false): Promise<any> {\n    const response = await this.request(\"destroyVirtualMachine\", { id, expunge });\n    \n    if (response.jobid) {\n      return this.pollAsyncJob(response.jobid);\n    }\n    \n    return response;\n  }\n\n  /**\n   * Scale virtual machine (change service offering)\n   * This is an async operation - polls job until completion\n   */\n  async scaleVirtualMachine(id: string, serviceOfferingId: string): Promise<any> {\n    const response = await this.request(\"scaleVirtualMachine\", {\n      id,\n      serviceofferingid: serviceOfferingId,\n    });\n    \n    if (response.jobid) {\n      return this.pollAsyncJob(response.jobid);\n    }\n    \n    return response;\n  }\n\n  // ============================================\n  // VM SNAPSHOTS\n  // ============================================\n\n  /**\n   * Create a VM snapshot\n   * Captures entire VM state including all disks and optionally memory\n   */\n  async createVMSnapshot(vmId: string, name: string, description?: string, snapshotMemory: boolean = true): Promise<any> {\n    const response = await this.request(\"createVMSnapshot\", {\n      virtualmachineid: vmId,\n      name,\n      description: description || \"\",\n      snapshotmemory: snapshotMemory,\n    });\n    \n    if (response.jobid) {\n      return this.pollAsyncJob(response.jobid);\n    }\n    \n    return response.vmsnapshot;\n  }\n\n  /**\n   * List VM snapshots\n   */\n  async listVMSnapshots(vmId?: string): Promise<any> {\n    const params: any = {};\n    if (vmId) {\n      params.virtualmachineid = vmId;\n    }\n    \n    const result = await this.request(\"listVMSnapshots\", params);\n    return result.vmsnapshot || [];\n  }\n\n  /**\n   * Delete a VM snapshot\n   * This is an async operation - polls job until completion\n   */\n  async deleteVMSnapshot(snapshotId: string): Promise<any> {\n    const response = await this.request(\"deleteVMSnapshot\", {\n      vmsnapshotid: snapshotId,\n    });\n    \n    if (response.jobid) {\n      return this.pollAsyncJob(response.jobid);\n    }\n    \n    return response;\n  }\n\n  /**\n   * Revert VM to a snapshot\n   * This is an async operation - polls job until completion\n   */\n  async revertToVMSnapshot(snapshotId: string): Promise<any> {\n    const response = await this.request(\"revertToVMSnapshot\", {\n      vmsnapshotid: snapshotId,\n    });\n    \n    if (response.jobid) {\n      return this.pollAsyncJob(response.jobid);\n    }\n    \n    return response.vmsnapshot;\n  }\n\n  // ============================================\n  // NETWORK - IPs, Firewall, Load Balancing\n  // ============================================\n\n  /**\n   * List public IP addresses\n   */\n  async listPublicIpAddresses(params?: { \n    zoneId?: string; \n    account?: string;\n  }): Promise<any> {\n    const requestParams: any = {};\n    if (params?.zoneId) requestParams.zoneid = params.zoneId;\n    if (params?.account) requestParams.account = params.account;\n    return this.request(\"listPublicIpAddresses\", requestParams);\n  }\n\n  /**\n   * Associate a public IP address\n   */\n  async associateIpAddress(zoneId: string, networkId?: string): Promise<any> {\n    const params: any = { zoneid: zoneId };\n    if (networkId) params.networkid = networkId;\n    return this.request(\"associateIpAddress\", params);\n  }\n\n  /**\n   * Create firewall rule\n   */\n  async createFirewallRule(params: {\n    ipAddressId: string;\n    protocol: string;\n    startPort?: number;\n    endPort?: number;\n    cidrList?: string[];\n  }): Promise<any> {\n    const requestParams: any = {\n      ipaddressid: params.ipAddressId,\n      protocol: params.protocol,\n    };\n    if (params.startPort) requestParams.startport = params.startPort;\n    if (params.endPort) requestParams.endport = params.endPort;\n    if (params.cidrList) requestParams.cidrlist = params.cidrList.join(\",\");\n\n    return this.request(\"createFirewallRule\", requestParams);\n  }\n\n  /**\n   * Create port forwarding rule\n   */\n  async createPortForwardingRule(params: {\n    ipAddressId: string;\n    protocol: string;\n    publicPort: number;\n    privatePort: number;\n    virtualMachineId: string;\n  }): Promise<any> {\n    return this.request(\"createPortForwardingRule\", {\n      ipaddressid: params.ipAddressId,\n      protocol: params.protocol,\n      publicport: params.publicPort,\n      privateport: params.privatePort,\n      virtualmachineid: params.virtualMachineId,\n    });\n  }\n\n  // ============================================\n  // STORAGE - Volumes, Snapshots\n  // ============================================\n\n  /**\n   * List volumes\n   */\n  async listVolumes(params?: { \n    id?: string; \n    virtualMachineId?: string;\n    zoneId?: string;\n  }): Promise<any> {\n    const requestParams: any = {};\n    if (params?.id) requestParams.id = params.id;\n    if (params?.virtualMachineId) requestParams.virtualmachineid = params.virtualMachineId;\n    if (params?.zoneId) requestParams.zoneid = params.zoneId;\n    return this.request(\"listVolumes\", requestParams);\n  }\n\n  /**\n   * Create volume\n   */\n  async createVolume(params: {\n    name: string;\n    diskOfferingId: string;\n    zoneId: string;\n    size?: number;\n  }): Promise<any> {\n    const requestParams: any = {\n      name: params.name,\n      diskofferingid: params.diskOfferingId,\n      zoneid: params.zoneId,\n    };\n    if (params.size) requestParams.size = params.size;\n    return this.request(\"createVolume\", requestParams);\n  }\n\n  /**\n   * Attach volume to VM\n   */\n  async attachVolume(id: string, virtualMachineId: string): Promise<any> {\n    return this.request(\"attachVolume\", {\n      id,\n      virtualmachineid: virtualMachineId,\n    });\n  }\n\n  /**\n   * Detach volume from VM\n   */\n  async detachVolume(id: string): Promise<any> {\n    return this.request(\"detachVolume\", { id });\n  }\n\n  /**\n   * Create snapshot\n   */\n  async createSnapshot(volumeId: string, name?: string): Promise<any> {\n    const params: any = { volumeid: volumeId };\n    if (name) params.name = name;\n    return this.request(\"createSnapshot\", params);\n  }\n\n  /**\n   * List snapshots\n   */\n  async listSnapshots(params?: { \n    volumeId?: string; \n    id?: string;\n  }): Promise<any> {\n    const requestParams: any = {};\n    if (params?.volumeId) requestParams.volumeid = params.volumeId;\n    if (params?.id) requestParams.id = params.id;\n    return this.request(\"listSnapshots\", requestParams);\n  }\n\n  // ============================================\n  // USAGE & BILLING\n  // ============================================\n\n  /**\n   * List usage records\n   */\n  async listUsageRecords(params: {\n    startDate: Date;\n    endDate: Date;\n    account?: string;\n    domainId?: string;\n  }): Promise<any> {\n    return this.request(\"listUsageRecords\", {\n      startdate: params.startDate.toISOString(),\n      enddate: params.endDate.toISOString(),\n      account: params.account,\n      domainid: params.domainId,\n    });\n  }\n\n  /**\n   * List events\n   */\n  async listEvents(params?: {\n    startDate?: Date;\n    endDate?: Date;\n    level?: string;\n    type?: string;\n  }): Promise<any> {\n    const requestParams: any = {};\n    if (params?.startDate) requestParams.startdate = params.startDate.toISOString();\n    if (params?.endDate) requestParams.enddate = params.endDate.toISOString();\n    if (params?.level) requestParams.level = params.level;\n    if (params?.type) requestParams.type = params.type;\n    return this.request(\"listEvents\", requestParams);\n  }\n}\n\n// Singleton instance\nlet cloudStackClient: CloudStackClient | null = null;\n\n/**\n * Get or initialize CloudStack client\n */\nexport function getCloudStackClient(): CloudStackClient {\n  if (!cloudStackClient) {\n    const apiUrl = process.env.CLOUDSTACK_API_URL;\n    const apiKey = process.env.CLOUDSTACK_API_KEY;\n    const secretKey = process.env.CLOUDSTACK_SECRET_KEY;\n\n    if (!apiUrl || !apiKey || !secretKey) {\n      throw new Error(\n        \"CloudStack credentials not configured. Please set CLOUDSTACK_API_URL, CLOUDSTACK_API_KEY, and CLOUDSTACK_SECRET_KEY environment variables.\"\n      );\n    }\n\n    cloudStackClient = new CloudStackClient({\n      apiUrl,\n      apiKey,\n      secretKey,\n    });\n  }\n\n  return cloudStackClient;\n}\n","size_bytes":15156},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/examples/Login.tsx":{"content":"import Login from '../../pages/login';\nimport { TooltipProvider } from '@/components/ui/tooltip';\n\nexport default function LoginExample() {\n  return (\n    <TooltipProvider>\n      <Login />\n    </TooltipProvider>\n  );\n}\n","size_bytes":219},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/examples/SuperAdmin.tsx":{"content":"import SuperAdmin from '../../pages/super-admin';\n\nexport default function SuperAdminExample() {\n  return <SuperAdmin />;\n}\n","size_bytes":124},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Shield, Lock, Mail, User, FileText } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLogin, setIsLogin] = useState(true);\n  const [step, setStep] = useState<\"credentials\" | \"2fa\">(\"credentials\");\n  const [formData, setFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    gstNumber: \"\",\n    twoFactorCode: \"\",\n  });\n  const [sessionToken, setSessionToken] = useState(\"\");\n  const [gstError, setGstError] = useState<string>(\"\");\n\n  const validateGST = (gst: string): string => {\n    if (gst.length === 0) return \"\";\n    if (gst.length !== 15) return `GST must be exactly 15 characters (currently ${gst.length})`;\n    \n    const gstRegex = /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/;\n    if (!gstRegex.test(gst)) {\n      // Detailed validation with anchored regex\n      if (!/^[0-9]{2}$/.test(gst.slice(0, 2))) return \"First 2 characters must be digits (state code)\";\n      if (!/^[A-Z]{5}$/.test(gst.slice(2, 7))) return \"Characters 3-7 must be uppercase letters (PAN)\";\n      if (!/^[0-9]{4}$/.test(gst.slice(7, 11))) return \"Characters 8-11 must be digits\";\n      if (!/^[A-Z]$/.test(gst.slice(11, 12))) return \"Character 12 must be an uppercase letter\";\n      if (!/^[1-9A-Z]$/.test(gst.slice(12, 13))) return \"Character 13 must be 1-9 or A-Z\";\n      if (gst[13] !== 'Z') return \"Character 14 must be 'Z'\";\n      if (!/^[0-9A-Z]$/.test(gst.slice(14, 15))) return \"Character 15 must be a digit or letter\";\n    }\n    return \"\";\n  };\n\n  const handleCredentialsSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Validate GST number before submitting registration\n    if (!isLogin) {\n      const gstValidationError = validateGST(formData.gstNumber);\n      if (gstValidationError) {\n        setGstError(gstValidationError);\n        toast({\n          title: \"Invalid GST Number\",\n          description: gstValidationError,\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    try {\n      if (isLogin) {\n        const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n          username: formData.username,\n          password: formData.password,\n        });\n\n        const data = await response.json();\n\n        if (data.requiresTwoFactor) {\n          setSessionToken(data.sessionToken);\n          setStep(\"2fa\");\n        } else {\n          toast({\n            title: \"Login successful\",\n            description: \"Welcome back!\",\n          });\n          window.location.href = \"/\";\n        }\n      } else {\n        await apiRequest(\"POST\", \"/api/auth/register\", {\n          username: formData.username,\n          email: formData.email,\n          password: formData.password,\n          gstNumber: formData.gstNumber.toUpperCase(),\n        });\n\n        toast({\n          title: \"Account created\",\n          description: \"Please log in to continue\",\n        });\n        setIsLogin(true);\n        setFormData({ ...formData, password: \"\", gstNumber: \"\" });\n        setGstError(\"\"); // Clear GST error after successful registration\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Authentication failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleTwoFactorSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    try {\n      await apiRequest(\"POST\", \"/api/auth/verify-2fa\", {\n        sessionToken,\n        twoFactorCode: formData.twoFactorCode,\n      });\n\n      toast({\n        title: \"Login successful\",\n        description: \"Two-factor authentication verified\",\n      });\n      window.location.href = \"/\";\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Invalid verification code\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (step === \"2fa\") {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"h-12 w-12 rounded-full bg-chart-1/10 flex items-center justify-center\">\n                <Shield className=\"h-6 w-6 text-chart-1\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl text-center\">Two-Factor Authentication</CardTitle>\n            <p className=\"text-sm text-muted-foreground text-center mt-2\">\n              Enter the 6-digit code from your authenticator app\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleTwoFactorSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"2fa-code\">Verification Code</Label>\n                <Input\n                  id=\"2fa-code\"\n                  type=\"text\"\n                  placeholder=\"000000\"\n                  maxLength={6}\n                  value={formData.twoFactorCode}\n                  onChange={(e) =>\n                    setFormData({ ...formData, twoFactorCode: e.target.value.replace(/\\D/g, \"\") })\n                  }\n                  className=\"text-center text-2xl tracking-widest font-mono\"\n                  autoFocus\n                  data-testid=\"input-2fa-code\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-verify-2fa\">\n                Verify & Login\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => {\n                  setStep(\"credentials\");\n                  setFormData({ ...formData, twoFactorCode: \"\" });\n                }}\n                data-testid=\"button-back-to-login\"\n              >\n                Back to Login\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"h-12 w-12 rounded-full bg-chart-1/10 flex items-center justify-center\">\n              <Lock className=\"h-6 w-6 text-chart-1\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl text-center\">\n            {isLogin ? \"Sign In\" : \"Create Account\"}\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground text-center mt-2\">\n            AkashOne.com\n          </p>\n          <p className=\"text-xs text-muted-foreground text-center\">\n            unit of Mieux Technologies Pvt Ltd\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleCredentialsSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  className=\"pl-9\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                  required\n                  data-testid=\"input-username\"\n                />\n              </div>\n            </div>\n\n            {!isLogin && (\n              <>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      className=\"pl-9\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                      required\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"gstNumber\">GST Number (GSTIN)</Label>\n                  <div className=\"relative\">\n                    <FileText className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                    <Input\n                      id=\"gstNumber\"\n                      type=\"text\"\n                      placeholder=\"29ABCDE1234F1Z5\"\n                      className={`pl-9 font-mono uppercase ${gstError ? 'border-destructive focus-visible:ring-destructive' : ''}`}\n                      value={formData.gstNumber}\n                      onChange={(e) => {\n                        const value = e.target.value.toUpperCase();\n                        setFormData({ ...formData, gstNumber: value });\n                        setGstError(validateGST(value));\n                      }}\n                      maxLength={15}\n                      required\n                      data-testid=\"input-gst-number\"\n                    />\n                  </div>\n                  {gstError ? (\n                    <p className=\"text-xs text-destructive\">{gstError}</p>\n                  ) : (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Format: 22AAAAA0000A1Z5 (2 digits + 5 letters + 4 digits + letter + digit/letter + Z + digit/letter)\n                    </p>\n                  )}\n                </div>\n              </>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  className=\"pl-9\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\" data-testid=\"button-submit\">\n              {isLogin ? \"Sign In\" : \"Create Account\"}\n            </Button>\n\n            <div className=\"text-center\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setIsLogin(!isLogin);\n                  setFormData({ username: \"\", email: \"\", password: \"\", gstNumber: \"\", twoFactorCode: \"\" });\n                  setGstError(\"\"); // Clear GST error when toggling modes\n                }}\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid=\"button-toggle-mode\"\n              >\n                {isLogin ? \"Don't have an account? Sign up\" : \"Already have an account? Sign in\"}\n              </button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11830},"client/src/pages/database.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Plus,\n  Search,\n  Play,\n  Square,\n  Trash2,\n  Database as DatabaseIcon,\n  Activity,\n  HardDrive,\n  Users,\n  Download,\n  Settings,\n  RefreshCw,\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Database as DatabaseType } from \"@shared/schema\";\n\nexport default function Database() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [selectedEngine, setSelectedEngine] = useState<\"all\" | DatabaseType[\"engine\"]>(\"all\");\n  const [newDatabase, setNewDatabase] = useState({\n    name: \"\",\n    engine: \"mysql\" as DatabaseType[\"engine\"],\n    version: \"8.0.35\",\n    region: \"us-east-1\",\n    instanceType: \"db.m5.large\",\n    storage: \"100\",\n    cpu: \"2\",\n    memory: \"8\",\n    backupEnabled: true,\n    multiAZ: false,\n  });\n\n  const { data: databases = [], isLoading } = useQuery<DatabaseType[]>({\n    queryKey: [\"/api/databases\"],\n  });\n\n  const createDatabaseMutation = useMutation({\n    mutationFn: async (data: typeof newDatabase) => {\n      return await apiRequest(\"POST\", \"/api/databases\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/databases\"] });\n      toast({\n        title: \"Database Created\",\n        description: `Database \"${newDatabase.name}\" has been created successfully.`,\n      });\n      setCreateDialogOpen(false);\n      setNewDatabase({\n        name: \"\",\n        engine: \"mysql\",\n        version: \"8.0.35\",\n        region: \"us-east-1\",\n        instanceType: \"db.m5.large\",\n        storage: \"100\",\n        cpu: \"2\",\n        memory: \"8\",\n        backupEnabled: true,\n        multiAZ: false,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create database\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateDatabaseMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<DatabaseType> }) => {\n      return await apiRequest(\"PATCH\", `/api/databases/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/databases\"] });\n      toast({\n        title: \"Database Updated\",\n        description: \"Database has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update database\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDatabaseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/databases/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/databases\"] });\n      toast({\n        title: \"Database Deleted\",\n        description: \"Database has been deleted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete database\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredDatabases = databases.filter((db) => {\n    const matchesSearch = db.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesEngine = selectedEngine === \"all\" || db.engine === selectedEngine;\n    return matchesSearch && matchesEngine;\n  });\n\n  const getEngineVersions = (engine: DatabaseType[\"engine\"]) => {\n    switch (engine) {\n      case \"mysql\":\n        return [\"8.0.35\", \"8.0.34\", \"5.7.44\"];\n      case \"postgresql\":\n        return [\"15.4\", \"14.9\", \"13.12\"];\n      case \"mongodb\":\n        return [\"7.0.2\", \"6.0.11\", \"5.0.22\"];\n      case \"redis\":\n        return [\"7.2.3\", \"7.0.14\", \"6.2.14\"];\n      default:\n        return [];\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"running\":\n        return \"default\";\n      case \"stopped\":\n        return \"secondary\";\n      case \"creating\":\n        return \"outline\";\n      case \"error\":\n        return \"destructive\";\n      case \"backup\":\n        return \"outline\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getEngineColor = (engine: string) => {\n    switch (engine) {\n      case \"mysql\":\n        return \"bg-blue-500\";\n      case \"postgresql\":\n        return \"bg-indigo-500\";\n      case \"mongodb\":\n        return \"bg-green-500\";\n      case \"redis\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-muted\";\n    }\n  };\n\n  const handleCreateDatabase = () => {\n    createDatabaseMutation.mutate(newDatabase);\n  };\n\n  const handleAction = (action: string, database: DatabaseType) => {\n    if (action === \"Start\") {\n      updateDatabaseMutation.mutate({ id: database.id, data: { status: \"running\" } });\n    } else if (action === \"Stop\") {\n      updateDatabaseMutation.mutate({ id: database.id, data: { status: \"stopped\" } });\n    } else if (action === \"Delete\") {\n      if (confirm(`Are you sure you want to delete \"${database.name}\"? This action cannot be undone.`)) {\n        deleteDatabaseMutation.mutate(database.id);\n      }\n    } else if (action === \"Backup\") {\n      updateDatabaseMutation.mutate({ id: database.id, data: { status: \"backup\" } });\n      toast({\n        title: \"Backup Initiated\",\n        description: `Creating backup for \"${database.name}\"`,\n      });\n    } else {\n      toast({\n        title: action,\n        description: `${action} action for \"${database.name}\" initiated.`,\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Database Services</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your Database-as-a-Service instances\n          </p>\n        </div>\n        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-database\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Database\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create Database Instance</DialogTitle>\n              <DialogDescription>\n                Deploy a fully-managed database with automatic backups and scaling\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"db-name\">Database Name</Label>\n                <Input\n                  id=\"db-name\"\n                  placeholder=\"my-database\"\n                  value={newDatabase.name}\n                  onChange={(e) => setNewDatabase({ ...newDatabase, name: e.target.value })}\n                  data-testid=\"input-database-name\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"db-engine\">Database Engine</Label>\n                  <Select\n                    value={newDatabase.engine}\n                    onValueChange={(value: DatabaseType[\"engine\"]) => {\n                      const versions = getEngineVersions(value);\n                      setNewDatabase({ ...newDatabase, engine: value, version: versions[0] });\n                    }}\n                  >\n                    <SelectTrigger id=\"db-engine\" data-testid=\"select-db-engine\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"mysql\">MySQL</SelectItem>\n                      <SelectItem value=\"postgresql\">PostgreSQL</SelectItem>\n                      <SelectItem value=\"mongodb\">MongoDB</SelectItem>\n                      <SelectItem value=\"redis\">Redis</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"db-version\">Version</Label>\n                  <Select\n                    value={newDatabase.version}\n                    onValueChange={(value) => setNewDatabase({ ...newDatabase, version: value })}\n                  >\n                    <SelectTrigger id=\"db-version\" data-testid=\"select-db-version\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {getEngineVersions(newDatabase.engine).map((version) => (\n                        <SelectItem key={version} value={version}>\n                          {version}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"region\">Region</Label>\n                  <Select\n                    value={newDatabase.region}\n                    onValueChange={(value) => setNewDatabase({ ...newDatabase, region: value })}\n                  >\n                    <SelectTrigger id=\"region\" data-testid=\"select-region\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"us-east-1\">US East (N. Virginia)</SelectItem>\n                      <SelectItem value=\"us-west-2\">US West (Oregon)</SelectItem>\n                      <SelectItem value=\"eu-central-1\">EU (Frankfurt)</SelectItem>\n                      <SelectItem value=\"ap-south-1\">Asia Pacific (Mumbai)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"instance-type\">Instance Type</Label>\n                  <Select\n                    value={newDatabase.instanceType}\n                    onValueChange={(value) => setNewDatabase({ ...newDatabase, instanceType: value })}\n                  >\n                    <SelectTrigger id=\"instance-type\" data-testid=\"select-instance-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"db.t3.micro\">db.t3.micro (1 vCPU, 1 GB RAM)</SelectItem>\n                      <SelectItem value=\"db.t3.small\">db.t3.small (2 vCPU, 2 GB RAM)</SelectItem>\n                      <SelectItem value=\"db.m5.large\">db.m5.large (2 vCPU, 8 GB RAM)</SelectItem>\n                      <SelectItem value=\"db.m5.xlarge\">db.m5.xlarge (4 vCPU, 16 GB RAM)</SelectItem>\n                      <SelectItem value=\"db.m5.2xlarge\">db.m5.2xlarge (8 vCPU, 32 GB RAM)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"storage\">Storage Size (GB)</Label>\n                <Input\n                  id=\"storage\"\n                  type=\"number\"\n                  min=\"20\"\n                  max=\"16000\"\n                  value={newDatabase.storage}\n                  onChange={(e) => setNewDatabase({ ...newDatabase, storage: e.target.value })}\n                  data-testid=\"input-storage-size\"\n                />\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Automated Backups</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Daily backups with 7-day retention\n                  </p>\n                </div>\n                <Button\n                  variant={newDatabase.backupEnabled ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() =>\n                    setNewDatabase({ ...newDatabase, backupEnabled: !newDatabase.backupEnabled })\n                  }\n                  data-testid=\"button-toggle-backup\"\n                >\n                  {newDatabase.backupEnabled ? \"Enabled\" : \"Disabled\"}\n                </Button>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Multi-AZ Deployment</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    High availability across multiple zones\n                  </p>\n                </div>\n                <Button\n                  variant={newDatabase.multiAZ ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() =>\n                    setNewDatabase({ ...newDatabase, multiAZ: !newDatabase.multiAZ })\n                  }\n                  data-testid=\"button-toggle-multiaz\"\n                >\n                  {newDatabase.multiAZ ? \"Enabled\" : \"Disabled\"}\n                </Button>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCreateDialogOpen(false)}\n                data-testid=\"button-cancel-create\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateDatabase}\n                disabled={!newDatabase.name || createDatabaseMutation.isPending}\n                data-testid=\"button-confirm-create\"\n              >\n                {createDatabaseMutation.isPending ? \"Creating...\" : \"Create Database\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Databases</CardTitle>\n            <DatabaseIcon className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-databases\">\n              {databases.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {databases.filter((d) => d.status === \"running\").length} running\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Storage</CardTitle>\n            <HardDrive className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-storage\">\n              {databases.reduce((sum, d) => sum + d.storage, 0)} GB\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Across all instances</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Connections</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-connections\">\n              {databases.reduce((sum, d) => sum + d.connectionsMax, 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Max connections</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Backups Enabled</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-backups-enabled\">\n              {databases.filter((d) => d.backupEnabled).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Active backup policies</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <CardTitle>Database Instances</CardTitle>\n              <Tabs value={selectedEngine} onValueChange={(v) => setSelectedEngine(v as any)}>\n                <TabsList data-testid=\"tabs-engine-filter\">\n                  <TabsTrigger value=\"all\" data-testid=\"tab-all\">All</TabsTrigger>\n                  <TabsTrigger value=\"mysql\" data-testid=\"tab-mysql\">MySQL</TabsTrigger>\n                  <TabsTrigger value=\"postgresql\" data-testid=\"tab-postgresql\">PostgreSQL</TabsTrigger>\n                  <TabsTrigger value=\"mongodb\" data-testid=\"tab-mongodb\">MongoDB</TabsTrigger>\n                  <TabsTrigger value=\"redis\" data-testid=\"tab-redis\">Redis</TabsTrigger>\n                </TabsList>\n              </Tabs>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search databases...\"\n                  className=\"pl-9 w-64\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-databases\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Database Name</TableHead>\n                <TableHead>Engine</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Endpoint</TableHead>\n                <TableHead>Storage</TableHead>\n                <TableHead>Resources</TableHead>\n                <TableHead>Connections</TableHead>\n                <TableHead>Region</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredDatabases.map((database) => (\n                <TableRow key={database.id} data-testid={`row-database-${database.id}`}>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{database.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{database.id}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`h-2 w-2 rounded-full ${getEngineColor(database.engine)}`} />\n                      <div>\n                        <p className=\"font-medium capitalize\">{database.engine}</p>\n                        <p className=\"text-xs text-muted-foreground\">{database.version}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={getStatusColor(database.status)} data-testid={`badge-status-${database.id}`}>\n                      {database.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"text-sm font-mono\">{database.endpoint}</p>\n                      <p className=\"text-xs text-muted-foreground\">Port: {database.port}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      <p className=\"font-medium\">{database.storage} GB</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {database.backupEnabled ? \"Backup: Yes\" : \"Backup: No\"}\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      <p>CPU: {database.cpu} cores</p>\n                      <p>RAM: {database.memory} GB</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      <p className=\"font-medium\">{database.connectionsCurrent}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        / {database.connectionsMax} max\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{database.region}</span>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex items-center justify-end gap-2\">\n                      {database.status === \"running\" && (\n                        <>\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => handleAction(\"Stop\", database)}\n                            data-testid={`button-stop-${database.id}`}\n                          >\n                            <Square className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => handleAction(\"Backup\", database)}\n                            data-testid={`button-backup-${database.id}`}\n                          >\n                            <RefreshCw className=\"h-4 w-4\" />\n                          </Button>\n                        </>\n                      )}\n                      {database.status === \"stopped\" && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => handleAction(\"Start\", database)}\n                          data-testid={`button-start-${database.id}`}\n                        >\n                          <Play className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleAction(\"Configure\", database)}\n                        data-testid={`button-settings-${database.id}`}\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleAction(\"Download\", database)}\n                        data-testid={`button-download-${database.id}`}\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleAction(\"Delete\", database)}\n                        disabled={deleteDatabaseMutation.isPending}\n                        data-testid={`button-delete-${database.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {filteredDatabases.length === 0 && (\n            <div className=\"text-center py-12\">\n              <DatabaseIcon className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No databases found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm\n                  ? \"Try adjusting your search or filters\"\n                  : \"Get started by creating your first database instance\"}\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => setCreateDialogOpen(true)} data-testid=\"button-create-first-database\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Database\n                </Button>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":25708},"client/src/components/examples/ResellerCustomers.tsx":{"content":"import ResellerCustomers from '../../pages/reseller-customers';\n\nexport default function ResellerCustomersExample() {\n  return <ResellerCustomers />;\n}\n","size_bytes":152},"client/src/pages/billing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, FileText } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\n//todo: remove mock functionality\nconst mockInvoices = [\n  {\n    id: \"INV-2024-001\",\n    date: \"2024-10-01\",\n    amount: 15000,\n    gst: 2700,\n    total: 17700,\n    status: \"paid\",\n    resources: \"VM: web-server-01, Storage: 100GB\",\n  },\n  {\n    id: \"INV-2024-002\",\n    date: \"2024-09-01\",\n    amount: 12500,\n    gst: 2250,\n    total: 14750,\n    status: \"paid\",\n    resources: \"VM: db-primary, Network: vpc-prod\",\n  },\n  {\n    id: \"INV-2024-003\",\n    date: \"2024-08-01\",\n    amount: 18000,\n    gst: 3240,\n    total: 21240,\n    status: \"paid\",\n    resources: \"VM: 3 instances, Storage: 250GB\",\n  },\n];\n\n//todo: remove mock functionality\nconst currentUsage = {\n  vms: { count: 5, cost: 8500 },\n  storage: { size: \"180GB\", cost: 3600 },\n  network: { count: 3, cost: 2400 },\n  subtotal: 14500,\n  cgst: 1305, // 9% CGST\n  sgst: 1305, // 9% SGST\n  igst: 0,    // 0% IGST (not applicable for intra-state)\n  total: 17110,\n};\n\nexport default function Billing() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Billing & Invoices</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage billing with Indian GST compliance\n          </p>\n        </div>\n        <Button data-testid=\"button-download-gst-report\">\n          <Download className=\"h-4 w-4 mr-2\" />\n          Download GST Report\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium\">Current Month Usage</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Virtual Machines ({currentUsage.vms.count})</span>\n                <span className=\"font-mono\">₹{currentUsage.vms.cost.toLocaleString('en-IN')}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Storage ({currentUsage.storage.size})</span>\n                <span className=\"font-mono\">₹{currentUsage.storage.cost.toLocaleString('en-IN')}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Network ({currentUsage.network.count} VPCs)</span>\n                <span className=\"font-mono\">₹{currentUsage.network.cost.toLocaleString('en-IN')}</span>\n              </div>\n              <div className=\"border-t pt-3\">\n                <div className=\"flex justify-between text-sm font-medium\">\n                  <span>Subtotal</span>\n                  <span className=\"font-mono\">₹{currentUsage.subtotal.toLocaleString('en-IN')}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"rounded-lg border bg-muted/50 p-4 space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">GST Breakdown</span>\n                <Badge variant=\"outline\" className=\"bg-chart-1/10 text-chart-1 border-chart-1/20\">\n                  18% GST\n                </Badge>\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">CGST (9%)</span>\n                  <span className=\"font-mono\" data-testid=\"text-cgst\">₹{currentUsage.cgst.toLocaleString('en-IN')}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">SGST (9%)</span>\n                  <span className=\"font-mono\" data-testid=\"text-sgst\">₹{currentUsage.sgst.toLocaleString('en-IN')}</span>\n                </div>\n                {currentUsage.igst > 0 && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">IGST (18%)</span>\n                    <span className=\"font-mono\" data-testid=\"text-igst\">₹{currentUsage.igst.toLocaleString('en-IN')}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex justify-between items-center pt-2\">\n              <span className=\"text-lg font-semibold\">Total Amount</span>\n              <span className=\"text-2xl font-bold font-mono\" data-testid=\"text-total-amount\">\n                ₹{currentUsage.total.toLocaleString('en-IN')}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium\">GST Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div>\n                <p className=\"text-sm font-medium\">Business GSTIN</p>\n                <p className=\"text-sm font-mono text-muted-foreground mt-1\">29ABCDE1234F1Z5</p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium\">Billing Address</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  123 Tech Park, Whitefield<br />\n                  Bangalore, Karnataka 560066<br />\n                  India\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium\">Tax Type</p>\n                <div className=\"flex gap-2 mt-2\">\n                  <Badge variant=\"outline\" className=\"bg-chart-2/10 text-chart-2 border-chart-2/20\">\n                    Intra-State (CGST + SGST)\n                  </Badge>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  For inter-state transactions, IGST will be applied instead\n                </p>\n              </div>\n            </div>\n            <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-update-gst\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Update GST Details\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base font-medium\">Invoice History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Invoice ID</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Resources</TableHead>\n                  <TableHead className=\"text-right\">Base Amount</TableHead>\n                  <TableHead className=\"text-right\">GST</TableHead>\n                  <TableHead className=\"text-right\">Total</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {mockInvoices.map((invoice) => (\n                  <TableRow key={invoice.id} className=\"hover-elevate\">\n                    <TableCell className=\"font-mono font-medium\" data-testid={`invoice-id-${invoice.id}`}>\n                      {invoice.id}\n                    </TableCell>\n                    <TableCell>{invoice.date}</TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground max-w-xs truncate\">\n                      {invoice.resources}\n                    </TableCell>\n                    <TableCell className=\"text-right font-mono\">\n                      ₹{invoice.amount.toLocaleString('en-IN')}\n                    </TableCell>\n                    <TableCell className=\"text-right font-mono\">\n                      ₹{invoice.gst.toLocaleString('en-IN')}\n                    </TableCell>\n                    <TableCell className=\"text-right font-mono font-medium\">\n                      ₹{invoice.total.toLocaleString('en-IN')}\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant=\"outline\"\n                        className=\"bg-chart-2/10 text-chart-2 border-chart-2/20\"\n                      >\n                        {invoice.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        data-testid={`button-download-${invoice.id}`}\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9314},"client/src/components/examples/WhiteLabel.tsx":{"content":"import WhiteLabel from '../../pages/whitelabel';\nimport { TooltipProvider } from '@/components/ui/tooltip';\n\nexport default function WhiteLabelExample() {\n  return (\n    <TooltipProvider>\n      <WhiteLabel />\n    </TooltipProvider>\n  );\n}\n","size_bytes":239},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type KubernetesCluster,\n  type InsertKubernetesCluster,\n  type Database,\n  type InsertDatabase,\n  type DnsDomain,\n  type InsertDnsDomain,\n  type DnsRecord,\n  type InsertDnsRecord,\n  type VirtualMachine,\n  type InsertVirtualMachine,\n  type VMSnapshot,\n  type InsertVMSnapshot,\n  type FeatureFlag,\n  type InsertFeatureFlag,\n  type Role,\n  type InsertRole,\n  type Permission,\n  type InsertPermission,\n  type RolePermission,\n  type InsertRolePermission,\n  type UserRole,\n  type InsertUserRole,\n  type TeamMember,\n  type InsertTeamMember,\n  type DiscountCoupon,\n  type InsertDiscountCoupon,\n  type UserActivity,\n  type InsertUserActivity,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUsers(): Promise<User[]>;\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<User>): Promise<User | undefined>;\n\n  // Kubernetes\n  getKubernetesClusters(userId: string): Promise<KubernetesCluster[]>;\n  getKubernetesCluster(id: string): Promise<KubernetesCluster | undefined>;\n  createKubernetesCluster(cluster: InsertKubernetesCluster & { userId: string }): Promise<KubernetesCluster>;\n  updateKubernetesCluster(id: string, data: Partial<KubernetesCluster>): Promise<KubernetesCluster | undefined>;\n  deleteKubernetesCluster(id: string): Promise<boolean>;\n\n  // Databases\n  getDatabases(userId: string): Promise<Database[]>;\n  getDatabase(id: string): Promise<Database | undefined>;\n  createDatabase(database: InsertDatabase & { userId: string }): Promise<Database>;\n  updateDatabase(id: string, data: Partial<Database>): Promise<Database | undefined>;\n  deleteDatabase(id: string): Promise<boolean>;\n\n  // DNS Domains\n  getDnsDomains(userId: string): Promise<DnsDomain[]>;\n  getDnsDomain(id: string): Promise<DnsDomain | undefined>;\n  createDnsDomain(domain: InsertDnsDomain & { userId: string }): Promise<DnsDomain>;\n  updateDnsDomain(id: string, data: Partial<DnsDomain>): Promise<DnsDomain | undefined>;\n  deleteDnsDomain(id: string): Promise<boolean>;\n\n  // DNS Records\n  getDnsRecords(domainId: string): Promise<DnsRecord[]>;\n  getDnsRecord(id: string): Promise<DnsRecord | undefined>;\n  createDnsRecord(record: InsertDnsRecord & { userId: string }): Promise<DnsRecord>;\n  updateDnsRecord(id: string, data: Partial<DnsRecord>): Promise<DnsRecord | undefined>;\n  deleteDnsRecord(id: string): Promise<boolean>;\n\n  // Virtual Machines\n  getVirtualMachines(userId: string): Promise<VirtualMachine[]>;\n  getVirtualMachine(id: string): Promise<VirtualMachine | undefined>;\n  getVirtualMachineByCloudstackId(cloudstackId: string): Promise<VirtualMachine | undefined>;\n  createVirtualMachine(vm: InsertVirtualMachine & { userId: string }): Promise<VirtualMachine>;\n  updateVirtualMachine(id: string, data: Partial<VirtualMachine>): Promise<VirtualMachine | undefined>;\n  deleteVirtualMachine(id: string): Promise<boolean>;\n\n  // VM Snapshots\n  getVMSnapshots(vmId: string, userId: string): Promise<VMSnapshot[]>;\n  getVMSnapshot(id: string): Promise<VMSnapshot | undefined>;\n  getVMSnapshotByCloudstackId(cloudstackSnapshotId: string): Promise<VMSnapshot | undefined>;\n  createVMSnapshot(snapshot: InsertVMSnapshot): Promise<VMSnapshot>;\n  deleteVMSnapshot(id: string): Promise<boolean>;\n\n  // Feature Flags\n  getFeatureFlags(): Promise<FeatureFlag[]>;\n  getFeatureFlag(id: string): Promise<FeatureFlag | undefined>;\n  getFeatureFlagByKey(key: string): Promise<FeatureFlag | undefined>;\n  createFeatureFlag(flag: InsertFeatureFlag): Promise<FeatureFlag>;\n  updateFeatureFlag(id: string, data: Partial<FeatureFlag>): Promise<FeatureFlag | undefined>;\n  deleteFeatureFlag(id: string): Promise<boolean>;\n  initializeDefaultFeatureFlags(): Promise<void>;\n\n  // IAM - Roles\n  getRoles(organizationId?: string): Promise<Role[]>;\n  getRole(id: string): Promise<Role | undefined>;\n  createRole(role: InsertRole): Promise<Role>;\n  updateRole(id: string, data: Partial<Role>): Promise<Role | undefined>;\n  deleteRole(id: string): Promise<boolean>;\n\n  // IAM - Permissions\n  getPermissions(): Promise<Permission[]>;\n  getPermission(id: string): Promise<Permission | undefined>;\n  getPermissionByKey(key: string): Promise<Permission | undefined>;\n  createPermission(permission: InsertPermission): Promise<Permission>;\n\n  // IAM - Role Permissions\n  getRolePermissions(roleId: string): Promise<Permission[]>;\n  assignPermissionToRole(roleId: string, permissionId: string): Promise<RolePermission>;\n  removePermissionFromRole(roleId: string, permissionId: string): Promise<boolean>;\n\n  // IAM - User Roles\n  getUserRoles(userId: string): Promise<Role[]>;\n  assignRoleToUser(userId: string, roleId: string, grantedBy: string): Promise<UserRole>;\n  removeRoleFromUser(userId: string, roleId: string): Promise<boolean>;\n\n  // IAM - Team Members\n  getTeamMembers(organizationId: string): Promise<TeamMember[]>;\n  getTeamMember(id: string): Promise<TeamMember | undefined>;\n  getTeamMemberByEmail(email: string, organizationId: string): Promise<TeamMember | undefined>;\n  createTeamMember(member: InsertTeamMember): Promise<TeamMember>;\n  updateTeamMember(id: string, data: Partial<TeamMember>): Promise<TeamMember | undefined>;\n  deleteTeamMember(id: string): Promise<boolean>;\n\n  // IAM - Permission Checks\n  userHasPermission(userId: string, permissionKey: string): Promise<boolean>;\n  initializeDefaultPermissions(): Promise<void>;\n  initializeDefaultRoles(): Promise<void>;\n\n  // Discount Coupons\n  getDiscountCoupons(): Promise<DiscountCoupon[]>;\n  getDiscountCoupon(id: string): Promise<DiscountCoupon | undefined>;\n  getDiscountCouponByCode(code: string): Promise<DiscountCoupon | undefined>;\n  createDiscountCoupon(coupon: InsertDiscountCoupon & { createdBy: string }): Promise<DiscountCoupon>;\n  updateDiscountCoupon(id: string, data: Partial<DiscountCoupon>): Promise<DiscountCoupon | undefined>;\n  deleteDiscountCoupon(id: string): Promise<boolean>;\n  incrementCouponUsage(id: string): Promise<void>;\n  validateCoupon(code: string, orderAmount?: number): Promise<{ valid: boolean; error?: string; coupon?: DiscountCoupon }>;\n\n  // Activity Logging\n  getUserActivities(userId?: string, limit?: number): Promise<UserActivity[]>;\n  getUserActivity(id: string): Promise<UserActivity | undefined>;\n  createUserActivity(activity: InsertUserActivity): Promise<UserActivity>;\n  getRecentActivities(limit?: number): Promise<UserActivity[]>;\n  getUserActivitiesByAction(userId: string, action: string): Promise<UserActivity[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private kubernetesClusters: Map<string, KubernetesCluster>;\n  private databases: Map<string, Database>;\n  private dnsDomains: Map<string, DnsDomain>;\n  private dnsRecords: Map<string, DnsRecord>;\n  private virtualMachines: Map<string, VirtualMachine>;\n  private vmSnapshots: Map<string, VMSnapshot>;\n  private featureFlags: Map<string, FeatureFlag>;\n  private roles: Map<string, Role>;\n  private permissions: Map<string, Permission>;\n  private rolePermissions: Map<string, RolePermission>;\n  private userRoles: Map<string, UserRole>;\n  private teamMembers: Map<string, TeamMember>;\n  private discountCoupons: Map<string, DiscountCoupon>;\n  private userActivities: Map<string, UserActivity>;\n\n  constructor() {\n    this.users = new Map();\n    this.kubernetesClusters = new Map();\n    this.databases = new Map();\n    this.dnsDomains = new Map();\n    this.dnsRecords = new Map();\n    this.virtualMachines = new Map();\n    this.vmSnapshots = new Map();\n    this.featureFlags = new Map();\n    this.roles = new Map();\n    this.permissions = new Map();\n    this.rolePermissions = new Map();\n    this.userRoles = new Map();\n    this.teamMembers = new Map();\n    this.discountCoupons = new Map();\n    this.userActivities = new Map();\n    \n    // Initialize defaults\n    this.initializeDefaultFeatureFlags();\n    this.initializeDefaultPermissions();\n    this.initializeDefaultRoles();\n  }\n\n  async getUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      emailVerified: false,\n      emailVerificationCode: null,\n      emailVerificationExpiry: null,\n      twoFactorSecret: null,\n      twoFactorEnabled: false,\n      accountType: \"customer\",\n      organizationId: null,\n      defaultDiscountPercentage: 0,\n      status: \"active\",\n      createdAt: new Date(),\n      lastLogin: null,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    const updatedUser = { ...user, ...data };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Kubernetes methods\n  async getKubernetesClusters(userId: string): Promise<KubernetesCluster[]> {\n    return Array.from(this.kubernetesClusters.values()).filter(\n      (cluster) => cluster.userId === userId,\n    );\n  }\n\n  async getKubernetesCluster(id: string): Promise<KubernetesCluster | undefined> {\n    return this.kubernetesClusters.get(id);\n  }\n\n  async createKubernetesCluster(cluster: InsertKubernetesCluster & { userId: string }): Promise<KubernetesCluster> {\n    const id = `k8s-${randomUUID().slice(0, 8)}`;\n    const cpuTotal = cluster.masterNodes * 4 + cluster.workerNodes * 4;\n    const memoryTotal = cluster.masterNodes * 16 + cluster.workerNodes * 16;\n\n    const newCluster: KubernetesCluster = {\n      id,\n      name: cluster.name,\n      version: cluster.version,\n      status: cluster.status || \"running\",\n      masterNodes: cluster.masterNodes,\n      workerNodes: cluster.workerNodes,\n      region: cluster.region,\n      instanceType: cluster.instanceType,\n      autoHealing: cluster.autoHealing ?? true,\n      autoScaling: cluster.autoScaling ?? false,\n      cpuUsed: 0,\n      cpuTotal,\n      memoryUsed: 0,\n      memoryTotal,\n      podsRunning: 0,\n      podsTotal: 250,\n      health: \"healthy\",\n      createdAt: new Date(),\n      userId: cluster.userId,\n    };\n    this.kubernetesClusters.set(id, newCluster);\n    return newCluster;\n  }\n\n  async updateKubernetesCluster(id: string, data: Partial<KubernetesCluster>): Promise<KubernetesCluster | undefined> {\n    const cluster = this.kubernetesClusters.get(id);\n    if (!cluster) return undefined;\n    const updatedCluster = { ...cluster, ...data };\n    this.kubernetesClusters.set(id, updatedCluster);\n    return updatedCluster;\n  }\n\n  async deleteKubernetesCluster(id: string): Promise<boolean> {\n    return this.kubernetesClusters.delete(id);\n  }\n\n  // Database methods\n  async getDatabases(userId: string): Promise<Database[]> {\n    return Array.from(this.databases.values()).filter(\n      (database) => database.userId === userId,\n    );\n  }\n\n  async getDatabase(id: string): Promise<Database | undefined> {\n    return this.databases.get(id);\n  }\n\n  async createDatabase(database: InsertDatabase & { userId: string }): Promise<Database> {\n    const id = `db-${database.engine}-${randomUUID().slice(0, 8)}`;\n    const portMap = {\n      mysql: 3306,\n      postgresql: 5432,\n      mongodb: 27017,\n      redis: 6379,\n    };\n\n    const connectionsMaxMap = {\n      mysql: 200,\n      postgresql: 500,\n      mongodb: 100,\n      redis: 1000,\n    };\n\n    const newDatabase: Database = {\n      id,\n      name: database.name,\n      engine: database.engine,\n      version: database.version,\n      status: database.status || \"running\",\n      storage: database.storage,\n      cpu: database.cpu,\n      memory: database.memory,\n      region: database.region,\n      instanceType: database.instanceType,\n      endpoint: `${database.name}.akashone.com`,\n      port: portMap[database.engine as keyof typeof portMap] || 5432,\n      backupEnabled: database.backupEnabled ?? true,\n      multiAZ: database.multiAZ ?? false,\n      connectionsCurrent: 0,\n      connectionsMax: connectionsMaxMap[database.engine as keyof typeof connectionsMaxMap] || 200,\n      createdAt: new Date(),\n      userId: database.userId,\n    };\n    this.databases.set(id, newDatabase);\n    return newDatabase;\n  }\n\n  async updateDatabase(id: string, data: Partial<Database>): Promise<Database | undefined> {\n    const database = this.databases.get(id);\n    if (!database) return undefined;\n    const updatedDatabase = { ...database, ...data };\n    this.databases.set(id, updatedDatabase);\n    return updatedDatabase;\n  }\n\n  async deleteDatabase(id: string): Promise<boolean> {\n    return this.databases.delete(id);\n  }\n\n  // DNS Domain methods\n  async getDnsDomains(userId: string): Promise<DnsDomain[]> {\n    return Array.from(this.dnsDomains.values()).filter(\n      (domain) => domain.userId === userId,\n    );\n  }\n\n  async getDnsDomain(id: string): Promise<DnsDomain | undefined> {\n    return this.dnsDomains.get(id);\n  }\n\n  async createDnsDomain(domain: InsertDnsDomain & { userId: string }): Promise<DnsDomain> {\n    const id = `dns-${randomUUID().slice(0, 8)}`;\n    const newDomain: DnsDomain = {\n      id,\n      name: domain.name,\n      status: domain.status || \"pending\",\n      recordCount: 0,\n      dnssec: domain.dnssec ?? false,\n      nameservers: domain.nameservers || [\"ns1.akashone.com\", \"ns2.akashone.com\"],\n      lastModified: new Date(),\n      createdAt: new Date(),\n      userId: domain.userId,\n    };\n    this.dnsDomains.set(id, newDomain);\n    return newDomain;\n  }\n\n  async updateDnsDomain(id: string, data: Partial<DnsDomain>): Promise<DnsDomain | undefined> {\n    const domain = this.dnsDomains.get(id);\n    if (!domain) return undefined;\n    const updatedDomain = { ...domain, ...data, lastModified: new Date() };\n    this.dnsDomains.set(id, updatedDomain);\n    return updatedDomain;\n  }\n\n  async deleteDnsDomain(id: string): Promise<boolean> {\n    // Delete all records for this domain\n    const records = Array.from(this.dnsRecords.values()).filter(\n      (record) => record.domainId === id,\n    );\n    records.forEach((record) => this.dnsRecords.delete(record.id));\n    return this.dnsDomains.delete(id);\n  }\n\n  // DNS Record methods\n  async getDnsRecords(domainId: string): Promise<DnsRecord[]> {\n    return Array.from(this.dnsRecords.values()).filter(\n      (record) => record.domainId === domainId,\n    );\n  }\n\n  async getDnsRecord(id: string): Promise<DnsRecord | undefined> {\n    return this.dnsRecords.get(id);\n  }\n\n  async createDnsRecord(record: InsertDnsRecord & { userId: string }): Promise<DnsRecord> {\n    const id = `rec-${randomUUID().slice(0, 8)}`;\n    const newRecord: DnsRecord = {\n      id,\n      domainId: record.domainId,\n      type: record.type,\n      name: record.name,\n      value: record.value,\n      ttl: record.ttl ?? 3600,\n      priority: record.priority ?? null,\n      createdAt: new Date(),\n      userId: record.userId,\n    };\n    this.dnsRecords.set(id, newRecord);\n    \n    // Update domain record count\n    const domain = this.dnsDomains.get(record.domainId);\n    if (domain) {\n      domain.recordCount += 1;\n      domain.lastModified = new Date();\n      this.dnsDomains.set(domain.id, domain);\n    }\n    \n    return newRecord;\n  }\n\n  async updateDnsRecord(id: string, data: Partial<DnsRecord>): Promise<DnsRecord | undefined> {\n    const record = this.dnsRecords.get(id);\n    if (!record) return undefined;\n    const updatedRecord = { ...record, ...data };\n    this.dnsRecords.set(id, updatedRecord);\n    \n    // Update domain lastModified\n    const domain = this.dnsDomains.get(record.domainId);\n    if (domain) {\n      domain.lastModified = new Date();\n      this.dnsDomains.set(domain.id, domain);\n    }\n    \n    return updatedRecord;\n  }\n\n  async deleteDnsRecord(id: string): Promise<boolean> {\n    const record = this.dnsRecords.get(id);\n    if (!record) return false;\n    \n    // Update domain record count\n    const domain = this.dnsDomains.get(record.domainId);\n    if (domain) {\n      domain.recordCount = Math.max(0, domain.recordCount - 1);\n      domain.lastModified = new Date();\n      this.dnsDomains.set(domain.id, domain);\n    }\n    \n    return this.dnsRecords.delete(id);\n  }\n\n  // Virtual Machine methods\n  async getVirtualMachines(userId: string): Promise<VirtualMachine[]> {\n    return Array.from(this.virtualMachines.values()).filter(\n      (vm) => vm.userId === userId,\n    );\n  }\n\n  async getVirtualMachine(id: string): Promise<VirtualMachine | undefined> {\n    return this.virtualMachines.get(id);\n  }\n\n  async getVirtualMachineByCloudstackId(cloudstackId: string): Promise<VirtualMachine | undefined> {\n    return Array.from(this.virtualMachines.values()).find(\n      (vm) => vm.cloudstackId === cloudstackId,\n    );\n  }\n\n  async createVirtualMachine(vm: InsertVirtualMachine & { userId: string }): Promise<VirtualMachine> {\n    const id = `vm-${randomUUID().slice(0, 8)}`;\n    const newVM: VirtualMachine = {\n      id,\n      cloudstackId: vm.cloudstackId,\n      name: vm.name,\n      displayName: vm.displayName || vm.name,\n      state: vm.state || \"Creating\",\n      templateId: vm.templateId,\n      templateName: vm.templateName || null,\n      serviceOfferingId: vm.serviceOfferingId,\n      serviceOfferingName: vm.serviceOfferingName || null,\n      zoneId: vm.zoneId,\n      zoneName: vm.zoneName || null,\n      cpu: vm.cpu,\n      memory: vm.memory,\n      diskSize: vm.diskSize || null,\n      ipAddress: vm.ipAddress || null,\n      publicIp: vm.publicIp || null,\n      networkIds: vm.networkIds || null,\n      tags: vm.tags || null,\n      createdAt: new Date(),\n      lastSynced: new Date(),\n      userId: vm.userId,\n    };\n    this.virtualMachines.set(id, newVM);\n    return newVM;\n  }\n\n  async updateVirtualMachine(id: string, data: Partial<VirtualMachine>): Promise<VirtualMachine | undefined> {\n    const vm = this.virtualMachines.get(id);\n    if (!vm) return undefined;\n    const updatedVM = { ...vm, ...data, lastSynced: new Date() };\n    this.virtualMachines.set(id, updatedVM);\n    return updatedVM;\n  }\n\n  async deleteVirtualMachine(id: string): Promise<boolean> {\n    return this.virtualMachines.delete(id);\n  }\n\n  // VM Snapshots\n  async getVMSnapshots(vmId: string, userId: string): Promise<VMSnapshot[]> {\n    return Array.from(this.vmSnapshots.values()).filter(\n      (snapshot) => snapshot.vmId === vmId && snapshot.userId === userId\n    );\n  }\n\n  async getVMSnapshot(id: string): Promise<VMSnapshot | undefined> {\n    return this.vmSnapshots.get(id);\n  }\n\n  async getVMSnapshotByCloudstackId(cloudstackSnapshotId: string): Promise<VMSnapshot | undefined> {\n    return Array.from(this.vmSnapshots.values()).find(\n      (snapshot) => snapshot.cloudstackSnapshotId === cloudstackSnapshotId\n    );\n  }\n\n  async createVMSnapshot(snapshot: InsertVMSnapshot): Promise<VMSnapshot> {\n    const id = randomUUID();\n    const newSnapshot: VMSnapshot = {\n      id,\n      cloudstackSnapshotId: snapshot.cloudstackSnapshotId,\n      vmId: snapshot.vmId,\n      userId: snapshot.userId,\n      name: snapshot.name,\n      description: snapshot.description ?? null,\n      state: snapshot.state,\n      snapshotMemory: snapshot.snapshotMemory ?? null,\n      createdAt: new Date(),\n    };\n    this.vmSnapshots.set(id, newSnapshot);\n    return newSnapshot;\n  }\n\n  async deleteVMSnapshot(id: string): Promise<boolean> {\n    return this.vmSnapshots.delete(id);\n  }\n\n  // Feature Flags\n  async getFeatureFlags(): Promise<FeatureFlag[]> {\n    return Array.from(this.featureFlags.values()).sort((a, b) => a.sortOrder - b.sortOrder);\n  }\n\n  async getFeatureFlag(id: string): Promise<FeatureFlag | undefined> {\n    return this.featureFlags.get(id);\n  }\n\n  async getFeatureFlagByKey(key: string): Promise<FeatureFlag | undefined> {\n    return Array.from(this.featureFlags.values()).find((flag) => flag.key === key);\n  }\n\n  async createFeatureFlag(flag: InsertFeatureFlag): Promise<FeatureFlag> {\n    const id = randomUUID();\n    const newFlag: FeatureFlag = {\n      id,\n      key: flag.key,\n      name: flag.name,\n      description: flag.description ?? null,\n      category: flag.category,\n      enabled: flag.enabled ?? false,\n      icon: flag.icon ?? null,\n      sortOrder: flag.sortOrder ?? 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.featureFlags.set(id, newFlag);\n    return newFlag;\n  }\n\n  async updateFeatureFlag(id: string, data: Partial<FeatureFlag>): Promise<FeatureFlag | undefined> {\n    const flag = this.featureFlags.get(id);\n    if (!flag) return undefined;\n    const updatedFlag = { ...flag, ...data, updatedAt: new Date() };\n    this.featureFlags.set(id, updatedFlag);\n    return updatedFlag;\n  }\n\n  async deleteFeatureFlag(id: string): Promise<boolean> {\n    return this.featureFlags.delete(id);\n  }\n\n  async initializeDefaultFeatureFlags(): Promise<void> {\n    const defaultFlags: InsertFeatureFlag[] = [\n      // Core Services (Already enabled)\n      {\n        key: \"virtual_machines\",\n        name: \"Virtual Machines\",\n        description: \"VM provisioning and management with CloudStack integration\",\n        category: \"Compute\",\n        enabled: true,\n        icon: \"Server\",\n        sortOrder: 1,\n      },\n      {\n        key: \"kubernetes\",\n        name: \"Kubernetes Service\",\n        description: \"Managed Kubernetes clusters with auto-scaling\",\n        category: \"Compute\",\n        enabled: true,\n        icon: \"Container\",\n        sortOrder: 2,\n      },\n      {\n        key: \"database\",\n        name: \"Database-as-a-Service\",\n        description: \"Managed database instances (MySQL, PostgreSQL, MongoDB, Redis)\",\n        category: \"Compute\",\n        enabled: true,\n        icon: \"Database\",\n        sortOrder: 3,\n      },\n      {\n        key: \"dns\",\n        name: \"DNS Management\",\n        description: \"Domain and DNS record management\",\n        category: \"Networking\",\n        enabled: true,\n        icon: \"Globe\",\n        sortOrder: 4,\n      },\n      {\n        key: \"object_storage\",\n        name: \"Object Storage\",\n        description: \"S3-compatible object storage service\",\n        category: \"Storage\",\n        enabled: true,\n        icon: \"HardDrive\",\n        sortOrder: 5,\n      },\n      {\n        key: \"billing\",\n        name: \"Billing & Invoices\",\n        description: \"Indian GST-compliant billing system\",\n        category: \"Billing\",\n        enabled: true,\n        icon: \"Receipt\",\n        sortOrder: 6,\n      },\n\n      // New Features (Initially disabled)\n      {\n        key: \"payment_gateway\",\n        name: \"Payment Gateway Configuration\",\n        description: \"Configure Stripe, Razorpay, PayPal payment integrations\",\n        category: \"Billing\",\n        enabled: false,\n        icon: \"CreditCard\",\n        sortOrder: 10,\n      },\n      {\n        key: \"pricing_calculator\",\n        name: \"Pricing Calculator\",\n        description: \"Interactive cost estimation tool for resources\",\n        category: \"Billing\",\n        enabled: false,\n        icon: \"Calculator\",\n        sortOrder: 11,\n      },\n      {\n        key: \"load_balancer\",\n        name: \"Load Balancer Service\",\n        description: \"Request distribution and high-availability load balancing\",\n        category: \"Networking\",\n        enabled: false,\n        icon: \"Network\",\n        sortOrder: 12,\n      },\n      {\n        key: \"gpu_instances\",\n        name: \"GPU Instances\",\n        description: \"NVIDIA GPU compute instances for AI/ML workloads\",\n        category: \"Compute\",\n        enabled: false,\n        icon: \"Zap\",\n        sortOrder: 13,\n      },\n      {\n        key: \"ssl_certificates\",\n        name: \"SSL Certificate Manager\",\n        description: \"Automated SSL certificate provisioning and management\",\n        category: \"Networking\",\n        enabled: false,\n        icon: \"Shield\",\n        sortOrder: 14,\n      },\n      {\n        key: \"cdn_service\",\n        name: \"CDN Service\",\n        description: \"Content delivery network for global acceleration\",\n        category: \"Networking\",\n        enabled: false,\n        icon: \"Cloudy\",\n        sortOrder: 15,\n      },\n      {\n        key: \"auto_scaling\",\n        name: \"VM Auto-Scaling Groups\",\n        description: \"Dynamic resource scaling based on load metrics\",\n        category: \"Compute\",\n        enabled: false,\n        icon: \"TrendingUp\",\n        sortOrder: 16,\n      },\n\n      // CloudStack Infrastructure Components (Initially disabled)\n      {\n        key: \"volumes\",\n        name: \"Block Storage Volumes\",\n        description: \"Persistent block storage with attach/detach to VMs\",\n        category: \"Storage\",\n        enabled: false,\n        icon: \"HardDrive\",\n        sortOrder: 17,\n      },\n      {\n        key: \"firewall\",\n        name: \"Firewall Rules\",\n        description: \"Network firewall rules for ingress/egress traffic control\",\n        category: \"Networking\",\n        enabled: false,\n        icon: \"Shield\",\n        sortOrder: 18,\n      },\n      {\n        key: \"security_groups\",\n        name: \"Security Groups\",\n        description: \"VM security groups with customizable inbound/outbound rules\",\n        category: \"Networking\",\n        enabled: false,\n        icon: \"Lock\",\n        sortOrder: 19,\n      },\n      {\n        key: \"vpc\",\n        name: \"Virtual Private Cloud\",\n        description: \"Isolated VPC networks with custom CIDR and network tiers\",\n        category: \"Networking\",\n        enabled: false,\n        icon: \"Network\",\n        sortOrder: 20,\n      },\n      {\n        key: \"elastic_ip\",\n        name: \"Elastic IP (Static IP)\",\n        description: \"Reserve and manage static public IP addresses\",\n        category: \"Networking\",\n        enabled: false,\n        icon: \"MapPin\",\n        sortOrder: 21,\n      },\n      {\n        key: \"ssh_keys\",\n        name: \"SSH Key Management\",\n        description: \"Register and manage SSH key pairs for secure VM access\",\n        category: \"Compute\",\n        enabled: false,\n        icon: \"Key\",\n        sortOrder: 22,\n      },\n      {\n        key: \"images_templates\",\n        name: \"Images & Templates\",\n        description: \"VM templates, ISOs, and custom image management\",\n        category: \"Compute\",\n        enabled: false,\n        icon: \"Image\",\n        sortOrder: 23,\n      },\n      {\n        key: \"resource_tags\",\n        name: \"Resource Tags\",\n        description: \"Organize resources with key-value tags for billing and categorization\",\n        category: \"Compute\",\n        enabled: false,\n        icon: \"Tag\",\n        sortOrder: 24,\n      },\n    ];\n\n    for (const flag of defaultFlags) {\n      const existing = await this.getFeatureFlagByKey(flag.key);\n      if (!existing) {\n        await this.createFeatureFlag(flag);\n      }\n    }\n  }\n\n  // IAM - Roles\n  async getRoles(organizationId?: string): Promise<Role[]> {\n    if (organizationId) {\n      return Array.from(this.roles.values()).filter(\n        (role) => role.organizationId === organizationId || role.isSystem\n      );\n    }\n    return Array.from(this.roles.values());\n  }\n\n  async getRole(id: string): Promise<Role | undefined> {\n    return this.roles.get(id);\n  }\n\n  async createRole(insertRole: InsertRole): Promise<Role> {\n    const id = randomUUID();\n    const role: Role = {\n      id,\n      name: insertRole.name,\n      description: insertRole.description ?? null,\n      isSystem: insertRole.isSystem ?? false,\n      organizationId: insertRole.organizationId ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.roles.set(id, role);\n    return role;\n  }\n\n  async updateRole(id: string, data: Partial<Role>): Promise<Role | undefined> {\n    const role = this.roles.get(id);\n    if (!role) return undefined;\n    const updatedRole = { ...role, ...data, updatedAt: new Date() };\n    this.roles.set(id, updatedRole);\n    return updatedRole;\n  }\n\n  async deleteRole(id: string): Promise<boolean> {\n    return this.roles.delete(id);\n  }\n\n  // IAM - Permissions\n  async getPermissions(): Promise<Permission[]> {\n    return Array.from(this.permissions.values());\n  }\n\n  async getPermission(id: string): Promise<Permission | undefined> {\n    return this.permissions.get(id);\n  }\n\n  async getPermissionByKey(key: string): Promise<Permission | undefined> {\n    return Array.from(this.permissions.values()).find((p) => p.key === key);\n  }\n\n  async createPermission(insertPermission: InsertPermission): Promise<Permission> {\n    const id = randomUUID();\n    const permission: Permission = {\n      id,\n      key: insertPermission.key,\n      name: insertPermission.name,\n      description: insertPermission.description ?? null,\n      category: insertPermission.category,\n      createdAt: new Date(),\n    };\n    this.permissions.set(id, permission);\n    return permission;\n  }\n\n  // IAM - Role Permissions\n  async getRolePermissions(roleId: string): Promise<Permission[]> {\n    const rolePerms = Array.from(this.rolePermissions.values()).filter(\n      (rp) => rp.roleId === roleId\n    );\n    const permissionIds = rolePerms.map((rp) => rp.permissionId);\n    return Array.from(this.permissions.values()).filter((p) =>\n      permissionIds.includes(p.id)\n    );\n  }\n\n  async assignPermissionToRole(roleId: string, permissionId: string): Promise<RolePermission> {\n    const id = randomUUID();\n    const rolePermission: RolePermission = {\n      id,\n      roleId,\n      permissionId,\n      createdAt: new Date(),\n    };\n    this.rolePermissions.set(id, rolePermission);\n    return rolePermission;\n  }\n\n  async removePermissionFromRole(roleId: string, permissionId: string): Promise<boolean> {\n    const rolePerms = Array.from(this.rolePermissions.entries()).filter(\n      ([_, rp]) => rp.roleId === roleId && rp.permissionId === permissionId\n    );\n    if (rolePerms.length === 0) return false;\n    for (const [id] of rolePerms) {\n      this.rolePermissions.delete(id);\n    }\n    return true;\n  }\n\n  // IAM - User Roles\n  async getUserRoles(userId: string): Promise<Role[]> {\n    const userRoleEntries = Array.from(this.userRoles.values()).filter(\n      (ur) => ur.userId === userId\n    );\n    const roleIds = userRoleEntries.map((ur) => ur.roleId);\n    return Array.from(this.roles.values()).filter((r) => roleIds.includes(r.id));\n  }\n\n  async assignRoleToUser(userId: string, roleId: string, grantedBy: string): Promise<UserRole> {\n    const id = randomUUID();\n    const userRole: UserRole = {\n      id,\n      userId,\n      roleId,\n      grantedBy,\n      createdAt: new Date(),\n    };\n    this.userRoles.set(id, userRole);\n    return userRole;\n  }\n\n  async removeRoleFromUser(userId: string, roleId: string): Promise<boolean> {\n    const userRoleEntries = Array.from(this.userRoles.entries()).filter(\n      ([_, ur]) => ur.userId === userId && ur.roleId === roleId\n    );\n    if (userRoleEntries.length === 0) return false;\n    for (const [id] of userRoleEntries) {\n      this.userRoles.delete(id);\n    }\n    return true;\n  }\n\n  // IAM - Team Members\n  async getTeamMembers(organizationId: string): Promise<TeamMember[]> {\n    return Array.from(this.teamMembers.values()).filter(\n      (tm) => tm.organizationId === organizationId\n    );\n  }\n\n  async getTeamMember(id: string): Promise<TeamMember | undefined> {\n    return this.teamMembers.get(id);\n  }\n\n  async getTeamMemberByEmail(email: string, organizationId: string): Promise<TeamMember | undefined> {\n    return Array.from(this.teamMembers.values()).find(\n      (tm) => tm.email === email && tm.organizationId === organizationId\n    );\n  }\n\n  async createTeamMember(insertTeamMember: InsertTeamMember): Promise<TeamMember> {\n    const id = randomUUID();\n    const teamMember: TeamMember = {\n      id,\n      email: insertTeamMember.email,\n      userId: insertTeamMember.userId ?? null,\n      organizationId: insertTeamMember.organizationId,\n      status: insertTeamMember.status ?? \"invited\",\n      invitedBy: insertTeamMember.invitedBy,\n      invitationToken: insertTeamMember.invitationToken ?? null,\n      invitedAt: new Date(),\n      joinedAt: null,\n    };\n    this.teamMembers.set(id, teamMember);\n    return teamMember;\n  }\n\n  async updateTeamMember(id: string, data: Partial<TeamMember>): Promise<TeamMember | undefined> {\n    const member = this.teamMembers.get(id);\n    if (!member) return undefined;\n    const updatedMember = { ...member, ...data };\n    this.teamMembers.set(id, updatedMember);\n    return updatedMember;\n  }\n\n  async deleteTeamMember(id: string): Promise<boolean> {\n    return this.teamMembers.delete(id);\n  }\n\n  // IAM - Permission Checks\n  async userHasPermission(userId: string, permissionKey: string): Promise<boolean> {\n    // Get all roles for the user\n    const userRolesList = await this.getUserRoles(userId);\n    const roleIds = userRolesList.map((r) => r.id);\n\n    // Get all role permissions for these roles\n    const allRolePerms = Array.from(this.rolePermissions.values()).filter((rp) =>\n      roleIds.includes(rp.roleId)\n    );\n    const permissionIds = allRolePerms.map((rp) => rp.permissionId);\n\n    // Check if any of these permissions match the key\n    const permissions = Array.from(this.permissions.values()).filter((p) =>\n      permissionIds.includes(p.id)\n    );\n    return permissions.some((p) => p.key === permissionKey);\n  }\n\n  async initializeDefaultPermissions(): Promise<void> {\n    const defaultPermissions: InsertPermission[] = [\n      // Compute permissions\n      { key: \"vm.view\", name: \"View Virtual Machines\", category: \"Compute\" },\n      { key: \"vm.create\", name: \"Create Virtual Machines\", category: \"Compute\" },\n      { key: \"vm.update\", name: \"Update Virtual Machines\", category: \"Compute\" },\n      { key: \"vm.delete\", name: \"Delete Virtual Machines\", category: \"Compute\" },\n      { key: \"kubernetes.view\", name: \"View Kubernetes Clusters\", category: \"Compute\" },\n      { key: \"kubernetes.create\", name: \"Create Kubernetes Clusters\", category: \"Compute\" },\n      { key: \"kubernetes.delete\", name: \"Delete Kubernetes Clusters\", category: \"Compute\" },\n      { key: \"database.view\", name: \"View Databases\", category: \"Compute\" },\n      { key: \"database.create\", name: \"Create Databases\", category: \"Compute\" },\n      { key: \"database.delete\", name: \"Delete Databases\", category: \"Compute\" },\n\n      // Networking permissions\n      { key: \"network.view\", name: \"View Networks\", category: \"Networking\" },\n      { key: \"network.create\", name: \"Create Networks\", category: \"Networking\" },\n      { key: \"dns.view\", name: \"View DNS\", category: \"Networking\" },\n      { key: \"dns.manage\", name: \"Manage DNS\", category: \"Networking\" },\n\n      // Storage permissions\n      { key: \"storage.view\", name: \"View Storage\", category: \"Storage\" },\n      { key: \"storage.manage\", name: \"Manage Storage\", category: \"Storage\" },\n\n      // Billing permissions\n      { key: \"billing.view\", name: \"View Billing\", category: \"Billing\" },\n      { key: \"billing.manage\", name: \"Manage Billing\", category: \"Billing\" },\n\n      // IAM permissions\n      { key: \"iam.view\", name: \"View IAM\", category: \"IAM\" },\n      { key: \"iam.manage\", name: \"Manage IAM\", category: \"IAM\" },\n      { key: \"team.view\", name: \"View Team Members\", category: \"IAM\" },\n      { key: \"team.manage\", name: \"Manage Team Members\", category: \"IAM\" },\n    ];\n\n    for (const perm of defaultPermissions) {\n      const existing = await this.getPermissionByKey(perm.key);\n      if (!existing) {\n        await this.createPermission(perm);\n      }\n    }\n  }\n\n  async initializeDefaultRoles(): Promise<void> {\n    const defaultRoles: Array<{ role: InsertRole; permissionKeys: string[] }> = [\n      {\n        role: {\n          name: \"Admin\",\n          description: \"Full access to all resources\",\n          isSystem: true,\n        },\n        permissionKeys: [\n          \"vm.view\", \"vm.create\", \"vm.update\", \"vm.delete\",\n          \"kubernetes.view\", \"kubernetes.create\", \"kubernetes.delete\",\n          \"database.view\", \"database.create\", \"database.delete\",\n          \"network.view\", \"network.create\",\n          \"dns.view\", \"dns.manage\",\n          \"storage.view\", \"storage.manage\",\n          \"billing.view\", \"billing.manage\",\n          \"iam.view\", \"iam.manage\",\n          \"team.view\", \"team.manage\",\n        ],\n      },\n      {\n        role: {\n          name: \"Editor\",\n          description: \"Can create and manage resources but not billing or IAM\",\n          isSystem: true,\n        },\n        permissionKeys: [\n          \"vm.view\", \"vm.create\", \"vm.update\", \"vm.delete\",\n          \"kubernetes.view\", \"kubernetes.create\", \"kubernetes.delete\",\n          \"database.view\", \"database.create\", \"database.delete\",\n          \"network.view\", \"network.create\",\n          \"dns.view\", \"dns.manage\",\n          \"storage.view\", \"storage.manage\",\n          \"billing.view\",\n          \"team.view\",\n        ],\n      },\n      {\n        role: {\n          name: \"Viewer\",\n          description: \"Read-only access to all resources\",\n          isSystem: true,\n        },\n        permissionKeys: [\n          \"vm.view\",\n          \"kubernetes.view\",\n          \"database.view\",\n          \"network.view\",\n          \"dns.view\",\n          \"storage.view\",\n          \"billing.view\",\n          \"team.view\",\n        ],\n      },\n    ];\n\n    for (const { role: roleData, permissionKeys } of defaultRoles) {\n      // Check if role already exists\n      const existingRole = Array.from(this.roles.values()).find(\n        (r) => r.name === roleData.name && r.isSystem\n      );\n      \n      let role: Role;\n      if (!existingRole) {\n        role = await this.createRole(roleData);\n      } else {\n        role = existingRole;\n      }\n\n      // Assign permissions to role\n      for (const permKey of permissionKeys) {\n        const permission = await this.getPermissionByKey(permKey);\n        if (permission) {\n          // Check if permission is already assigned\n          const rolePerms = await this.getRolePermissions(role.id);\n          const alreadyAssigned = rolePerms.some((p) => p.key === permKey);\n          if (!alreadyAssigned) {\n            await this.assignPermissionToRole(role.id, permission.id);\n          }\n        }\n      }\n    }\n  }\n\n  // Discount Coupons Implementation\n  async getDiscountCoupons(): Promise<DiscountCoupon[]> {\n    return Array.from(this.discountCoupons.values());\n  }\n\n  async getDiscountCoupon(id: string): Promise<DiscountCoupon | undefined> {\n    return this.discountCoupons.get(id);\n  }\n\n  async getDiscountCouponByCode(code: string): Promise<DiscountCoupon | undefined> {\n    return Array.from(this.discountCoupons.values()).find(\n      (coupon) => coupon.code.toUpperCase() === code.toUpperCase()\n    );\n  }\n\n  async createDiscountCoupon(insertCoupon: InsertDiscountCoupon & { createdBy: string }): Promise<DiscountCoupon> {\n    const id = randomUUID();\n    const coupon: DiscountCoupon = {\n      ...insertCoupon,\n      id,\n      code: insertCoupon.code.toUpperCase(),\n      timesUsed: 0,\n      validFrom: insertCoupon.validFrom || new Date(),\n      validUntil: insertCoupon.validUntil || null,\n      isActive: insertCoupon.isActive !== undefined ? insertCoupon.isActive : true,\n      createdAt: new Date(),\n      createdBy: insertCoupon.createdBy,\n      description: insertCoupon.description || null,\n      durationMonths: insertCoupon.durationMonths || null,\n      maxUses: insertCoupon.maxUses || null,\n      minOrderAmount: insertCoupon.minOrderAmount || null,\n    };\n\n    this.discountCoupons.set(id, coupon);\n    return coupon;\n  }\n\n  async updateDiscountCoupon(id: string, data: Partial<DiscountCoupon>): Promise<DiscountCoupon | undefined> {\n    const coupon = this.discountCoupons.get(id);\n    if (!coupon) {\n      return undefined;\n    }\n\n    const updated = { ...coupon, ...data };\n    if (data.code) {\n      updated.code = data.code.toUpperCase();\n    }\n    this.discountCoupons.set(id, updated);\n    return updated;\n  }\n\n  async deleteDiscountCoupon(id: string): Promise<boolean> {\n    return this.discountCoupons.delete(id);\n  }\n\n  async incrementCouponUsage(id: string): Promise<void> {\n    const coupon = this.discountCoupons.get(id);\n    if (coupon) {\n      coupon.timesUsed += 1;\n      this.discountCoupons.set(id, coupon);\n    }\n  }\n\n  async validateCoupon(\n    code: string,\n    orderAmount?: number\n  ): Promise<{ valid: boolean; error?: string; coupon?: DiscountCoupon }> {\n    const coupon = await this.getDiscountCouponByCode(code);\n\n    if (!coupon) {\n      return { valid: false, error: \"Coupon not found\" };\n    }\n\n    if (!coupon.isActive) {\n      return { valid: false, error: \"Coupon is inactive\" };\n    }\n\n    const now = new Date();\n    if (coupon.validFrom && new Date(coupon.validFrom) > now) {\n      return { valid: false, error: \"Coupon is not yet valid\" };\n    }\n\n    if (coupon.validUntil && new Date(coupon.validUntil) < now) {\n      return { valid: false, error: \"Coupon has expired\" };\n    }\n\n    if (coupon.maxUses && coupon.timesUsed >= coupon.maxUses) {\n      return { valid: false, error: \"Coupon usage limit reached\" };\n    }\n\n    if (coupon.minOrderAmount && orderAmount && orderAmount < coupon.minOrderAmount) {\n      return {\n        valid: false,\n        error: `Minimum order amount of ₹${coupon.minOrderAmount / 100} required`,\n      };\n    }\n\n    return { valid: true, coupon };\n  }\n\n  // Activity Logging Methods\n  async getUserActivities(userId?: string, limit?: number): Promise<UserActivity[]> {\n    let activities = Array.from(this.userActivities.values());\n    \n    if (userId) {\n      activities = activities.filter(a => a.userId === userId);\n    }\n    \n    activities.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    \n    if (limit) {\n      activities = activities.slice(0, limit);\n    }\n    \n    return activities;\n  }\n\n  async getUserActivity(id: string): Promise<UserActivity | undefined> {\n    return this.userActivities.get(id);\n  }\n\n  async createUserActivity(activity: InsertUserActivity): Promise<UserActivity> {\n    const id = randomUUID();\n    const newActivity: UserActivity = {\n      ...activity,\n      id,\n      ipAddress: activity.ipAddress || null,\n      userAgent: activity.userAgent || null,\n      resourceType: activity.resourceType || null,\n      resourceId: activity.resourceId || null,\n      resourceName: activity.resourceName || null,\n      metadata: activity.metadata || null,\n      createdAt: new Date(),\n    };\n    \n    this.userActivities.set(id, newActivity);\n    return newActivity;\n  }\n\n  async getRecentActivities(limit: number = 100): Promise<UserActivity[]> {\n    return this.getUserActivities(undefined, limit);\n  }\n\n  async getUserActivitiesByAction(userId: string, action: string): Promise<UserActivity[]> {\n    return Array.from(this.userActivities.values())\n      .filter(a => a.userId === userId && a.action === action)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":43355},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/pages/networks.tsx":{"content":"import { NetworkCard, NetworkInfo } from \"@/components/network-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n//todo: remove mock functionality\nconst mockNetworks: NetworkInfo[] = [\n  {\n    id: \"net-001\",\n    name: \"vpc-production\",\n    type: \"vpc\",\n    cidr: \"10.0.0.0/16\",\n    gateway: \"10.0.0.1\",\n    vlan: \"100\",\n    vmCount: 12,\n  },\n  {\n    id: \"net-002\",\n    name: \"isolated-dev\",\n    type: \"isolated\",\n    cidr: \"172.16.0.0/24\",\n    gateway: \"172.16.0.1\",\n    vmCount: 5,\n  },\n  {\n    id: \"net-003\",\n    name: \"shared-public\",\n    type: \"shared\",\n    cidr: \"192.168.1.0/24\",\n    gateway: \"192.168.1.1\",\n    vlan: \"200\",\n    vmCount: 8,\n  },\n  {\n    id: \"net-004\",\n    name: \"vpc-staging\",\n    type: \"vpc\",\n    cidr: \"10.1.0.0/16\",\n    gateway: \"10.1.0.1\",\n    vlan: \"150\",\n    vmCount: 6,\n  },\n];\n\nexport default function Networks() {\n  const { toast } = useToast();\n\n  const handleConfigure = (networkId: string) => {\n    console.log(\"Configuring network:\", networkId);\n    toast({\n      title: \"Network Configuration\",\n      description: `Opening configuration for network ${networkId}`,\n    });\n  };\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Networks</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage VPCs, isolated, and shared networks\n          </p>\n        </div>\n        <Button data-testid=\"button-create-network\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Network\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {mockNetworks.map((network) => (\n          <NetworkCard\n            key={network.id}\n            network={network}\n            onConfigure={handleConfigure}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1998},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/metric-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string;\n  icon: LucideIcon;\n  trend?: string;\n  trendUp?: boolean;\n}\n\nexport function MetricCard({ title, value, icon: Icon, trend, trendUp }: MetricCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\" data-testid={`metric-${title.toLowerCase().replace(' ', '-')}`}>{value}</div>\n        {trend && (\n          <p className={`text-xs ${trendUp ? 'text-chart-2' : 'text-chart-3'} mt-1`}>\n            {trend}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":937},"client/src/pages/virtual-machines.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertVirtualMachineSchema, type VirtualMachine, type VMSnapshot } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Search,\n  Play,\n  Square,\n  RotateCw,\n  Trash2,\n  Server,\n  Cpu,\n  MemoryStick,\n  Network,\n  Plus,\n  Camera,\n  History,\n} from \"lucide-react\";\nimport { z } from \"zod\";\n\n// Form schema for VM creation\nconst createVMSchema = insertVirtualMachineSchema\n  .omit({\n    cloudstackId: true,\n    state: true,\n    templateName: true,\n    serviceOfferingName: true,\n    zoneName: true,\n    diskSize: true,\n    ipAddress: true,\n    publicIp: true,\n    networkIds: true,\n    tags: true,\n  })\n  .extend({\n    displayName: z.string().optional(),\n  });\n\ntype CreateVMFormData = z.infer<typeof createVMSchema>;\n\n// State badge colors\nconst getStateBadgeVariant = (state: string) => {\n  const stateMap: Record<string, \"default\" | \"secondary\" | \"destructive\"> = {\n    Running: \"default\",\n    Stopped: \"secondary\",\n    Starting: \"secondary\",\n    Stopping: \"secondary\",\n    Creating: \"secondary\",\n    Error: \"destructive\",\n    Destroyed: \"destructive\",\n  };\n  return stateMap[state] || \"secondary\";\n};\n\nexport default function VirtualMachines() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [snapshotsDialogOpen, setSnapshotsDialogOpen] = useState(false);\n  const [selectedVM, setSelectedVM] = useState<VirtualMachine | null>(null);\n  const [snapshotName, setSnapshotName] = useState(\"\");\n  const [snapshotDescription, setSnapshotDescription] = useState(\"\");\n  const { toast} = useToast();\n\n  // Fetch VMs\n  const { data: vms = [], isLoading: vmsLoading } = useQuery<VirtualMachine[]>({\n    queryKey: [\"/api/vms\"],\n  });\n\n  // Fetch CloudStack metadata for provisioning\n  const { data: zones = [] } = useQuery<any[]>({\n    queryKey: [\"/api/cloudstack/zones\"],\n    enabled: createDialogOpen,\n  });\n\n  const { data: serviceOfferings = [] } = useQuery<any[]>({\n    queryKey: [\"/api/cloudstack/service-offerings\"],\n    enabled: createDialogOpen,\n  });\n\n  const [selectedZone, setSelectedZone] = useState<string>(\"\");\n  const { data: templates = [] } = useQuery<any[]>({\n    queryKey: [\"/api/cloudstack/templates\", selectedZone],\n    enabled: createDialogOpen && !!selectedZone,\n  });\n\n  // Create VM mutation\n  const createVMMutation = useMutation({\n    mutationFn: async (data: CreateVMFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/vms\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vms\"] });\n      setCreateDialogOpen(false);\n      toast({\n        title: \"VM Created\",\n        description: \"Virtual machine has been deployed successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // VM lifecycle mutations\n  const startVMMutation = useMutation({\n    mutationFn: async (vmId: string) => {\n      const res = await apiRequest(\"POST\", `/api/vms/${vmId}/start`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vms\"] });\n      toast({ title: \"VM Started\", description: \"Virtual machine is now running\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const stopVMMutation = useMutation({\n    mutationFn: async (vmId: string) => {\n      const res = await apiRequest(\"POST\", `/api/vms/${vmId}/stop`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vms\"] });\n      toast({ title: \"VM Stopped\", description: \"Virtual machine has been stopped\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const rebootVMMutation = useMutation({\n    mutationFn: async (vmId: string) => {\n      const res = await apiRequest(\"POST\", `/api/vms/${vmId}/reboot`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vms\"] });\n      toast({ title: \"VM Rebooted\", description: \"Virtual machine is rebooting\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const destroyVMMutation = useMutation({\n    mutationFn: async (vmId: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/vms/${vmId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vms\"] });\n      toast({ title: \"VM Destroyed\", description: \"Virtual machine has been deleted\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Snapshot queries and mutations\n  const { data: snapshots = [], isLoading: snapshotsLoading } = useQuery<VMSnapshot[]>({\n    queryKey: [\"/api/vms\", selectedVM?.id, \"snapshots\"],\n    enabled: snapshotsDialogOpen && !!selectedVM,\n  });\n\n  const createSnapshotMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedVM) throw new Error(\"No VM selected\");\n      const res = await apiRequest(\"POST\", `/api/vms/${selectedVM.id}/snapshots`, {\n        name: snapshotName,\n        description: snapshotDescription,\n        snapshotMemory: true,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vms\", selectedVM?.id, \"snapshots\"] });\n      setSnapshotName(\"\");\n      setSnapshotDescription(\"\");\n      toast({ title: \"Snapshot Created\", description: \"VM snapshot created successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteSnapshotMutation = useMutation({\n    mutationFn: async (snapshotId: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/snapshots/${snapshotId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vms\", selectedVM?.id, \"snapshots\"] });\n      toast({ title: \"Snapshot Deleted\", description: \"Snapshot removed successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const restoreSnapshotMutation = useMutation({\n    mutationFn: async (snapshotId: string) => {\n      const res = await apiRequest(\"POST\", `/api/snapshots/${snapshotId}/restore`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vms\", selectedVM?.id, \"snapshots\"] });\n      setSnapshotsDialogOpen(false);\n      toast({ title: \"VM Restored\", description: \"VM restored from snapshot successfully\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Form for creating VM\n  const form = useForm<CreateVMFormData>({\n    resolver: zodResolver(createVMSchema),\n    defaultValues: {\n      name: \"\",\n      displayName: \"\",\n      templateId: \"\",\n      serviceOfferingId: \"\",\n      zoneId: \"\",\n      cpu: 1,\n      memory: 512,\n    },\n  });\n\n  const onSubmit = (data: CreateVMFormData) => {\n    createVMMutation.mutate(data);\n  };\n\n  // Filter VMs by search query\n  const filteredVMs = vms.filter(\n    (vm) =>\n      vm.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      vm.displayName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      vm.ipAddress?.includes(searchQuery) ||\n      vm.state.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Virtual Machines</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage and monitor your virtual machine instances\n          </p>\n        </div>\n        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-vm\">\n              <Plus className=\"h-4 w-4\" />\n              Create VM\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Deploy Virtual Machine</DialogTitle>\n              <DialogDescription>\n                Configure and deploy a new virtual machine instance\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"web-server-01\"\n                            {...field}\n                            data-testid=\"input-vm-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"displayName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Display Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Web Server 01\"\n                            {...field}\n                            data-testid=\"input-vm-display-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"zoneId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Zone</FormLabel>\n                      <Select\n                        onValueChange={(value) => {\n                          field.onChange(value);\n                          setSelectedZone(value);\n                          // Reset template when zone changes to prevent mismatch\n                          form.setValue(\"templateId\", \"\");\n                        }}\n                        value={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-zone\">\n                            <SelectValue placeholder=\"Select a zone\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {zones.map((zone: any) => (\n                            <SelectItem key={zone.id} value={zone.id}>\n                              {zone.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"templateId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Template</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-template\">\n                            <SelectValue placeholder=\"Select OS template\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {templates.map((template: any) => (\n                            <SelectItem key={template.id} value={template.id}>\n                              {template.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"serviceOfferingId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Service Offering</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-service-offering\">\n                            <SelectValue placeholder=\"Select compute plan\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {serviceOfferings.map((offering: any) => (\n                            <SelectItem key={offering.id} value={offering.id}>\n                              {offering.name} ({offering.cpunumber} CPU, {offering.memory}MB RAM)\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"cpu\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>CPU Cores</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            data-testid=\"input-cpu\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"memory\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Memory (MB)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            data-testid=\"input-memory\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex gap-2 justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setCreateDialogOpen(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createVMMutation.isPending}\n                    data-testid=\"button-deploy-vm\"\n                  >\n                    {createVMMutation.isPending ? \"Deploying...\" : \"Deploy VM\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"flex items-center gap-4\">\n        <div className=\"relative flex-1 max-w-sm\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search VMs by name, IP, or state...\"\n            className=\"pl-9\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            data-testid=\"input-search-vms\"\n          />\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Server className=\"h-5 w-5\" />\n            Virtual Machines ({filteredVMs.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {vmsLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading VMs...</div>\n          ) : filteredVMs.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              {vms.length === 0 ? \"No virtual machines yet. Create one to get started.\" : \"No VMs match your search.\"}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>State</TableHead>\n                  <TableHead>IP Address</TableHead>\n                  <TableHead>Resources</TableHead>\n                  <TableHead>Zone</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredVMs.map((vm) => (\n                  <TableRow key={vm.id} data-testid={`row-vm-${vm.id}`}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\" data-testid={`text-vm-name-${vm.id}`}>\n                          {vm.displayName || vm.name}\n                        </div>\n                        {vm.displayName && vm.displayName !== vm.name && (\n                          <div className=\"text-sm text-muted-foreground\">{vm.name}</div>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={getStateBadgeVariant(vm.state)} data-testid={`badge-state-${vm.id}`}>\n                        {vm.state}\n                      </Badge>\n                    </TableCell>\n                    <TableCell data-testid={`text-ip-${vm.id}`}>\n                      {vm.ipAddress || \"—\"}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col gap-1 text-sm\">\n                        <div className=\"flex items-center gap-1\">\n                          <Cpu className=\"h-3 w-3 text-muted-foreground\" />\n                          <span>{vm.cpu} CPU</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <MemoryStick className=\"h-3 w-3 text-muted-foreground\" />\n                          <span>{vm.memory}MB</span>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell data-testid={`text-zone-${vm.id}`}>\n                      {vm.zoneName || vm.zoneId}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-1\">\n                        {vm.state === \"Stopped\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => startVMMutation.mutate(vm.id)}\n                            disabled={startVMMutation.isPending}\n                            data-testid={`button-start-${vm.id}`}\n                          >\n                            <Play className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                        {vm.state === \"Running\" && (\n                          <>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => stopVMMutation.mutate(vm.id)}\n                              disabled={stopVMMutation.isPending}\n                              data-testid={`button-stop-${vm.id}`}\n                            >\n                              <Square className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => rebootVMMutation.mutate(vm.id)}\n                              disabled={rebootVMMutation.isPending}\n                              data-testid={`button-reboot-${vm.id}`}\n                            >\n                              <RotateCw className=\"h-4 w-4\" />\n                            </Button>\n                          </>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => {\n                            setSelectedVM(vm);\n                            setSnapshotsDialogOpen(true);\n                          }}\n                          data-testid={`button-snapshots-${vm.id}`}\n                        >\n                          <Camera className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => {\n                            if (confirm(`Are you sure you want to destroy ${vm.displayName || vm.name}?`)) {\n                              destroyVMMutation.mutate(vm.id);\n                            }\n                          }}\n                          disabled={destroyVMMutation.isPending}\n                          data-testid={`button-destroy-${vm.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-destructive\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Snapshots Dialog */}\n      <Dialog open={snapshotsDialogOpen} onOpenChange={setSnapshotsDialogOpen}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>VM Snapshots - {selectedVM?.displayName || selectedVM?.name}</DialogTitle>\n            <DialogDescription>\n              Create and manage snapshots for quick backup and restore\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Create Snapshot Form */}\n            <div className=\"border rounded-lg p-4 space-y-3\">\n              <h3 className=\"font-medium flex items-center gap-2\">\n                <Camera className=\"h-4 w-4\" />\n                Create New Snapshot\n              </h3>\n              <div className=\"grid gap-3\">\n                <div>\n                  <Label htmlFor=\"snapshot-name\">Snapshot Name</Label>\n                  <Input\n                    id=\"snapshot-name\"\n                    value={snapshotName}\n                    onChange={(e) => setSnapshotName(e.target.value)}\n                    placeholder=\"e.g., before-update-2025\"\n                    data-testid=\"input-snapshot-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"snapshot-description\">Description (optional)</Label>\n                  <Input\n                    id=\"snapshot-description\"\n                    value={snapshotDescription}\n                    onChange={(e) => setSnapshotDescription(e.target.value)}\n                    placeholder=\"e.g., Snapshot before system update\"\n                    data-testid=\"input-snapshot-description\"\n                  />\n                </div>\n                <Button\n                  onClick={() => createSnapshotMutation.mutate()}\n                  disabled={!snapshotName || createSnapshotMutation.isPending}\n                  data-testid=\"button-create-snapshot\"\n                >\n                  {createSnapshotMutation.isPending ? \"Creating...\" : \"Create Snapshot\"}\n                </Button>\n              </div>\n            </div>\n\n            {/* Existing Snapshots */}\n            <div>\n              <h3 className=\"font-medium mb-3\">Existing Snapshots</h3>\n              {snapshotsLoading ? (\n                <div className=\"text-center py-8 text-muted-foreground\">Loading snapshots...</div>\n              ) : snapshots.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No snapshots yet. Create your first snapshot above.\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>State</TableHead>\n                      <TableHead>Created</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {snapshots.map((snapshot) => (\n                      <TableRow key={snapshot.id} data-testid={`row-snapshot-${snapshot.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`text-snapshot-name-${snapshot.id}`}>\n                          {snapshot.name}\n                        </TableCell>\n                        <TableCell data-testid={`text-snapshot-description-${snapshot.id}`}>\n                          {snapshot.description || \"—\"}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\" data-testid={`badge-snapshot-state-${snapshot.id}`}>\n                            {snapshot.state}\n                          </Badge>\n                        </TableCell>\n                        <TableCell data-testid={`text-snapshot-created-${snapshot.id}`}>\n                          {new Date(snapshot.createdAt).toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-1\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => restoreSnapshotMutation.mutate(snapshot.id)}\n                              disabled={restoreSnapshotMutation.isPending}\n                              data-testid={`button-restore-${snapshot.id}`}\n                            >\n                              <History className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => deleteSnapshotMutation.mutate(snapshot.id)}\n                              disabled={deleteSnapshotMutation.isPending}\n                              data-testid={`button-delete-snapshot-${snapshot.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":28950},"client/src/components/examples/VMTable.tsx":{"content":"import { VMTable } from '../vm-table';\n\nconst mockVMs = [\n  {\n    id: \"vm-001\",\n    name: \"web-server-01\",\n    status: \"running\" as const,\n    ip: \"10.0.1.10\",\n    template: \"Ubuntu 22.04 LTS\",\n    cpu: \"2 vCPU\",\n    memory: \"4GB\",\n    zone: \"Zone 1\",\n  },\n  {\n    id: \"vm-002\",\n    name: \"db-primary\",\n    status: \"stopped\" as const,\n    ip: \"10.0.1.15\",\n    template: \"CentOS 8\",\n    cpu: \"4 vCPU\",\n    memory: \"8GB\",\n    zone: \"Zone 1\",\n  },\n];\n\nexport default function VMTableExample() {\n  return (\n    <VMTable \n      vms={mockVMs} \n      onAction={(action, id) => console.log(action, id)}\n    />\n  );\n}\n","size_bytes":609},"client/src/pages/kubernetes.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Plus,\n  Search,\n  Play,\n  Square,\n  Trash2,\n  Terminal,\n  Activity,\n  Server,\n  Boxes,\n  Download,\n  Settings,\n  AlertTriangle,\n  CheckCircle2,\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { KubernetesCluster } from \"@shared/schema\";\n\nexport default function Kubernetes() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [newCluster, setNewCluster] = useState({\n    name: \"\",\n    version: \"v1.28.3\",\n    region: \"us-east-1\",\n    masterNodes: \"3\",\n    workerNodes: \"3\",\n    instanceType: \"m5.large\",\n    autoHealing: true,\n    autoScaling: true,\n  });\n\n  const { data: clusters = [], isLoading } = useQuery<KubernetesCluster[]>({\n    queryKey: [\"/api/kubernetes/clusters\"],\n  });\n\n  const createClusterMutation = useMutation({\n    mutationFn: async (data: typeof newCluster) => {\n      return await apiRequest(\"POST\", \"/api/kubernetes/clusters\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/kubernetes/clusters\"] });\n      toast({\n        title: \"Cluster Created\",\n        description: `Kubernetes cluster \"${newCluster.name}\" has been created successfully.`,\n      });\n      setCreateDialogOpen(false);\n      setNewCluster({\n        name: \"\",\n        version: \"v1.28.3\",\n        region: \"us-east-1\",\n        masterNodes: \"3\",\n        workerNodes: \"3\",\n        instanceType: \"m5.large\",\n        autoHealing: true,\n        autoScaling: true,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create cluster\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateClusterMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<KubernetesCluster> }) => {\n      return await apiRequest(\"PATCH\", `/api/kubernetes/clusters/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/kubernetes/clusters\"] });\n      toast({\n        title: \"Cluster Updated\",\n        description: \"Cluster has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update cluster\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteClusterMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/kubernetes/clusters/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/kubernetes/clusters\"] });\n      toast({\n        title: \"Cluster Deleted\",\n        description: \"Cluster has been deleted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete cluster\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredClusters = clusters.filter((cluster) =>\n    cluster.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"running\":\n        return \"default\";\n      case \"stopped\":\n        return \"secondary\";\n      case \"creating\":\n        return \"outline\";\n      case \"error\":\n        return \"destructive\";\n      case \"updating\":\n        return \"outline\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getHealthColor = (health: string) => {\n    switch (health) {\n      case \"healthy\":\n        return \"text-green-500\";\n      case \"warning\":\n        return \"text-yellow-500\";\n      case \"critical\":\n        return \"text-red-500\";\n      default:\n        return \"text-muted-foreground\";\n    }\n  };\n\n  const handleCreateCluster = () => {\n    createClusterMutation.mutate(newCluster);\n  };\n\n  const handleAction = (action: string, cluster: KubernetesCluster) => {\n    if (action === \"Start\") {\n      updateClusterMutation.mutate({ id: cluster.id, data: { status: \"running\" } });\n    } else if (action === \"Stop\") {\n      updateClusterMutation.mutate({ id: cluster.id, data: { status: \"stopped\" } });\n    } else if (action === \"Delete\") {\n      if (confirm(`Are you sure you want to delete \"${cluster.name}\"?`)) {\n        deleteClusterMutation.mutate(cluster.id);\n      }\n    } else {\n      toast({\n        title: action,\n        description: `${action} action for \"${cluster.name}\" initiated.`,\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Kubernetes Clusters</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your Kubernetes-as-a-Service clusters\n          </p>\n        </div>\n        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-cluster\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Cluster\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create Kubernetes Cluster</DialogTitle>\n              <DialogDescription>\n                Deploy a production-ready Kubernetes cluster with one-click\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"cluster-name\">Cluster Name</Label>\n                <Input\n                  id=\"cluster-name\"\n                  placeholder=\"my-cluster\"\n                  value={newCluster.name}\n                  onChange={(e) => setNewCluster({ ...newCluster, name: e.target.value })}\n                  data-testid=\"input-cluster-name\"\n                />\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"k8s-version\">Kubernetes Version</Label>\n                  <Select\n                    value={newCluster.version}\n                    onValueChange={(value) => setNewCluster({ ...newCluster, version: value })}\n                  >\n                    <SelectTrigger id=\"k8s-version\" data-testid=\"select-k8s-version\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"v1.28.3\">v1.28.3 (Latest)</SelectItem>\n                      <SelectItem value=\"v1.27.8\">v1.27.8</SelectItem>\n                      <SelectItem value=\"v1.26.11\">v1.26.11</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"region\">Region</Label>\n                  <Select\n                    value={newCluster.region}\n                    onValueChange={(value) => setNewCluster({ ...newCluster, region: value })}\n                  >\n                    <SelectTrigger id=\"region\" data-testid=\"select-region\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"us-east-1\">US East (N. Virginia)</SelectItem>\n                      <SelectItem value=\"us-west-2\">US West (Oregon)</SelectItem>\n                      <SelectItem value=\"eu-central-1\">EU (Frankfurt)</SelectItem>\n                      <SelectItem value=\"ap-south-1\">Asia Pacific (Mumbai)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"master-nodes\">Master Nodes</Label>\n                  <Select\n                    value={newCluster.masterNodes}\n                    onValueChange={(value) => setNewCluster({ ...newCluster, masterNodes: value })}\n                  >\n                    <SelectTrigger id=\"master-nodes\" data-testid=\"select-master-nodes\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 (Development)</SelectItem>\n                      <SelectItem value=\"3\">3 (Production HA)</SelectItem>\n                      <SelectItem value=\"5\">5 (High Availability)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"worker-nodes\">Worker Nodes</Label>\n                  <Input\n                    id=\"worker-nodes\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"20\"\n                    value={newCluster.workerNodes}\n                    onChange={(e) => setNewCluster({ ...newCluster, workerNodes: e.target.value })}\n                    data-testid=\"input-worker-nodes\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"instance-type\">Node Instance Type</Label>\n                <Select\n                  value={newCluster.instanceType}\n                  onValueChange={(value) => setNewCluster({ ...newCluster, instanceType: value })}\n                >\n                  <SelectTrigger id=\"instance-type\" data-testid=\"select-instance-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"t3.medium\">t3.medium (2 vCPU, 4 GB RAM)</SelectItem>\n                    <SelectItem value=\"t3.large\">t3.large (2 vCPU, 8 GB RAM)</SelectItem>\n                    <SelectItem value=\"m5.large\">m5.large (2 vCPU, 8 GB RAM)</SelectItem>\n                    <SelectItem value=\"m5.xlarge\">m5.xlarge (4 vCPU, 16 GB RAM)</SelectItem>\n                    <SelectItem value=\"m5.2xlarge\">m5.2xlarge (8 vCPU, 32 GB RAM)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Auto-Healing</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Automatically replace unhealthy nodes\n                  </p>\n                </div>\n                <Button\n                  variant={newCluster.autoHealing ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() =>\n                    setNewCluster({ ...newCluster, autoHealing: !newCluster.autoHealing })\n                  }\n                  data-testid=\"button-toggle-autohealing\"\n                >\n                  {newCluster.autoHealing ? \"Enabled\" : \"Disabled\"}\n                </Button>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Auto-Scaling</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Scale worker nodes based on load\n                  </p>\n                </div>\n                <Button\n                  variant={newCluster.autoScaling ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() =>\n                    setNewCluster({ ...newCluster, autoScaling: !newCluster.autoScaling })\n                  }\n                  data-testid=\"button-toggle-autoscaling\"\n                >\n                  {newCluster.autoScaling ? \"Enabled\" : \"Disabled\"}\n                </Button>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCreateDialogOpen(false)}\n                data-testid=\"button-cancel-create\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateCluster}\n                disabled={!newCluster.name || createClusterMutation.isPending}\n                data-testid=\"button-confirm-create\"\n              >\n                {createClusterMutation.isPending ? \"Creating...\" : \"Create Cluster\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Clusters</CardTitle>\n            <Boxes className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-clusters\">\n              {clusters.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {clusters.filter((c) => c.status === \"running\").length} running\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Nodes</CardTitle>\n            <Server className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-nodes\">\n              {clusters.reduce((sum, c) => sum + c.masterNodes + c.workerNodes, 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Across all clusters</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Running Pods</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-running-pods\">\n              {clusters.reduce((sum, c) => sum + c.podsRunning, 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Active workloads</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Kubernetes Clusters</CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search clusters...\"\n                  className=\"pl-9 w-64\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-clusters\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Cluster Name</TableHead>\n                <TableHead>Version</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Health</TableHead>\n                <TableHead>Nodes</TableHead>\n                <TableHead>Resources</TableHead>\n                <TableHead>Pods</TableHead>\n                <TableHead>Region</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredClusters.map((cluster) => (\n                <TableRow key={cluster.id} data-testid={`row-cluster-${cluster.id}`}>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{cluster.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">{cluster.id}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <code className=\"text-xs\">{cluster.version}</code>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={getStatusColor(cluster.status)} data-testid={`badge-status-${cluster.id}`}>\n                      {cluster.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      {cluster.health === \"healthy\" && (\n                        <CheckCircle2 className={`h-4 w-4 ${getHealthColor(cluster.health)}`} />\n                      )}\n                      {cluster.health !== \"healthy\" && (\n                        <AlertTriangle className={`h-4 w-4 ${getHealthColor(cluster.health)}`} />\n                      )}\n                      <span className=\"text-sm capitalize\">{cluster.health}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      <p>\n                        <span className=\"font-medium\">{cluster.masterNodes}</span> master\n                      </p>\n                      <p>\n                        <span className=\"font-medium\">{cluster.workerNodes}</span> worker\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"space-y-2 min-w-32\">\n                      <div>\n                        <div className=\"flex items-center justify-between text-xs mb-1\">\n                          <span>CPU</span>\n                          <span className=\"text-muted-foreground\">\n                            {cluster.cpuUsed}/{cluster.cpuTotal} cores\n                          </span>\n                        </div>\n                        <Progress value={(cluster.cpuUsed / cluster.cpuTotal) * 100} />\n                      </div>\n                      <div>\n                        <div className=\"flex items-center justify-between text-xs mb-1\">\n                          <span>Memory</span>\n                          <span className=\"text-muted-foreground\">\n                            {cluster.memoryUsed}/{cluster.memoryTotal} GB\n                          </span>\n                        </div>\n                        <Progress value={(cluster.memoryUsed / cluster.memoryTotal) * 100} />\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      <span className=\"font-medium\">{cluster.podsRunning}</span>\n                      <span className=\"text-muted-foreground\">/{cluster.podsTotal}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{cluster.region}</span>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex items-center justify-end gap-2\">\n                      {cluster.status === \"running\" && (\n                        <>\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => handleAction(\"Stop\", cluster)}\n                            data-testid={`button-stop-${cluster.id}`}\n                          >\n                            <Square className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => handleAction(\"Access\", cluster)}\n                            data-testid={`button-terminal-${cluster.id}`}\n                          >\n                            <Terminal className=\"h-4 w-4\" />\n                          </Button>\n                        </>\n                      )}\n                      {cluster.status === \"stopped\" && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => handleAction(\"Start\", cluster)}\n                          data-testid={`button-start-${cluster.id}`}\n                        >\n                          <Play className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleAction(\"Configure\", cluster)}\n                        data-testid={`button-settings-${cluster.id}`}\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleAction(\"Download Kubeconfig\", cluster)}\n                        data-testid={`button-download-${cluster.id}`}\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleAction(\"Delete\", cluster)}\n                        disabled={deleteClusterMutation.isPending}\n                        data-testid={`button-delete-${cluster.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {filteredClusters.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Boxes className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No clusters found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm\n                  ? \"Try adjusting your search\"\n                  : \"Get started by creating your first Kubernetes cluster\"}\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => setCreateDialogOpen(true)} data-testid=\"button-create-first-cluster\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Cluster\n                </Button>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":23844},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/dns.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Plus,\n  Search,\n  Trash2,\n  Globe,\n  Shield,\n  RefreshCw,\n  Settings,\n  CheckCircle2,\n  Clock,\n  AlertCircle,\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { DnsDomain, DnsRecord } from \"@shared/schema\";\n\nexport default function DNS() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedDomain, setSelectedDomain] = useState<DnsDomain | null>(null);\n  const [createDomainOpen, setCreateDomainOpen] = useState(false);\n  const [createRecordOpen, setCreateRecordOpen] = useState(false);\n  const [newDomain, setNewDomain] = useState({\n    name: \"\",\n    dnssec: false,\n  });\n  const [newRecord, setNewRecord] = useState({\n    type: \"A\" as DnsRecord[\"type\"],\n    name: \"\",\n    value: \"\",\n    ttl: \"3600\",\n    priority: \"\",\n  });\n\n  // Fetch DNS domains\n  const { data: domains = [], isLoading: domainsLoading } = useQuery<DnsDomain[]>({\n    queryKey: [\"/api/dns/domains\"],\n  });\n\n  // Fetch DNS records for selected domain\n  const { data: records = [], isLoading: recordsLoading } = useQuery<DnsRecord[]>({\n    queryKey: [\"/api/dns/records\", selectedDomain?.id],\n    enabled: !!selectedDomain,\n  });\n\n  // Create domain mutation\n  const createDomainMutation = useMutation({\n    mutationFn: async (data: { name: string; dnssec: boolean }) => {\n      return await apiRequest(\"POST\", \"/api/dns/domains\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dns/domains\"] });\n      toast({\n        title: \"Domain created\",\n        description: \"DNS domain has been created successfully\",\n      });\n      setCreateDomainOpen(false);\n      setNewDomain({ name: \"\", dnssec: false });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create domain\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete domain mutation\n  const deleteDomainMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/dns/domains/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dns/domains\"] });\n      if (selectedDomain) {\n        setSelectedDomain(null);\n      }\n      toast({\n        title: \"Domain deleted\",\n        description: \"DNS domain has been deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete domain\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create record mutation\n  const createRecordMutation = useMutation({\n    mutationFn: async (data: {\n      domainId: string;\n      type: string;\n      name: string;\n      value: string;\n      ttl: number;\n      priority?: number;\n    }) => {\n      return await apiRequest(\"POST\", \"/api/dns/records\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dns/records\", selectedDomain?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dns/domains\"] });\n      toast({\n        title: \"Record created\",\n        description: \"DNS record has been created successfully\",\n      });\n      setCreateRecordOpen(false);\n      setNewRecord({ type: \"A\", name: \"\", value: \"\", ttl: \"3600\", priority: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create record\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete record mutation\n  const deleteRecordMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/dns/records/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dns/records\", selectedDomain?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dns/domains\"] });\n      toast({\n        title: \"Record deleted\",\n        description: \"DNS record has been deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete record\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredDomains = domains.filter((domain) =>\n    domain.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const currentDomainRecords = records;\n\n  const handleCreateDomain = () => {\n    if (!newDomain.name) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a domain name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createDomainMutation.mutate(newDomain);\n  };\n\n  const handleDeleteDomain = (domain: DnsDomain) => {\n    if (confirm(`Are you sure you want to delete \"${domain.name}\" and all its DNS records?`)) {\n      deleteDomainMutation.mutate(domain.id);\n    }\n  };\n\n  const handleCreateRecord = () => {\n    if (!selectedDomain) return;\n\n    if (!newRecord.name || !newRecord.value) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createRecordMutation.mutate({\n      domainId: selectedDomain.id,\n      type: newRecord.type,\n      name: newRecord.name,\n      value: newRecord.value,\n      ttl: parseInt(newRecord.ttl),\n      priority: newRecord.priority ? parseInt(newRecord.priority) : undefined,\n    });\n  };\n\n  const handleDeleteRecord = (record: DnsRecord) => {\n    if (confirm(`Are you sure you want to delete this ${record.type} record?`)) {\n      deleteRecordMutation.mutate(record.id);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"default\";\n      case \"pending\":\n        return \"outline\";\n      case \"error\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return CheckCircle2;\n      case \"pending\":\n        return Clock;\n      case \"error\":\n        return AlertCircle;\n      default:\n        return Clock;\n    }\n  };\n\n  const totalRecords = domains.reduce((sum, d) => sum + d.recordCount, 0);\n  const activeDomains = domains.filter((d) => d.status === \"active\").length;\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">DNS Management</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage domains, zones, and DNS records with DNSSEC support\n          </p>\n        </div>\n        <Dialog open={createDomainOpen} onOpenChange={setCreateDomainOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-domain\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Domain\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Add DNS Zone</DialogTitle>\n              <DialogDescription>\n                Create a new DNS zone for your domain\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"domain-name\">Domain Name</Label>\n                <Input\n                  id=\"domain-name\"\n                  placeholder=\"example.com\"\n                  value={newDomain.name}\n                  onChange={(e) => setNewDomain({ ...newDomain, name: e.target.value })}\n                  data-testid=\"input-domain-name\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">DNSSEC</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Enable DNS Security Extensions\n                  </p>\n                </div>\n                <Button\n                  variant={newDomain.dnssec ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setNewDomain({ ...newDomain, dnssec: !newDomain.dnssec })}\n                  data-testid=\"button-toggle-dnssec\"\n                >\n                  {newDomain.dnssec ? \"Enabled\" : \"Disabled\"}\n                </Button>\n              </div>\n              <div className=\"bg-muted p-4 rounded-lg\">\n                <p className=\"text-sm font-medium mb-2\">Nameservers</p>\n                <div className=\"space-y-1 text-sm text-muted-foreground\">\n                  <p>ns1.akashone.com</p>\n                  <p>ns2.akashone.com</p>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Point your domain to these nameservers at your registrar\n                </p>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCreateDomainOpen(false)}\n                data-testid=\"button-cancel-create\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateDomain}\n                disabled={!newDomain.name}\n                data-testid=\"button-confirm-create\"\n              >\n                Add Domain\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Domains</CardTitle>\n            <Globe className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-domains\">\n              {domains.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {activeDomains} active\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">DNS Records</CardTitle>\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-records\">\n              {totalRecords}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Configured records</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">DNSSEC Enabled</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-dnssec-enabled\">\n              {domains.filter((d) => d.dnssec).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Secured domains</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Propagation</CardTitle>\n            <RefreshCw className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-500\" data-testid=\"text-propagation\">\n              100%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">All records synced</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-4 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>DNS Zones</CardTitle>\n              <div className=\"relative w-64\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search domains...\"\n                  className=\"pl-9\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-domains\"\n                />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {filteredDomains.map((domain) => {\n                const StatusIcon = getStatusIcon(domain.status);\n                return (\n                  <Card\n                    key={domain.id}\n                    className={`cursor-pointer hover-elevate ${\n                      selectedDomain?.id === domain.id ? \"border-primary\" : \"\"\n                    }`}\n                    onClick={() => setSelectedDomain(domain)}\n                    data-testid={`card-domain-${domain.id}`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start gap-3 flex-1\">\n                          <div className=\"p-2 rounded-lg bg-muted\">\n                            <Globe className=\"h-5 w-5 text-blue-500\" />\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <p className=\"font-medium truncate\">{domain.name}</p>\n                              <Badge variant={getStatusColor(domain.status)} className=\"text-xs\">\n                                <StatusIcon className=\"h-3 w-3 mr-1\" />\n                                {domain.status}\n                              </Badge>\n                            </div>\n                            <div className=\"text-xs text-muted-foreground space-y-1\">\n                              <p>{domain.recordCount} records</p>\n                              <div className=\"flex gap-2\">\n                                {domain.dnssec && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    <Shield className=\"h-3 w-3 mr-1\" />\n                                    DNSSEC\n                                  </Badge>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleDeleteDomain(domain);\n                          }}\n                          data-testid={`button-delete-${domain.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n              {filteredDomains.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <Globe className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No domains found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchTerm ? \"Try adjusting your search\" : \"Add your first domain\"}\n                  </p>\n                  {!searchTerm && (\n                    <Button onClick={() => setCreateDomainOpen(true)} data-testid=\"button-add-first\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Domain\n                    </Button>\n                  )}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>\n                {selectedDomain ? `Records for ${selectedDomain.name}` : \"Select a Domain\"}\n              </CardTitle>\n              {selectedDomain && (\n                <Dialog open={createRecordOpen} onOpenChange={setCreateRecordOpen}>\n                  <DialogTrigger asChild>\n                    <Button size=\"sm\" data-testid=\"button-add-record\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Record\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Add DNS Record</DialogTitle>\n                      <DialogDescription>\n                        Create a new DNS record for {selectedDomain.name}\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"grid gap-4 py-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"grid gap-2\">\n                          <Label htmlFor=\"record-type\">Record Type</Label>\n                          <Select\n                            value={newRecord.type}\n                            onValueChange={(value: DnsRecord[\"type\"]) =>\n                              setNewRecord({ ...newRecord, type: value })\n                            }\n                          >\n                            <SelectTrigger id=\"record-type\" data-testid=\"select-record-type\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"A\">A (IPv4)</SelectItem>\n                              <SelectItem value=\"AAAA\">AAAA (IPv6)</SelectItem>\n                              <SelectItem value=\"CNAME\">CNAME (Alias)</SelectItem>\n                              <SelectItem value=\"MX\">MX (Mail)</SelectItem>\n                              <SelectItem value=\"TXT\">TXT (Text)</SelectItem>\n                              <SelectItem value=\"NS\">NS (Nameserver)</SelectItem>\n                              <SelectItem value=\"SRV\">SRV (Service)</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"grid gap-2\">\n                          <Label htmlFor=\"record-ttl\">TTL (seconds)</Label>\n                          <Select\n                            value={newRecord.ttl}\n                            onValueChange={(value) => setNewRecord({ ...newRecord, ttl: value })}\n                          >\n                            <SelectTrigger id=\"record-ttl\" data-testid=\"select-ttl\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"300\">5 minutes</SelectItem>\n                              <SelectItem value=\"1800\">30 minutes</SelectItem>\n                              <SelectItem value=\"3600\">1 hour</SelectItem>\n                              <SelectItem value=\"21600\">6 hours</SelectItem>\n                              <SelectItem value=\"86400\">24 hours</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      <div className=\"grid gap-2\">\n                        <Label htmlFor=\"record-name\">Name</Label>\n                        <Input\n                          id=\"record-name\"\n                          placeholder=\"@ or subdomain\"\n                          value={newRecord.name}\n                          onChange={(e) => setNewRecord({ ...newRecord, name: e.target.value })}\n                          data-testid=\"input-record-name\"\n                        />\n                      </div>\n                      <div className=\"grid gap-2\">\n                        <Label htmlFor=\"record-value\">Value</Label>\n                        <Input\n                          id=\"record-value\"\n                          placeholder={\n                            newRecord.type === \"A\"\n                              ? \"192.168.1.1\"\n                              : newRecord.type === \"CNAME\"\n                              ? \"example.com\"\n                              : \"Enter value\"\n                          }\n                          value={newRecord.value}\n                          onChange={(e) => setNewRecord({ ...newRecord, value: e.target.value })}\n                          data-testid=\"input-record-value\"\n                        />\n                      </div>\n                      {newRecord.type === \"MX\" && (\n                        <div className=\"grid gap-2\">\n                          <Label htmlFor=\"record-priority\">Priority</Label>\n                          <Input\n                            id=\"record-priority\"\n                            type=\"number\"\n                            placeholder=\"10\"\n                            value={newRecord.priority}\n                            onChange={(e) =>\n                              setNewRecord({ ...newRecord, priority: e.target.value })\n                            }\n                            data-testid=\"input-record-priority\"\n                          />\n                        </div>\n                      )}\n                    </div>\n                    <DialogFooter>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setCreateRecordOpen(false)}\n                        data-testid=\"button-cancel-record\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={handleCreateRecord}\n                        disabled={!newRecord.name || !newRecord.value}\n                        data-testid=\"button-confirm-record\"\n                      >\n                        Add Record\n                      </Button>\n                    </DialogFooter>\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            {selectedDomain ? (\n              currentDomainRecords.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Value</TableHead>\n                      <TableHead>TTL</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {currentDomainRecords.map((record) => (\n                      <TableRow key={record.id} data-testid={`row-record-${record.id}`}>\n                        <TableCell>\n                          <Badge variant=\"outline\">{record.type}</Badge>\n                        </TableCell>\n                        <TableCell className=\"font-mono text-sm\">{record.name}</TableCell>\n                        <TableCell className=\"font-mono text-sm truncate max-w-xs\">\n                          {record.value}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {record.ttl}s\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => handleDeleteRecord(record)}\n                            data-testid={`button-delete-record-${record.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Settings className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No DNS records</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Add DNS records to configure your domain\n                  </p>\n                  <Button onClick={() => setCreateRecordOpen(true)} data-testid=\"button-add-first-record\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Record\n                  </Button>\n                </div>\n              )\n            ) : (\n              <div className=\"text-center py-12\">\n                <Globe className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No domain selected</h3>\n                <p className=\"text-muted-foreground\">\n                  Select a domain from the left to manage its DNS records\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":26274},"client/src/pages/resellers.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Store, Users, IndianRupee, Settings } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n//todo: remove mock functionality\nconst mockResellers = [\n  {\n    id: \"res-001\",\n    name: \"CloudTech Solutions\",\n    domain: \"cloudtech.example.com\",\n    customersCount: 45,\n    activeVMs: 128,\n    monthlyRevenue: 245000,\n    margin: 25,\n    status: \"active\",\n    gstin: \"29ABCDE1234F1Z5\",\n  },\n  {\n    id: \"res-002\",\n    name: \"Digital Infrastructure Co\",\n    domain: \"digicloud.example.com\",\n    customersCount: 32,\n    activeVMs: 89,\n    monthlyRevenue: 178000,\n    margin: 20,\n    status: \"active\",\n    gstin: \"27FGHIJ5678K2L6\",\n  },\n  {\n    id: \"res-003\",\n    name: \"Enterprise Cloud Services\",\n    domain: \"entcloud.example.com\",\n    customersCount: 18,\n    activeVMs: 56,\n    monthlyRevenue: 124000,\n    margin: 30,\n    status: \"active\",\n    gstin: \"19MNOPQ9012R3S4\",\n  },\n];\n\nexport default function Resellers() {\n  const { toast } = useToast();\n\n  const handleCreateReseller = () => {\n    console.log(\"Creating new reseller\");\n    toast({\n      title: \"Create Reseller\",\n      description: \"Opening reseller creation wizard\",\n    });\n  };\n\n  const handleConfigureReseller = (resellerId: string) => {\n    console.log(\"Configuring reseller:\", resellerId);\n    toast({\n      title: \"Reseller Configuration\",\n      description: \"Opening white-label settings\",\n    });\n  };\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Reseller Management</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage reseller partners and white-label configurations\n          </p>\n        </div>\n        <Button onClick={handleCreateReseller} data-testid=\"button-create-reseller\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Reseller\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Resellers</p>\n            <Store className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-resellers\">3</div>\n            <p className=\"text-xs text-chart-2 mt-1\">All active</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Customers</p>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">95</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Across all resellers</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Revenue</p>\n            <IndianRupee className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₹5.47L</div>\n            <p className=\"text-xs text-chart-2 mt-1\">+12% from last month</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Avg. Margin</p>\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">25%</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Average across resellers</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-base font-medium\">Active Resellers</h3>\n            <Badge variant=\"outline\" className=\"bg-chart-2/10 text-chart-2 border-chart-2/20\">\n              {mockResellers.length} Active\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Reseller Name</TableHead>\n                  <TableHead>White-Label Domain</TableHead>\n                  <TableHead>GSTIN</TableHead>\n                  <TableHead className=\"text-right\">Customers</TableHead>\n                  <TableHead className=\"text-right\">Active VMs</TableHead>\n                  <TableHead className=\"text-right\">Monthly Revenue</TableHead>\n                  <TableHead className=\"text-right\">Margin %</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {mockResellers.map((reseller) => (\n                  <TableRow key={reseller.id} className=\"hover-elevate\">\n                    <TableCell className=\"font-medium\" data-testid={`reseller-name-${reseller.id}`}>\n                      {reseller.name}\n                    </TableCell>\n                    <TableCell className=\"font-mono text-sm text-muted-foreground\">\n                      {reseller.domain}\n                    </TableCell>\n                    <TableCell className=\"font-mono text-sm\">\n                      {reseller.gstin}\n                    </TableCell>\n                    <TableCell className=\"text-right\">{reseller.customersCount}</TableCell>\n                    <TableCell className=\"text-right\">{reseller.activeVMs}</TableCell>\n                    <TableCell className=\"text-right font-mono\">\n                      ₹{reseller.monthlyRevenue.toLocaleString('en-IN')}\n                    </TableCell>\n                    <TableCell className=\"text-right font-medium\">\n                      {reseller.margin}%\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant=\"outline\"\n                        className=\"bg-chart-2/10 text-chart-2 border-chart-2/20\"\n                      >\n                        {reseller.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleConfigureReseller(reseller.id)}\n                        data-testid={`button-configure-${reseller.id}`}\n                      >\n                        Configure\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7466},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/super-admin.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Users, Server, Network, Building2, ChevronRight, ChevronDown } from \"lucide-react\";\nimport { useState } from \"react\";\n\n//todo: remove mock functionality\ninterface TenantNode {\n  id: string;\n  name: string;\n  type: \"platform\" | \"reseller\" | \"customer\";\n  gstin?: string;\n  admins: number;\n  customers?: number;\n  vms: number;\n  k8sClusters: number;\n  revenue: number;\n  status: \"active\" | \"suspended\" | \"trial\";\n  children?: TenantNode[];\n}\n\nconst mockTenantTree: TenantNode = {\n  id: \"platform-root\",\n  name: \"AkashOne Platform\",\n  type: \"platform\",\n  admins: 5,\n  vms: 487,\n  k8sClusters: 23,\n  revenue: 2450000,\n  status: \"active\",\n  children: [\n    {\n      id: \"res-001\",\n      name: \"CloudTech Solutions\",\n      type: \"reseller\",\n      gstin: \"29ABCDE1234F1Z5\",\n      admins: 3,\n      customers: 45,\n      vms: 128,\n      k8sClusters: 8,\n      revenue: 245000,\n      status: \"active\",\n      children: [\n        {\n          id: \"cust-001\",\n          name: \"TechStart Solutions\",\n          type: \"customer\",\n          gstin: \"29XYZTE1234A1B2\",\n          admins: 2,\n          vms: 12,\n          k8sClusters: 2,\n          revenue: 45000,\n          status: \"active\",\n        },\n        {\n          id: \"cust-002\",\n          name: \"Digital Ventures Ltd\",\n          type: \"customer\",\n          gstin: \"29PQRST5678C2D3\",\n          admins: 1,\n          vms: 8,\n          k8sClusters: 1,\n          revenue: 32000,\n          status: \"active\",\n        },\n      ],\n    },\n    {\n      id: \"res-002\",\n      name: \"Enterprise Cloud Services\",\n      type: \"reseller\",\n      gstin: \"19MNOPQ9012R3S4\",\n      admins: 2,\n      customers: 18,\n      vms: 56,\n      k8sClusters: 4,\n      revenue: 124000,\n      status: \"active\",\n      children: [\n        {\n          id: \"cust-003\",\n          name: \"CloudOps Inc\",\n          type: \"customer\",\n          gstin: \"27UVWXY9012E3F4\",\n          admins: 2,\n          vms: 15,\n          k8sClusters: 2,\n          revenue: 58000,\n          status: \"active\",\n        },\n      ],\n    },\n    {\n      id: \"dir-001\",\n      name: \"Direct Customers\",\n      type: \"reseller\",\n      admins: 8,\n      customers: 32,\n      vms: 303,\n      k8sClusters: 11,\n      revenue: 2081000,\n      status: \"active\",\n      children: [\n        {\n          id: \"cust-004\",\n          name: \"Global Tech Corp\",\n          type: \"customer\",\n          gstin: \"07ABCXY1234Z5W6\",\n          admins: 5,\n          vms: 45,\n          k8sClusters: 3,\n          revenue: 185000,\n          status: \"active\",\n        },\n        {\n          id: \"cust-005\",\n          name: \"Innovation Labs\",\n          type: \"customer\",\n          gstin: \"29DEFGH5678A1B2\",\n          admins: 3,\n          vms: 28,\n          k8sClusters: 2,\n          revenue: 98000,\n          status: \"trial\",\n        },\n      ],\n    },\n  ],\n};\n\nfunction TenantTreeNode({ node, level = 0 }: { node: TenantNode; level?: number }) {\n  const [isExpanded, setIsExpanded] = useState(level < 2);\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"platform\":\n        return \"bg-chart-1/10 text-chart-1 border-chart-1/20\";\n      case \"reseller\":\n        return \"bg-chart-2/10 text-chart-2 border-chart-2/20\";\n      case \"customer\":\n        return \"bg-chart-3/10 text-chart-3 border-chart-3/20\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-chart-2/10 text-chart-2 border-chart-2/20\";\n      case \"trial\":\n        return \"bg-chart-3/10 text-chart-3 border-chart-3/20\";\n      case \"suspended\":\n        return \"bg-destructive/10 text-destructive border-destructive/20\";\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div\n        className=\"rounded-lg border p-4 hover-elevate cursor-pointer\"\n        style={{ marginLeft: `${level * 2}rem` }}\n        onClick={() => node.children && setIsExpanded(!isExpanded)}\n        data-testid={`tenant-node-${node.id}`}\n      >\n        <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {node.children && node.children.length > 0 && (\n              <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6 flex-shrink-0\">\n                {isExpanded ? (\n                  <ChevronDown className=\"h-4 w-4\" />\n                ) : (\n                  <ChevronRight className=\"h-4 w-4\" />\n                )}\n              </Button>\n            )}\n            {(!node.children || node.children.length === 0) && <div className=\"w-6\" />}\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2 flex-wrap\">\n                <h4 className=\"font-semibold\" data-testid={`tenant-name-${node.id}`}>\n                  {node.name}\n                </h4>\n                <Badge variant=\"outline\" className={getTypeColor(node.type)}>\n                  {node.type}\n                </Badge>\n                <Badge variant=\"outline\" className={getStatusColor(node.status)}>\n                  {node.status}\n                </Badge>\n              </div>\n              {node.gstin && (\n                <p className=\"text-sm text-muted-foreground font-mono mt-1\">\n                  GSTIN: {node.gstin}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-6 flex-wrap\">\n            <div className=\"text-center\">\n              <p className=\"text-xs text-muted-foreground\">Admins</p>\n              <p className=\"text-sm font-semibold\">{node.admins}</p>\n            </div>\n            {node.customers !== undefined && (\n              <div className=\"text-center\">\n                <p className=\"text-xs text-muted-foreground\">Customers</p>\n                <p className=\"text-sm font-semibold\">{node.customers}</p>\n              </div>\n            )}\n            <div className=\"text-center\">\n              <p className=\"text-xs text-muted-foreground\">VMs</p>\n              <p className=\"text-sm font-semibold\">{node.vms}</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-xs text-muted-foreground\">K8s</p>\n              <p className=\"text-sm font-semibold\">{node.k8sClusters}</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-xs text-muted-foreground\">Revenue</p>\n              <p className=\"text-sm font-semibold font-mono\">\n                ₹{(node.revenue / 1000).toFixed(0)}K\n              </p>\n            </div>\n            <Button size=\"sm\" variant=\"outline\" data-testid={`button-manage-${node.id}`}>\n              Manage\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {isExpanded && node.children && (\n        <div className=\"space-y-2\">\n          {node.children.map((child) => (\n            <TenantTreeNode key={child.id} node={child} level={level + 1} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function SuperAdmin() {\n  const totalStats = {\n    resellers: 3,\n    customers: 95,\n    totalVMs: 487,\n    totalK8s: 23,\n    totalAdmins: 18,\n    totalRevenue: 2450000,\n  };\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Super Admin Panel</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Hierarchical tenant management and platform control\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"bg-chart-1/10 text-chart-1 border-chart-1/20\">\n          <Shield className=\"h-3 w-3 mr-1\" />\n          Super Admin Access\n        </Badge>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Resellers</p>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-resellers-admin\">\n              {totalStats.resellers}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Customers</p>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalStats.customers}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total VMs</p>\n            <Server className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalStats.totalVMs}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">K8s Clusters</p>\n            <Network className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalStats.totalK8s}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Admins</p>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalStats.totalAdmins}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Revenue</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₹{(totalStats.totalRevenue / 100000).toFixed(1)}L</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-base font-medium\">Tenant Hierarchy</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Hierarchical view of all tenants, resellers, and customers\n            </p>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-2\">\n          <TenantTreeNode node={mockTenantTree} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11131},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE - Azure Inspired */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  /* Azure Light Mode Colors */\n  --background: 0 0% 100%;\n  \n  --foreground: 210 15% 15%;\n\n  --border: 210 15% 85%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 210 15% 15%;\n\n  --card-border: 210 15% 90%;\n\n  --sidebar: 0 0% 98%;\n\n  --sidebar-foreground: 210 15% 15%;\n\n  --sidebar-border: 210 15% 88%;\n\n  --sidebar-primary: 207 100% 42%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 210 20% 96%;\n\n  --sidebar-accent-foreground: 210 15% 15%;\n\n  --sidebar-ring: 207 100% 42%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 210 15% 15%;\n\n  --popover-border: 210 15% 88%;\n\n  --primary: 207 100% 42%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 20% 96%;\n\n  --secondary-foreground: 210 15% 15%;\n\n  --muted: 210 20% 96%;\n\n  --muted-foreground: 210 10% 40%;\n\n  --accent: 207 100% 42%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 85% 58%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 210 15% 92%;\n  --ring: 207 100% 42%;\n  \n  /* Azure Chart Colors */\n  --chart-1: 207 100% 42%;\n  --chart-2: 142 70% 45%;\n  --chart-3: 40 95% 55%;\n  --chart-4: 205 100% 85%;\n  --chart-5: 0 85% 58%;\n\n  --font-sans: 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Inter', sans-serif;\n  --font-serif: 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Inter', sans-serif;\n  --font-mono: 'Cascadia Code', 'JetBrains Mono', 'Consolas', monospace;\n  --radius: 0.375rem; /* 6px - Azure style */\n  --shadow-2xs: 0px 2px 0px 0px hsl(207, 100%, 42% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(207, 100%, 42% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(207, 100%, 42% / 0.00), 0px 1px 2px -1px hsl(207, 100%, 42% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(207, 100%, 42% / 0.00), 0px 1px 2px -1px hsl(207, 100%, 42% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(207, 100%, 42% / 0.00), 0px 2px 4px -1px hsl(207, 100%, 42% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(207, 100%, 42% / 0.00), 0px 4px 6px -1px hsl(207, 100%, 42% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(207, 100%, 42% / 0.00), 0px 8px 10px -1px hsl(207, 100%, 42% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(207, 100%, 42% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n/* DARK MODE - Azure Inspired */\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  /* Azure Dark Mode Colors */\n  --background: 220 20% 10%;\n\n  --foreground: 0 0% 100%;\n\n  --border: 220 15% 25%;\n\n  --card: 220 18% 14%;\n\n  --card-foreground: 0 0% 100%;\n\n  --card-border: 220 12% 20%;\n\n  --sidebar: 220 18% 14%;\n\n  --sidebar-foreground: 0 0% 100%;\n\n  --sidebar-border: 220 15% 25%;\n\n  --sidebar-primary: 207 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 16% 18%;\n\n  --sidebar-accent-foreground: 0 0% 100%;\n\n  --sidebar-ring: 207 100% 50%;\n\n  --popover: 220 20% 10%;\n\n  --popover-foreground: 0 0% 100%;\n\n  --popover-border: 220 12% 22%;\n\n  --primary: 207 100% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 16% 18%;\n\n  --secondary-foreground: 0 0% 100%;\n\n  --muted: 220 16% 18%;\n\n  --muted-foreground: 210 10% 70%;\n\n  --accent: 207 100% 50%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 85% 58%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 15% 20%;\n  --ring: 207 100% 50%;\n\n  /* Azure Chart Colors - Dark Mode */\n  --chart-1: 207 100% 50%;\n  --chart-2: 142 70% 45%;\n  --chart-3: 40 95% 55%;\n  --chart-4: 205 100% 85%;\n  --chart-5: 0 85% 58%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 0% / 0.30);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 0% / 0.25), 0px 1px 2px -1px hsl(220 15% 0% / 0.30);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 0% / 0.35), 0px 2px 4px -2px hsl(220 15% 0% / 0.30);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 0% / 0.40), 0px 3px 6px -3px hsl(220 15% 0% / 0.35);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 15% 0% / 0.45), 0px 4px 8px -4px hsl(220 15% 0% / 0.35);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 15% 0% / 0.50), 0px 8px 12px -6px hsl(220 15% 0% / 0.40);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 0% / 0.60);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n","size_bytes":10229},"client/src/pages/admin-rights.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, Search, Shield, UserPlus } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n//todo: remove mock functionality\ninterface AdminUser {\n  id: string;\n  name: string;\n  email: string;\n  role: \"super_admin\" | \"platform_admin\" | \"reseller_admin\" | \"customer_admin\";\n  tenantId: string;\n  tenantName: string;\n  permissions: {\n    manageVMs: boolean;\n    manageNetworks: boolean;\n    manageStorage: boolean;\n    manageK8s: boolean;\n    manageBilling: boolean;\n    manageUsers: boolean;\n    manageTenants: boolean;\n    viewReports: boolean;\n  };\n  status: \"active\" | \"inactive\";\n  lastLogin: string;\n}\n\nconst mockAdmins: AdminUser[] = [\n  {\n    id: \"admin-001\",\n    name: \"John Doe\",\n    email: \"john@akashone.com\",\n    role: \"super_admin\",\n    tenantId: \"platform-root\",\n    tenantName: \"AkashOne Platform\",\n    permissions: {\n      manageVMs: true,\n      manageNetworks: true,\n      manageStorage: true,\n      manageK8s: true,\n      manageBilling: true,\n      manageUsers: true,\n      manageTenants: true,\n      viewReports: true,\n    },\n    status: \"active\",\n    lastLogin: \"2024-10-07 10:30 AM\",\n  },\n  {\n    id: \"admin-002\",\n    name: \"Sarah Johnson\",\n    email: \"sarah@cloudtech.com\",\n    role: \"reseller_admin\",\n    tenantId: \"res-001\",\n    tenantName: \"CloudTech Solutions\",\n    permissions: {\n      manageVMs: true,\n      manageNetworks: true,\n      manageStorage: true,\n      manageK8s: true,\n      manageBilling: true,\n      manageUsers: true,\n      manageTenants: false,\n      viewReports: true,\n    },\n    status: \"active\",\n    lastLogin: \"2024-10-07 09:15 AM\",\n  },\n  {\n    id: \"admin-003\",\n    name: \"Mike Chen\",\n    email: \"mike@techstart.com\",\n    role: \"customer_admin\",\n    tenantId: \"cust-001\",\n    tenantName: \"TechStart Solutions\",\n    permissions: {\n      manageVMs: true,\n      manageNetworks: true,\n      manageStorage: true,\n      manageK8s: false,\n      manageBilling: false,\n      manageUsers: true,\n      manageTenants: false,\n      viewReports: true,\n    },\n    status: \"active\",\n    lastLogin: \"2024-10-07 08:45 AM\",\n  },\n];\n\nexport default function AdminRights() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedAdmin, setSelectedAdmin] = useState<AdminUser | null>(null);\n  const { toast } = useToast();\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case \"super_admin\":\n        return \"bg-chart-1/10 text-chart-1 border-chart-1/20\";\n      case \"platform_admin\":\n        return \"bg-chart-2/10 text-chart-2 border-chart-2/20\";\n      case \"reseller_admin\":\n        return \"bg-chart-3/10 text-chart-3 border-chart-3/20\";\n      case \"customer_admin\":\n        return \"bg-chart-4/10 text-chart-4 border-chart-4/20\";\n      default:\n        return \"\";\n    }\n  };\n\n  const handleAddAdmin = () => {\n    toast({\n      title: \"Add Administrator\",\n      description: \"Opening admin creation wizard\",\n    });\n  };\n\n  const handleEditPermissions = (admin: AdminUser) => {\n    setSelectedAdmin(admin);\n  };\n\n  const filteredAdmins = mockAdmins.filter(\n    (admin) =>\n      admin.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      admin.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      admin.tenantName.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Admin Rights Management</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage administrator roles and permissions across all tenants\n          </p>\n        </div>\n        <Button onClick={handleAddAdmin} data-testid=\"button-add-admin\">\n          <UserPlus className=\"h-4 w-4 mr-2\" />\n          Add Administrator\n        </Button>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Super Admins</p>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">1</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Full platform access</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Platform Admins</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">0</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Platform level</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Reseller Admins</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">1</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Reseller level</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Customer Admins</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">1</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Customer level</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-3\">\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n              <CardTitle className=\"text-base font-medium\">Administrator List</CardTitle>\n              <div className=\"relative w-full max-w-sm\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by name, email, or tenant...\"\n                  className=\"pl-9\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"input-search-admins\"\n                />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Tenant</TableHead>\n                    <TableHead>Last Login</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead></TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredAdmins.map((admin) => (\n                    <TableRow key={admin.id} className=\"hover-elevate\">\n                      <TableCell className=\"font-medium\" data-testid={`admin-name-${admin.id}`}>\n                        {admin.name}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {admin.email}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className={getRoleColor(admin.role)}>\n                          {admin.role.replace(\"_\", \" \")}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-sm\">{admin.tenantName}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {admin.lastLogin}\n                      </TableCell>\n                      <TableCell>\n                        <Badge\n                          variant=\"outline\"\n                          className={\n                            admin.status === \"active\"\n                              ? \"bg-chart-2/10 text-chart-2 border-chart-2/20\"\n                              : \"bg-muted text-muted-foreground\"\n                          }\n                        >\n                          {admin.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleEditPermissions(admin)}\n                          data-testid={`button-edit-${admin.id}`}\n                        >\n                          Edit\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium\">\n              {selectedAdmin ? \"Edit Permissions\" : \"Permission Overview\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {selectedAdmin ? (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium\">{selectedAdmin.name}</p>\n                  <p className=\"text-sm text-muted-foreground\">{selectedAdmin.email}</p>\n                  <Badge variant=\"outline\" className={getRoleColor(selectedAdmin.role)}>\n                    {selectedAdmin.role.replace(\"_\", \" \")}\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-4 pt-4 border-t\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"perm-vms\" className=\"text-sm\">\n                      Manage VMs\n                    </Label>\n                    <Switch\n                      id=\"perm-vms\"\n                      checked={selectedAdmin.permissions.manageVMs}\n                      data-testid=\"switch-manage-vms\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"perm-networks\" className=\"text-sm\">\n                      Manage Networks\n                    </Label>\n                    <Switch\n                      id=\"perm-networks\"\n                      checked={selectedAdmin.permissions.manageNetworks}\n                      data-testid=\"switch-manage-networks\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"perm-storage\" className=\"text-sm\">\n                      Manage Storage\n                    </Label>\n                    <Switch\n                      id=\"perm-storage\"\n                      checked={selectedAdmin.permissions.manageStorage}\n                      data-testid=\"switch-manage-storage\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"perm-k8s\" className=\"text-sm\">\n                      Manage Kubernetes\n                    </Label>\n                    <Switch\n                      id=\"perm-k8s\"\n                      checked={selectedAdmin.permissions.manageK8s}\n                      data-testid=\"switch-manage-k8s\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"perm-billing\" className=\"text-sm\">\n                      Manage Billing\n                    </Label>\n                    <Switch\n                      id=\"perm-billing\"\n                      checked={selectedAdmin.permissions.manageBilling}\n                      data-testid=\"switch-manage-billing\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"perm-users\" className=\"text-sm\">\n                      Manage Users\n                    </Label>\n                    <Switch\n                      id=\"perm-users\"\n                      checked={selectedAdmin.permissions.manageUsers}\n                      data-testid=\"switch-manage-users\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"perm-tenants\" className=\"text-sm\">\n                      Manage Tenants\n                    </Label>\n                    <Switch\n                      id=\"perm-tenants\"\n                      checked={selectedAdmin.permissions.manageTenants}\n                      disabled={selectedAdmin.role !== \"super_admin\"}\n                      data-testid=\"switch-manage-tenants\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"perm-reports\" className=\"text-sm\">\n                      View Reports\n                    </Label>\n                    <Switch\n                      id=\"perm-reports\"\n                      checked={selectedAdmin.permissions.viewReports}\n                      data-testid=\"switch-view-reports\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button className=\"flex-1\" data-testid=\"button-save-permissions\">\n                    Save Changes\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setSelectedAdmin(null)}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Select an administrator from the list to view and edit their permissions.\n                </p>\n                <div className=\"space-y-2 pt-4 border-t\">\n                  <h4 className=\"text-sm font-medium\">Permission Types:</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Manage VMs</li>\n                    <li>• Manage Networks</li>\n                    <li>• Manage Storage</li>\n                    <li>• Manage Kubernetes</li>\n                    <li>• Manage Billing</li>\n                    <li>• Manage Users</li>\n                    <li>• Manage Tenants</li>\n                    <li>• View Reports</li>\n                  </ul>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15515},"client/src/components/examples/Resellers.tsx":{"content":"import Resellers from '../../pages/resellers';\n\nexport default function ResellersExample() {\n  return <Resellers />;\n}\n","size_bytes":119},"client/src/components/examples/CreateVMDialog.tsx":{"content":"import { CreateVMDialog } from '../create-vm-dialog';\n\nexport default function CreateVMDialogExample() {\n  return (\n    <CreateVMDialog \n      onCreateVM={(data) => console.log('Creating VM:', data)}\n    />\n  );\n}\n","size_bytes":214},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":677},"client/src/pages/ssl-certificates.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Plus, AlertCircle, CheckCircle, Lock, RefreshCw } from \"lucide-react\";\n\nexport default function SSLCertificates() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <Shield className=\"h-8 w-8\" />\n            SSL Certificate Manager\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Automated SSL/TLS certificate provisioning and management\n          </p>\n        </div>\n        <Button data-testid=\"button-request-cert\" disabled>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Request Certificate\n        </Button>\n      </div>\n\n      <Card className=\"border-amber-200 dark:border-amber-900 bg-amber-50 dark:bg-amber-950/20\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start gap-3\">\n            <AlertCircle className=\"h-5 w-5 text-amber-600 dark:text-amber-500 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-amber-900 dark:text-amber-100\">Let's Encrypt Integration Required</p>\n              <p className=\"text-sm text-amber-700 dark:text-amber-300 mt-1\">\n                This feature requires Let's Encrypt ACME protocol integration and DNS/HTTP challenge validation setup. Configure automated certificate renewal and domain verification.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader>\n            <Lock className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Free SSL Certificates</CardTitle>\n            <CardDescription>\n              Let's Encrypt certificates at no cost with automatic renewal\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• Domain Validation (DV)</li>\n              <li>• Wildcard certificates</li>\n              <li>• 90-day validity period</li>\n              <li>• Unlimited issuance</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <RefreshCw className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Auto-Renewal</CardTitle>\n            <CardDescription>\n              Automatic certificate renewal before expiration\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• Automatic renewal at 30 days</li>\n              <li>• Zero-downtime deployment</li>\n              <li>• Email notifications</li>\n              <li>• Renewal history tracking</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <Shield className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Easy Integration</CardTitle>\n            <CardDescription>\n              One-click integration with your load balancers and VMs\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• Load balancer SSL termination</li>\n              <li>• Direct VM installation</li>\n              <li>• Multi-domain support</li>\n              <li>• Certificate deployment</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>No SSL Certificates</CardTitle>\n          <CardDescription>Secure your domains with free SSL certificates</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center py-12\">\n          <Shield className=\"h-16 w-16 text-muted-foreground mb-4\" />\n          <p className=\"text-center text-muted-foreground mb-6 max-w-md\">\n            SSL certificates encrypt data between your users and your servers, ensuring secure connections and building trust.\n          </p>\n          <Button disabled data-testid=\"button-request-first-cert\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Request Your First Certificate\n          </Button>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Supported Validation Methods</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"space-y-1\">\n              <p className=\"font-medium text-sm\">HTTP-01 Challenge</p>\n              <p className=\"text-xs text-muted-foreground\">\n                Validates domain ownership by serving a file over HTTP\n              </p>\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"font-medium text-sm\">DNS-01 Challenge</p>\n              <p className=\"text-xs text-muted-foreground\">\n                Validates by adding a TXT record to your DNS zone (supports wildcards)\n              </p>\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"font-medium text-sm\">TLS-ALPN-01 Challenge</p>\n              <p className=\"text-xs text-muted-foreground\">\n                Validates using TLS with ALPN extension\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Implementation Checklist</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Frontend certificate management UI ready</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>ACME protocol client integration pending</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>DNS API integration for DNS-01 challenges</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>Certificate storage and deployment automation</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>Auto-renewal cron job configuration</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7021},"client/src/pages/payment-gateways.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CreditCard, Settings, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { SiStripe, SiRazorpay, SiPaypal } from \"react-icons/si\";\n\nexport default function PaymentGateways() {\n  const gateways = [\n    {\n      name: \"Stripe\",\n      icon: SiStripe,\n      description: \"Accept credit cards, digital wallets, and bank transfers globally\",\n      status: \"not_configured\",\n      features: [\"Credit/Debit Cards\", \"UPI\", \"Digital Wallets\", \"Subscriptions\"],\n    },\n    {\n      name: \"Razorpay\",\n      icon: SiRazorpay,\n      description: \"Leading payment gateway for Indian businesses with UPI and netbanking\",\n      status: \"not_configured\",\n      features: [\"UPI\", \"Credit/Debit Cards\", \"Netbanking\", \"Wallets\"],\n    },\n    {\n      name: \"PayPal\",\n      icon: SiPaypal,\n      description: \"Global payment platform with buyer and seller protection\",\n      status: \"not_configured\",\n      features: [\"PayPal Balance\", \"Credit Cards\", \"Buy Now Pay Later\", \"International\"],\n    },\n  ];\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <CreditCard className=\"h-8 w-8\" />\n            Payment Gateway Configuration\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Configure payment gateways to accept customer payments\n          </p>\n        </div>\n        <Button data-testid=\"button-add-gateway\" disabled>\n          <Settings className=\"h-4 w-4 mr-2\" />\n          Configure Gateway\n        </Button>\n      </div>\n\n      <Card className=\"border-amber-200 dark:border-amber-900 bg-amber-50 dark:bg-amber-950/20\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start gap-3\">\n            <AlertCircle className=\"h-5 w-5 text-amber-600 dark:text-amber-500 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-amber-900 dark:text-amber-100\">Backend Configuration Required</p>\n              <p className=\"text-sm text-amber-700 dark:text-amber-300 mt-1\">\n                This feature requires backend integration with payment gateway APIs. Configure API keys in your server environment to enable payment processing.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {gateways.map((gateway) => {\n          const IconComponent = gateway.icon;\n          return (\n            <Card key={gateway.name} data-testid={`card-gateway-${gateway.name.toLowerCase()}`}>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <IconComponent className=\"h-8 w-8\" />\n                  <Badge variant=\"secondary\" data-testid={`badge-status-${gateway.name.toLowerCase()}`}>\n                    Not Configured\n                  </Badge>\n                </div>\n                <CardTitle className=\"mt-4\">{gateway.name}</CardTitle>\n                <CardDescription>{gateway.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-sm font-medium mb-2\">Supported Payment Methods:</p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {gateway.features.map((feature) => (\n                        <Badge key={feature} variant=\"outline\" className=\"text-xs\">\n                          {feature}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                  <Button\n                    className=\"w-full\"\n                    variant=\"outline\"\n                    disabled\n                    data-testid={`button-configure-${gateway.name.toLowerCase()}`}\n                  >\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Configure {gateway.name}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Implementation Checklist</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <span>Frontend UI designed and ready</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span>Backend API integration pending</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span>Payment gateway credentials configuration required</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span>Webhook endpoints setup needed</span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5406},"client/src/pages/team-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserPlus, Shield, Trash2, Mail, CheckCircle, Clock } from \"lucide-react\";\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string | null;\n  isSystem: boolean;\n}\n\ninterface TeamMember {\n  id: string;\n  email: string;\n  userId: string | null;\n  organizationId: string;\n  status: \"invited\" | \"active\" | \"inactive\";\n  invitedBy: string;\n  invitedAt: string;\n  joinedAt: string | null;\n  roles: Role[];\n}\n\nexport default function TeamManagement() {\n  const { toast } = useToast();\n  const [inviteDialogOpen, setInviteDialogOpen] = useState(false);\n  const [roleDialogOpen, setRoleDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedMember, setSelectedMember] = useState<TeamMember | null>(null);\n  const [inviteEmail, setInviteEmail] = useState(\"\");\n  const [selectedRoleId, setSelectedRoleId] = useState(\"\");\n\n  // Fetch team members\n  const { data: teamMembers = [], isLoading: loadingMembers } = useQuery<TeamMember[]>({\n    queryKey: [\"/api/iam/team-members\"],\n  });\n\n  // Fetch available roles\n  const { data: roles = [] } = useQuery<Role[]>({\n    queryKey: [\"/api/iam/roles\"],\n  });\n\n  // Invite team member mutation\n  const inviteMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const res = await apiRequest(\"POST\", \"/api/iam/team-members\", { email });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/iam/team-members\"] });\n      setInviteDialogOpen(false);\n      setInviteEmail(\"\");\n      toast({\n        title: \"Invitation Sent\",\n        description: \"Team member invitation has been sent successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to invite team member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Assign role mutation\n  const assignRoleMutation = useMutation({\n    mutationFn: async ({ userId, roleId }: { userId: string; roleId: string }) => {\n      const res = await apiRequest(\"POST\", `/api/iam/users/${userId}/roles`, { roleId });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/iam/team-members\"] });\n      setRoleDialogOpen(false);\n      setSelectedMember(null);\n      toast({\n        title: \"Role Assigned\",\n        description: \"Role has been assigned successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove role mutation\n  const removeRoleMutation = useMutation({\n    mutationFn: async ({ userId, roleId }: { userId: string; roleId: string }) => {\n      const res = await apiRequest(\"DELETE\", `/api/iam/users/${userId}/roles/${roleId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/iam/team-members\"] });\n      toast({\n        title: \"Role Removed\",\n        description: \"Role has been removed successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete team member mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (memberId: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/iam/team-members/${memberId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/iam/team-members\"] });\n      setDeleteDialogOpen(false);\n      setSelectedMember(null);\n      toast({\n        title: \"Member Removed\",\n        description: \"Team member has been removed successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove team member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInvite = () => {\n    if (!inviteEmail) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter an email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    inviteMutation.mutate(inviteEmail);\n  };\n\n  const handleAssignRole = () => {\n    if (!selectedMember?.userId || !selectedRoleId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a role\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    assignRoleMutation.mutate({\n      userId: selectedMember.userId,\n      roleId: selectedRoleId,\n    });\n  };\n\n  const handleRemoveRole = (userId: string, roleId: string) => {\n    removeRoleMutation.mutate({ userId, roleId });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return (\n          <Badge variant=\"default\" className=\"gap-1\" data-testid={`badge-status-active`}>\n            <CheckCircle className=\"h-3 w-3\" />\n            Active\n          </Badge>\n        );\n      case \"invited\":\n        return (\n          <Badge variant=\"secondary\" className=\"gap-1\" data-testid={`badge-status-invited`}>\n            <Clock className=\"h-3 w-3\" />\n            Invited\n          </Badge>\n        );\n      case \"inactive\":\n        return (\n          <Badge variant=\"outline\" className=\"gap-1\" data-testid={`badge-status-inactive`}>\n            Inactive\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (loadingMembers) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-4 border-solid border-primary border-r-transparent\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Loading team members...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-team-management\">\n            Team Management\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage team members and their access permissions\n          </p>\n        </div>\n        <Dialog open={inviteDialogOpen} onOpenChange={setInviteDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-invite-member\">\n              <UserPlus className=\"mr-2 h-4 w-4\" />\n              Invite Member\n            </Button>\n          </DialogTrigger>\n          <DialogContent data-testid=\"dialog-invite-member\">\n            <DialogHeader>\n              <DialogTitle>Invite Team Member</DialogTitle>\n              <DialogDescription>\n                Send an invitation to a new team member via email.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"member@example.com\"\n                  value={inviteEmail}\n                  onChange={(e) => setInviteEmail(e.target.value)}\n                  data-testid=\"input-invite-email\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setInviteDialogOpen(false)}\n                data-testid=\"button-cancel-invite\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleInvite}\n                disabled={inviteMutation.isPending}\n                data-testid=\"button-send-invite\"\n              >\n                {inviteMutation.isPending ? \"Sending...\" : \"Send Invitation\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Team Members</CardTitle>\n          <CardDescription>\n            {teamMembers.length} member{teamMembers.length !== 1 ? \"s\" : \"\"} in your organization\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {teamMembers.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Mail className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n              <h3 className=\"mt-4 text-lg font-semibold\">No team members yet</h3>\n              <p className=\"text-muted-foreground mt-2\">\n                Get started by inviting your first team member.\n              </p>\n              <Button\n                className=\"mt-4\"\n                onClick={() => setInviteDialogOpen(true)}\n                data-testid=\"button-invite-first-member\"\n              >\n                <UserPlus className=\"mr-2 h-4 w-4\" />\n                Invite Member\n              </Button>\n            </div>\n          ) : (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Roles</TableHead>\n                    <TableHead>Invited</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {teamMembers.map((member) => (\n                    <TableRow key={member.id} data-testid={`row-member-${member.id}`}>\n                      <TableCell className=\"font-medium\" data-testid={`text-email-${member.id}`}>\n                        {member.email}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(member.status)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {member.roles.length === 0 ? (\n                            <span className=\"text-sm text-muted-foreground\">No roles</span>\n                          ) : (\n                            member.roles.map((role) => (\n                              <Badge\n                                key={role.id}\n                                variant=\"secondary\"\n                                className=\"gap-1\"\n                                data-testid={`badge-role-${role.id}`}\n                              >\n                                <Shield className=\"h-3 w-3\" />\n                                {role.name}\n                                {member.userId && !role.isSystem && (\n                                  <button\n                                    className=\"ml-1 hover:text-destructive\"\n                                    onClick={() => handleRemoveRole(member.userId!, role.id)}\n                                    data-testid={`button-remove-role-${role.id}`}\n                                  >\n                                    ×\n                                  </button>\n                                )}\n                              </Badge>\n                            ))\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {new Date(member.invitedAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end gap-2\">\n                          {member.userId && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedMember(member);\n                                setRoleDialogOpen(true);\n                              }}\n                              data-testid={`button-manage-roles-${member.id}`}\n                            >\n                              <Shield className=\"h-4 w-4 mr-1\" />\n                              Manage Roles\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedMember(member);\n                              setDeleteDialogOpen(true);\n                            }}\n                            data-testid={`button-remove-member-${member.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Assign Role Dialog */}\n      <Dialog open={roleDialogOpen} onOpenChange={setRoleDialogOpen}>\n        <DialogContent data-testid=\"dialog-assign-role\">\n          <DialogHeader>\n            <DialogTitle>Assign Role</DialogTitle>\n            <DialogDescription>\n              Assign a role to {selectedMember?.email}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Select Role</Label>\n              <Select value={selectedRoleId} onValueChange={setSelectedRoleId}>\n                <SelectTrigger data-testid=\"select-role\">\n                  <SelectValue placeholder=\"Select a role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {roles.map((role) => (\n                    <SelectItem\n                      key={role.id}\n                      value={role.id}\n                      data-testid={`select-item-role-${role.id}`}\n                    >\n                      <div className=\"flex flex-col\">\n                        <span className=\"font-medium\">{role.name}</span>\n                        {role.description && (\n                          <span className=\"text-xs text-muted-foreground\">\n                            {role.description}\n                          </span>\n                        )}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            {selectedMember && (\n              <div className=\"space-y-2\">\n                <Label>Current Roles</Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedMember.roles.length === 0 ? (\n                    <span className=\"text-sm text-muted-foreground\">No roles assigned</span>\n                  ) : (\n                    selectedMember.roles.map((role) => (\n                      <Badge key={role.id} variant=\"secondary\">\n                        {role.name}\n                      </Badge>\n                    ))\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setRoleDialogOpen(false);\n                setSelectedMember(null);\n              }}\n              data-testid=\"button-cancel-assign-role\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleAssignRole}\n              disabled={assignRoleMutation.isPending || !selectedRoleId}\n              data-testid=\"button-confirm-assign-role\"\n            >\n              {assignRoleMutation.isPending ? \"Assigning...\" : \"Assign Role\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent data-testid=\"dialog-delete-member\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Remove Team Member</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to remove {selectedMember?.email} from your organization? This\n              action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => selectedMember && deleteMutation.mutate(selectedMember.id)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Removing...\" : \"Remove Member\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":18221},"client/src/pages/pricing-calculator.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calculator, Server, HardDrive, Network, AlertCircle, CheckCircle, TrendingUp } from \"lucide-react\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function PricingCalculator() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n          <Calculator className=\"h-8 w-8\" />\n          Pricing Calculator\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Estimate your infrastructure costs before provisioning resources\n        </p>\n      </div>\n\n      <Card className=\"border-amber-200 dark:border-amber-900 bg-amber-50 dark:bg-amber-950/20\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start gap-3\">\n            <AlertCircle className=\"h-5 w-5 text-amber-600 dark:text-amber-500 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-amber-900 dark:text-amber-100\">Pricing Data Configuration Required</p>\n              <p className=\"text-sm text-amber-700 dark:text-amber-300 mt-1\">\n                This feature requires pricing data to be configured in the backend. Set up resource pricing tiers and regional rates to enable cost estimation.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 lg:grid-cols-3\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Resource Configuration</CardTitle>\n              <CardDescription>Select your infrastructure requirements</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid gap-6 sm:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"vm-type\" data-testid=\"label-vm-type\">Virtual Machine Type</Label>\n                  <Select disabled>\n                    <SelectTrigger id=\"vm-type\" data-testid=\"select-vm-type\">\n                      <SelectValue placeholder=\"Select VM type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"small\">Small (2 vCPU, 4GB RAM)</SelectItem>\n                      <SelectItem value=\"medium\">Medium (4 vCPU, 8GB RAM)</SelectItem>\n                      <SelectItem value=\"large\">Large (8 vCPU, 16GB RAM)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"vm-count\" data-testid=\"label-vm-count\">Number of VMs</Label>\n                  <Input\n                    id=\"vm-count\"\n                    type=\"number\"\n                    placeholder=\"1\"\n                    defaultValue=\"1\"\n                    disabled\n                    data-testid=\"input-vm-count\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"storage\" data-testid=\"label-storage\">Storage (GB)</Label>\n                  <Input\n                    id=\"storage\"\n                    type=\"number\"\n                    placeholder=\"100\"\n                    defaultValue=\"100\"\n                    disabled\n                    data-testid=\"input-storage\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bandwidth\" data-testid=\"label-bandwidth\">Bandwidth (GB/month)</Label>\n                  <Input\n                    id=\"bandwidth\"\n                    type=\"number\"\n                    placeholder=\"1000\"\n                    defaultValue=\"1000\"\n                    disabled\n                    data-testid=\"input-bandwidth\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"region\" data-testid=\"label-region\">Region</Label>\n                  <Select disabled>\n                    <SelectTrigger id=\"region\" data-testid=\"select-region\">\n                      <SelectValue placeholder=\"Select region\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"mumbai\">Mumbai, India</SelectItem>\n                      <SelectItem value=\"delhi\">Delhi, India</SelectItem>\n                      <SelectItem value=\"bangalore\">Bangalore, India</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"billing-cycle\" data-testid=\"label-billing-cycle\">Billing Cycle</Label>\n                  <Select disabled>\n                    <SelectTrigger id=\"billing-cycle\" data-testid=\"select-billing-cycle\">\n                      <SelectValue placeholder=\"Monthly\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"hourly\">Hourly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                      <SelectItem value=\"annual\">Annual (Save 20%)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button className=\"w-full\" disabled data-testid=\"button-calculate\">\n                <Calculator className=\"h-4 w-4 mr-2\" />\n                Calculate Estimated Cost\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Implementation Checklist</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Frontend calculator UI designed</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <span>Backend pricing API integration pending</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <span>Resource pricing tiers configuration required</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <span>Regional pricing variations setup needed</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card className=\"border-primary/20\">\n            <CardHeader>\n              <CardTitle>Cost Estimate</CardTitle>\n              <CardDescription>Your monthly infrastructure cost</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center py-6\">\n                <div className=\"text-4xl font-bold\" data-testid=\"text-total-cost\">₹0.00</div>\n                <p className=\"text-sm text-muted-foreground mt-1\">per month + GST</p>\n              </div>\n\n              <div className=\"space-y-3 pt-4 border-t\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"flex items-center gap-2\">\n                    <Server className=\"h-4 w-4 text-muted-foreground\" />\n                    Compute\n                  </span>\n                  <span className=\"font-medium\" data-testid=\"text-compute-cost\">₹0.00</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"flex items-center gap-2\">\n                    <HardDrive className=\"h-4 w-4 text-muted-foreground\" />\n                    Storage\n                  </span>\n                  <span className=\"font-medium\" data-testid=\"text-storage-cost\">₹0.00</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"flex items-center gap-2\">\n                    <Network className=\"h-4 w-4 text-muted-foreground\" />\n                    Network\n                  </span>\n                  <span className=\"font-medium\" data-testid=\"text-network-cost\">₹0.00</span>\n                </div>\n              </div>\n\n              <Button className=\"w-full\" variant=\"outline\" disabled data-testid=\"button-save-estimate\">\n                Save Estimate\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <TrendingUp className=\"h-4 w-4\" />\n                Cost Optimization Tips\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-sm text-muted-foreground space-y-2\">\n              <p>• Choose annual billing for 20% savings</p>\n              <p>• Use reserved instances for predictable workloads</p>\n              <p>• Enable auto-scaling to optimize resource usage</p>\n              <p>• Monitor and right-size your instances</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9697},"client/src/pages/cdn.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Cloudy, Plus, AlertCircle, CheckCircle, Globe, Zap, Shield } from \"lucide-react\";\n\nexport default function CDN() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <Cloudy className=\"h-8 w-8\" />\n            CDN Service\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Content delivery network for global acceleration and performance\n          </p>\n        </div>\n        <Button data-testid=\"button-create-cdn\" disabled>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create CDN Distribution\n        </Button>\n      </div>\n\n      <Card className=\"border-amber-200 dark:border-amber-900 bg-amber-50 dark:bg-amber-950/20\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start gap-3\">\n            <AlertCircle className=\"h-5 w-5 text-amber-600 dark:text-amber-500 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-amber-900 dark:text-amber-100\">CDN Provider Integration Required</p>\n              <p className=\"text-sm text-amber-700 dark:text-amber-300 mt-1\">\n                This feature requires integration with CDN providers (Cloudflare, AWS CloudFront, or custom edge servers). Configure origin servers, cache policies, and SSL certificates.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader>\n            <Zap className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Lightning Fast</CardTitle>\n            <CardDescription>\n              Deliver content from edge locations closest to your users\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• 200+ global edge locations</li>\n              <li>• Sub-50ms latency worldwide</li>\n              <li>• HTTP/2 and HTTP/3 support</li>\n              <li>• Intelligent routing</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <Shield className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>DDoS Protection</CardTitle>\n            <CardDescription>\n              Built-in security to protect your content and applications\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• Automatic DDoS mitigation</li>\n              <li>• WAF integration</li>\n              <li>• SSL/TLS encryption</li>\n              <li>• Bot management</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <Globe className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Global Scale</CardTitle>\n            <CardDescription>\n              Handle traffic spikes with unlimited bandwidth capacity\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• Unlimited bandwidth</li>\n              <li>• Auto-scaling capacity</li>\n              <li>• 99.99% uptime SLA</li>\n              <li>• Real-time analytics</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>No CDN Distributions</CardTitle>\n          <CardDescription>Accelerate your content delivery globally</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center py-12\">\n          <Cloudy className=\"h-16 w-16 text-muted-foreground mb-4\" />\n          <p className=\"text-center text-muted-foreground mb-6 max-w-md\">\n            CDN caches your content at edge locations worldwide, reducing latency and improving user experience for global audiences.\n          </p>\n          <Button disabled data-testid=\"button-create-first-cdn\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Your First CDN Distribution\n          </Button>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Supported Content Types</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Static files (Images, CSS, JavaScript)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Video streaming (HLS, DASH)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Dynamic content acceleration</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>API responses</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Software downloads</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Implementation Checklist</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Frontend CDN management UI ready</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>CDN provider API integration pending</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>Origin server configuration and validation</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>Cache policy and TTL management</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>SSL certificate provisioning for CDN</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7074},"client/src/pages/auto-scaling.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, Plus, AlertCircle, CheckCircle, Activity, Settings } from \"lucide-react\";\n\nexport default function AutoScaling() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <TrendingUp className=\"h-8 w-8\" />\n            VM Auto-Scaling Groups\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Automatically scale your infrastructure based on demand\n          </p>\n        </div>\n        <Button data-testid=\"button-create-asg\" disabled>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Auto-Scaling Group\n        </Button>\n      </div>\n\n      <Card className=\"border-amber-200 dark:border-amber-900 bg-amber-50 dark:bg-amber-950/20\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start gap-3\">\n            <AlertCircle className=\"h-5 w-5 text-amber-600 dark:text-amber-500 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-amber-900 dark:text-amber-100\">CloudStack Auto-Scaling Configuration Required</p>\n              <p className=\"text-sm text-amber-700 dark:text-amber-300 mt-1\">\n                This feature requires CloudStack auto-scaling capabilities and monitoring infrastructure. Configure scaling policies, health checks, and CloudWatch-compatible metrics collection.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader>\n            <TrendingUp className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Dynamic Scaling</CardTitle>\n            <CardDescription>\n              Automatically adjust capacity based on real-time metrics\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• CPU-based scaling</li>\n              <li>• Memory-based scaling</li>\n              <li>• Custom metric scaling</li>\n              <li>• Predictive scaling</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <Activity className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Health Monitoring</CardTitle>\n            <CardDescription>\n              Continuous health checks with automatic instance replacement\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• HTTP/HTTPS health checks</li>\n              <li>• TCP port monitoring</li>\n              <li>• Custom health endpoints</li>\n              <li>• Auto-healing</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <Settings className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Scaling Policies</CardTitle>\n            <CardDescription>\n              Fine-grained control over scaling behavior and limits\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• Target tracking policies</li>\n              <li>• Step scaling policies</li>\n              <li>• Scheduled scaling</li>\n              <li>• Cooldown periods</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>No Auto-Scaling Groups</CardTitle>\n          <CardDescription>Create your first auto-scaling group to handle traffic automatically</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center py-12\">\n          <TrendingUp className=\"h-16 w-16 text-muted-foreground mb-4\" />\n          <p className=\"text-center text-muted-foreground mb-6 max-w-md\">\n            Auto-scaling groups automatically adjust the number of VM instances based on demand, ensuring optimal performance and cost efficiency.\n          </p>\n          <Button disabled data-testid=\"button-create-first-asg\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Your First Auto-Scaling Group\n          </Button>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Scaling Triggers</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>CPU utilization threshold</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Memory usage percentage</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Network traffic volume</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Request count per second</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Custom CloudWatch metrics</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Time-based schedules</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Implementation Checklist</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Frontend auto-scaling UI ready</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>CloudStack auto-scaling API integration</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>Metrics collection infrastructure setup</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>Health check endpoint configuration</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>Load balancer integration for distribution</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7351},"client/src/pages/load-balancer.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Network, Plus, AlertCircle, CheckCircle, Activity, Shield } from \"lucide-react\";\n\nexport default function LoadBalancer() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <Network className=\"h-8 w-8\" />\n            Load Balancer Service\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Distribute traffic across multiple instances for high availability\n          </p>\n        </div>\n        <Button data-testid=\"button-create-lb\" disabled>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Load Balancer\n        </Button>\n      </div>\n\n      <Card className=\"border-amber-200 dark:border-amber-900 bg-amber-50 dark:bg-amber-950/20\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start gap-3\">\n            <AlertCircle className=\"h-5 w-5 text-amber-600 dark:text-amber-500 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-amber-900 dark:text-amber-100\">CloudStack Load Balancer Configuration Required</p>\n              <p className=\"text-sm text-amber-700 dark:text-amber-300 mt-1\">\n                This feature requires CloudStack load balancer service configuration. Ensure your CloudStack zone has load balancing capabilities enabled and network offerings configured.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader>\n            <Activity className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Layer 4 Load Balancing</CardTitle>\n            <CardDescription>\n              TCP/UDP load balancing with high performance and low latency\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• TCP/UDP protocol support</li>\n              <li>• Session persistence</li>\n              <li>• Health check monitoring</li>\n              <li>• SSL passthrough</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <Shield className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>Layer 7 Load Balancing</CardTitle>\n            <CardDescription>\n              HTTP/HTTPS load balancing with advanced routing capabilities\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• URL-based routing</li>\n              <li>• SSL termination</li>\n              <li>• Cookie-based affinity</li>\n              <li>• Content-based routing</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <Network className=\"h-8 w-8 text-primary mb-2\" />\n            <CardTitle>High Availability</CardTitle>\n            <CardDescription>\n              Automatic failover and redundancy for mission-critical applications\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>• Multi-zone deployment</li>\n              <li>• Automatic failover</li>\n              <li>• Health monitoring</li>\n              <li>• 99.99% uptime SLA</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>No Load Balancers</CardTitle>\n          <CardDescription>Get started by creating your first load balancer</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center py-12\">\n          <Network className=\"h-16 w-16 text-muted-foreground mb-4\" />\n          <p className=\"text-center text-muted-foreground mb-6 max-w-md\">\n            Load balancers distribute incoming traffic across multiple backend instances to ensure high availability and reliability.\n          </p>\n          <Button disabled data-testid=\"button-create-first-lb\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Your First Load Balancer\n          </Button>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Implementation Checklist</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <span>Frontend load balancer management UI ready</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span>CloudStack load balancer API integration pending</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span>Network offering with load balancer capability required</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span>Health check and monitoring integration needed</span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5666},"client/src/pages/gpu-instances.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Zap, Plus, AlertCircle, CheckCircle, Cpu, HardDrive } from \"lucide-react\";\n\nexport default function GPUInstances() {\n  const gpuTypes = [\n    {\n      name: \"NVIDIA T4\",\n      memory: \"16 GB GDDR6\",\n      cores: \"2560 CUDA cores\",\n      performance: \"8.1 TFLOPS FP32\",\n      useCases: [\"Machine Learning Training\", \"Video Encoding\", \"Graphics Rendering\"],\n    },\n    {\n      name: \"NVIDIA A100\",\n      memory: \"40 GB HBM2\",\n      cores: \"6912 CUDA cores\",\n      performance: \"19.5 TFLOPS FP32\",\n      useCases: [\"Large Language Models\", \"Deep Learning\", \"Scientific Computing\"],\n    },\n    {\n      name: \"NVIDIA V100\",\n      memory: \"32 GB HBM2\",\n      cores: \"5120 CUDA cores\",\n      performance: \"15.7 TFLOPS FP32\",\n      useCases: [\"AI Research\", \"Data Analytics\", \"HPC Workloads\"],\n    },\n  ];\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <Zap className=\"h-8 w-8\" />\n            GPU Instances\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            High-performance NVIDIA GPU compute for AI, ML, and rendering workloads\n          </p>\n        </div>\n        <Button data-testid=\"button-launch-gpu\" disabled>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Launch GPU Instance\n        </Button>\n      </div>\n\n      <Card className=\"border-amber-200 dark:border-amber-900 bg-amber-50 dark:bg-amber-950/20\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start gap-3\">\n            <AlertCircle className=\"h-5 w-5 text-amber-600 dark:text-amber-500 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-amber-900 dark:text-amber-100\">GPU Hardware and CloudStack Configuration Required</p>\n              <p className=\"text-sm text-amber-700 dark:text-amber-300 mt-1\">\n                This feature requires physical GPU servers in your CloudStack infrastructure. Configure GPU-enabled service offerings and ensure NVIDIA drivers and CUDA toolkit are installed.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-6 lg:grid-cols-3\">\n        {gpuTypes.map((gpu) => (\n          <Card key={gpu.name} data-testid={`card-gpu-${gpu.name.toLowerCase().replace(/\\s/g, '-')}`}>\n            <CardHeader>\n              <div className=\"flex items-center justify-between mb-2\">\n                <Zap className=\"h-8 w-8 text-primary\" />\n                <Badge variant=\"secondary\" data-testid={`badge-status-${gpu.name.toLowerCase().replace(/\\s/g, '-')}`}>\n                  Not Available\n                </Badge>\n              </div>\n              <CardTitle>{gpu.name}</CardTitle>\n              <CardDescription>Professional GPU for compute workloads</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Memory</span>\n                  <span className=\"font-medium\">{gpu.memory}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">CUDA Cores</span>\n                  <span className=\"font-medium\">{gpu.cores}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Performance</span>\n                  <span className=\"font-medium\">{gpu.performance}</span>\n                </div>\n              </div>\n\n              <div className=\"pt-3 border-t\">\n                <p className=\"text-xs font-medium mb-2\">Ideal For:</p>\n                <div className=\"space-y-1\">\n                  {gpu.useCases.map((useCase) => (\n                    <div key={useCase} className=\"text-xs text-muted-foreground\">\n                      • {useCase}\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <Button\n                className=\"w-full\"\n                variant=\"outline\"\n                disabled\n                data-testid={`button-configure-${gpu.name.toLowerCase().replace(/\\s/g, '-')}`}\n              >\n                Launch with {gpu.name}\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Cpu className=\"h-5 w-5\" />\n              Pre-installed Software\n            </CardTitle>\n            <CardDescription>GPU instances come with essential tools pre-configured</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2 text-sm\">\n              <li className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>NVIDIA GPU drivers</span>\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>CUDA Toolkit and cuDNN</span>\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Docker with NVIDIA Container Runtime</span>\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>PyTorch, TensorFlow, and JAX</span>\n              </li>\n              <li className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span>Jupyter Notebook environment</span>\n              </li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Implementation Checklist</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              <span>Frontend GPU management UI ready</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>Physical GPU servers required in datacenter</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>CloudStack GPU-enabled service offerings setup</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>GPU driver and CUDA toolkit configuration</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>VM templates with ML frameworks preparation</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7604},"client/src/pages/feature-management.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Settings,\n  Server,\n  Network,\n  Receipt,\n  HardDrive,\n  Database,\n  Globe,\n  CreditCard,\n  Calculator,\n  Zap,\n  Shield,\n  Cloudy,\n  TrendingUp,\n  Container,\n} from \"lucide-react\";\nimport type { FeatureFlag } from \"@shared/schema\";\n\nconst iconMap: Record<string, any> = {\n  Server,\n  Container,\n  Database,\n  Globe,\n  HardDrive,\n  Receipt,\n  CreditCard,\n  Calculator,\n  Network,\n  Zap,\n  Shield,\n  Cloudy,\n  TrendingUp,\n};\n\nexport default function FeatureManagement() {\n  const { toast } = useToast();\n\n  // Fetch all feature flags\n  const { data: features = [], isLoading } = useQuery<FeatureFlag[]>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  // Toggle feature mutation\n  const toggleFeatureMutation = useMutation({\n    mutationFn: async ({ id, enabled }: { id: string; enabled: boolean }) => {\n      return apiRequest(\"PATCH\", `/api/feature-flags/${id}`, { enabled });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/feature-flags\"] });\n      toast({\n        title: variables.enabled ? \"Feature Enabled\" : \"Feature Disabled\",\n        description: \"Feature flag updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Failed to update feature flag\",\n      });\n    },\n  });\n\n  // Group features by category\n  const categorizedFeatures = features.reduce((acc, feature) => {\n    if (!acc[feature.category]) {\n      acc[feature.category] = [];\n    }\n    acc[feature.category].push(feature);\n    return acc;\n  }, {} as Record<string, FeatureFlag[]>);\n\n  const categories = Object.keys(categorizedFeatures).sort();\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n          <Settings className=\"h-8 w-8\" />\n          Feature Management\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Control which features are visible to resellers and customers\n        </p>\n      </div>\n\n      <Card className=\"border-primary/20 bg-primary/5\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start gap-3\">\n            <Shield className=\"h-5 w-5 text-primary mt-0.5\" />\n            <div>\n              <p className=\"font-medium\">Super Admin Feature Control</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Enable features only when your backend infrastructure is ready. Disabled features will be hidden from all users including resellers and customers.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {isLoading ? (\n        <Card>\n          <CardContent className=\"py-12\">\n            <div className=\"text-center text-muted-foreground\">Loading features...</div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {categories.map((category) => (\n            <Card key={category}>\n              <CardHeader>\n                <CardTitle className=\"text-xl\">{category}</CardTitle>\n                <CardDescription>\n                  {category === \"Compute\" && \"Virtual machines, containers, and compute services\"}\n                  {category === \"Networking\" && \"Network infrastructure and connectivity\"}\n                  {category === \"Billing\" && \"Payment and billing management\"}\n                  {category === \"Storage\" && \"Data storage and management\"}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-[50px]\"></TableHead>\n                      <TableHead>Feature</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead className=\"w-[100px]\">Status</TableHead>\n                      <TableHead className=\"w-[100px] text-right\">Action</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {categorizedFeatures[category].map((feature) => {\n                      const IconComponent = feature.icon ? iconMap[feature.icon] : Settings;\n                      return (\n                        <TableRow key={feature.id} data-testid={`row-feature-${feature.key}`}>\n                          <TableCell>\n                            {IconComponent && <IconComponent className=\"h-5 w-5 text-muted-foreground\" />}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\" data-testid={`text-feature-name-${feature.key}`}>\n                              {feature.name}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm text-muted-foreground\" data-testid={`text-feature-description-${feature.key}`}>\n                              {feature.description}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge\n                              variant={feature.enabled ? \"default\" : \"secondary\"}\n                              data-testid={`badge-status-${feature.key}`}\n                            >\n                              {feature.enabled ? \"Enabled\" : \"Disabled\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <Switch\n                              checked={feature.enabled}\n                              onCheckedChange={(enabled) => {\n                                toggleFeatureMutation.mutate({ id: feature.id, enabled });\n                              }}\n                              disabled={toggleFeatureMutation.isPending}\n                              data-testid={`switch-toggle-${feature.key}`}\n                            />\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      <Card className=\"border-muted\">\n        <CardHeader>\n          <CardTitle className=\"text-base\">Implementation Notes</CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-sm text-muted-foreground space-y-2\">\n          <p>• <strong>Enabled features</strong> appear in the navigation menu and are accessible to all users</p>\n          <p>• <strong>Disabled features</strong> are completely hidden from the UI and blocked at the API level</p>\n          <p>• Enable features gradually as you complete backend integration and CloudStack configuration</p>\n          <p>• All feature changes take effect immediately without requiring users to reload</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7614},"server/middleware/feature-flags.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport type { IStorage } from \"../storage\";\n\nexport function createFeatureFlagMiddleware(storage: IStorage) {\n  return function requireFeature(featureKey: string) {\n    return async (req: Request, res: Response, next: NextFunction) => {\n      try {\n        const feature = await storage.getFeatureFlagByKey(featureKey);\n        \n        if (!feature) {\n          return res.status(404).json({\n            message: `Feature '${featureKey}' not found`,\n          });\n        }\n\n        if (!feature.enabled) {\n          return res.status(403).json({\n            message: `Feature '${feature.name}' is currently disabled`,\n            feature: featureKey,\n          });\n        }\n\n        next();\n      } catch (error: any) {\n        return res.status(500).json({\n          message: error.message || \"Error checking feature flag\",\n        });\n      }\n    };\n  };\n}\n","size_bytes":926},"client/src/pages/role-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Plus, Edit2, Trash2, CheckCircle2, Lock } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface Role {\n  id: string;\n  name: string;\n  description: string | null;\n  isSystem: boolean;\n  organizationId: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Permission {\n  id: string;\n  key: string;\n  name: string;\n  description: string | null;\n  category: string;\n  createdAt: string;\n}\n\nexport default function RoleManagement() {\n  const { toast } = useToast();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [permissionsDialogOpen, setPermissionsDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedRole, setSelectedRole] = useState<Role | null>(null);\n  const [roleName, setRoleName] = useState(\"\");\n  const [roleDescription, setRoleDescription] = useState(\"\");\n  const [selectedPermissions, setSelectedPermissions] = useState<Set<string>>(new Set());\n\n  // Fetch roles\n  const { data: roles = [], isLoading: loadingRoles } = useQuery<Role[]>({\n    queryKey: [\"/api/iam/roles\"],\n  });\n\n  // Fetch all permissions\n  const { data: allPermissions = [] } = useQuery<Permission[]>({\n    queryKey: [\"/api/iam/permissions\"],\n  });\n\n  // Fetch role permissions when a role is selected\n  const { data: rolePermissions = [] } = useQuery<Permission[]>({\n    queryKey: [\"/api/iam/roles\", selectedRole?.id, \"permissions\"],\n    enabled: !!selectedRole?.id,\n  });\n\n  // Create role mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: { name: string; description: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/iam/roles\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/iam/roles\"] });\n      setCreateDialogOpen(false);\n      setRoleName(\"\");\n      setRoleDescription(\"\");\n      toast({\n        title: \"Role Created\",\n        description: \"Custom role has been created successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update role mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: { name: string; description: string } }) => {\n      const res = await apiRequest(\"PATCH\", `/api/iam/roles/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/iam/roles\"] });\n      setEditDialogOpen(false);\n      setSelectedRole(null);\n      toast({\n        title: \"Role Updated\",\n        description: \"Role has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete role mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (roleId: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/iam/roles/${roleId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/iam/roles\"] });\n      setDeleteDialogOpen(false);\n      setSelectedRole(null);\n      toast({\n        title: \"Role Deleted\",\n        description: \"Role has been deleted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Assign permission mutation\n  const assignPermissionMutation = useMutation({\n    mutationFn: async ({ roleId, permissionId }: { roleId: string; permissionId: string }) => {\n      const res = await apiRequest(\"POST\", `/api/iam/roles/${roleId}/permissions`, {\n        permissionId,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      if (selectedRole) {\n        queryClient.invalidateQueries({\n          queryKey: [\"/api/iam/roles\", selectedRole.id, \"permissions\"],\n        });\n      }\n    },\n  });\n\n  // Remove permission mutation\n  const removePermissionMutation = useMutation({\n    mutationFn: async ({ roleId, permissionId }: { roleId: string; permissionId: string }) => {\n      const res = await apiRequest(\"DELETE\", `/api/iam/roles/${roleId}/permissions/${permissionId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      if (selectedRole) {\n        queryClient.invalidateQueries({\n          queryKey: [\"/api/iam/roles\", selectedRole.id, \"permissions\"],\n        });\n      }\n    },\n  });\n\n  const handleCreateRole = () => {\n    if (!roleName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Role name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createMutation.mutate({ name: roleName, description: roleDescription });\n  };\n\n  const handleUpdateRole = () => {\n    if (!selectedRole || !roleName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Role name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateMutation.mutate({\n      id: selectedRole.id,\n      data: { name: roleName, description: roleDescription },\n    });\n  };\n\n  const handleOpenEditDialog = (role: Role) => {\n    setSelectedRole(role);\n    setRoleName(role.name);\n    setRoleDescription(role.description || \"\");\n    setEditDialogOpen(true);\n  };\n\n  const handleOpenPermissionsDialog = (role: Role) => {\n    setSelectedRole(role);\n    setPermissionsDialogOpen(true);\n  };\n\n  const handleSavePermissions = async () => {\n    if (!selectedRole) return;\n\n    const currentPermissionIds = new Set(rolePermissions.map((p) => p.id));\n    const newPermissionIds = selectedPermissions;\n\n    // Add new permissions\n    for (const permId of Array.from(newPermissionIds)) {\n      if (!currentPermissionIds.has(permId)) {\n        await assignPermissionMutation.mutateAsync({\n          roleId: selectedRole.id,\n          permissionId: permId,\n        });\n      }\n    }\n\n    // Remove permissions\n    for (const permId of Array.from(currentPermissionIds)) {\n      if (!newPermissionIds.has(permId)) {\n        await removePermissionMutation.mutateAsync({\n          roleId: selectedRole.id,\n          permissionId: permId,\n        });\n      }\n    }\n\n    setPermissionsDialogOpen(false);\n    setSelectedRole(null);\n    setSelectedPermissions(new Set());\n    toast({\n      title: \"Permissions Updated\",\n      description: \"Role permissions have been updated successfully.\",\n    });\n  };\n\n  // Group permissions by category\n  const permissionsByCategory = allPermissions.reduce((acc, perm) => {\n    if (!acc[perm.category]) {\n      acc[perm.category] = [];\n    }\n    acc[perm.category].push(perm);\n    return acc;\n  }, {} as Record<string, Permission[]>);\n\n  // Initialize selected permissions when dialog opens\n  const handlePermissionsDialogOpenChange = (open: boolean) => {\n    if (open) {\n      const currentIds = new Set(rolePermissions.map((p) => p.id));\n      setSelectedPermissions(currentIds);\n    }\n    setPermissionsDialogOpen(open);\n  };\n\n  if (loadingRoles) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-4 border-solid border-primary border-r-transparent\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Loading roles...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const systemRoles = roles.filter((r) => r.isSystem);\n  const customRoles = roles.filter((r) => !r.isSystem);\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-role-management\">\n            Role Management\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Create custom roles and manage permissions\n          </p>\n        </div>\n        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-role\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Role\n            </Button>\n          </DialogTrigger>\n          <DialogContent data-testid=\"dialog-create-role\">\n            <DialogHeader>\n              <DialogTitle>Create Custom Role</DialogTitle>\n              <DialogDescription>\n                Create a new role with custom permissions for your organization.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role-name\">Role Name</Label>\n                <Input\n                  id=\"role-name\"\n                  placeholder=\"e.g., Developer, Support Agent\"\n                  value={roleName}\n                  onChange={(e) => setRoleName(e.target.value)}\n                  data-testid=\"input-role-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role-description\">Description</Label>\n                <Textarea\n                  id=\"role-description\"\n                  placeholder=\"Describe the purpose of this role...\"\n                  value={roleDescription}\n                  onChange={(e) => setRoleDescription(e.target.value)}\n                  rows={3}\n                  data-testid=\"input-role-description\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCreateDialogOpen(false)}\n                data-testid=\"button-cancel-create\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateRole}\n                disabled={createMutation.isPending}\n                data-testid=\"button-confirm-create\"\n              >\n                {createMutation.isPending ? \"Creating...\" : \"Create Role\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* System Roles */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Lock className=\"h-5 w-5\" />\n            System Roles\n          </CardTitle>\n          <CardDescription>\n            Built-in roles that cannot be modified or deleted\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Role Name</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {systemRoles.map((role) => (\n                  <TableRow key={role.id} data-testid={`row-role-${role.id}`}>\n                    <TableCell className=\"font-medium\">\n                      <div className=\"flex items-center gap-2\">\n                        <Shield className=\"h-4 w-4 text-primary\" />\n                        {role.name}\n                        <Badge variant=\"secondary\" className=\"ml-2\">\n                          System\n                        </Badge>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-muted-foreground\">\n                      {role.description || \"No description\"}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleOpenPermissionsDialog(role)}\n                        data-testid={`button-view-permissions-${role.id}`}\n                      >\n                        View Permissions\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Custom Roles */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Custom Roles</CardTitle>\n          <CardDescription>\n            {customRoles.length} custom role{customRoles.length !== 1 ? \"s\" : \"\"} in your organization\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {customRoles.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Shield className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n              <h3 className=\"mt-4 text-lg font-semibold\">No custom roles yet</h3>\n              <p className=\"text-muted-foreground mt-2\">\n                Create custom roles to define specific permissions for your team.\n              </p>\n              <Button\n                className=\"mt-4\"\n                onClick={() => setCreateDialogOpen(true)}\n                data-testid=\"button-create-first-role\"\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create Role\n              </Button>\n            </div>\n          ) : (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Role Name</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {customRoles.map((role) => (\n                    <TableRow key={role.id} data-testid={`row-role-${role.id}`}>\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          <Shield className=\"h-4 w-4\" />\n                          {role.name}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {role.description || \"No description\"}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleOpenPermissionsDialog(role)}\n                            data-testid={`button-manage-permissions-${role.id}`}\n                          >\n                            <Shield className=\"h-4 w-4 mr-1\" />\n                            Permissions\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleOpenEditDialog(role)}\n                            data-testid={`button-edit-role-${role.id}`}\n                          >\n                            <Edit2 className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedRole(role);\n                              setDeleteDialogOpen(true);\n                            }}\n                            data-testid={`button-delete-role-${role.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Role Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent data-testid=\"dialog-edit-role\">\n          <DialogHeader>\n            <DialogTitle>Edit Role</DialogTitle>\n            <DialogDescription>\n              Update the role name and description.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-role-name\">Role Name</Label>\n              <Input\n                id=\"edit-role-name\"\n                value={roleName}\n                onChange={(e) => setRoleName(e.target.value)}\n                data-testid=\"input-edit-role-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-role-description\">Description</Label>\n              <Textarea\n                id=\"edit-role-description\"\n                value={roleDescription}\n                onChange={(e) => setRoleDescription(e.target.value)}\n                rows={3}\n                data-testid=\"input-edit-role-description\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setEditDialogOpen(false)}\n              data-testid=\"button-cancel-edit\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleUpdateRole}\n              disabled={updateMutation.isPending}\n              data-testid=\"button-confirm-edit\"\n            >\n              {updateMutation.isPending ? \"Updating...\" : \"Update Role\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Manage Permissions Dialog */}\n      <Dialog open={permissionsDialogOpen} onOpenChange={handlePermissionsDialogOpenChange}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\" data-testid=\"dialog-manage-permissions\">\n          <DialogHeader>\n            <DialogTitle>\n              Manage Permissions for {selectedRole?.name}\n            </DialogTitle>\n            <DialogDescription>\n              Select which permissions this role should have.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-6 py-4\">\n            {Object.entries(permissionsByCategory).map(([category, permissions]) => (\n              <div key={category} className=\"space-y-3\">\n                <h4 className=\"font-semibold text-sm\">{category}</h4>\n                <Separator />\n                <div className=\"space-y-2\">\n                  {permissions.map((permission) => (\n                    <div\n                      key={permission.id}\n                      className=\"flex items-start space-x-3 p-2 rounded-md hover-elevate\"\n                    >\n                      <Checkbox\n                        id={permission.id}\n                        checked={selectedPermissions.has(permission.id)}\n                        onCheckedChange={(checked) => {\n                          const newSet = new Set(selectedPermissions);\n                          if (checked) {\n                            newSet.add(permission.id);\n                          } else {\n                            newSet.delete(permission.id);\n                          }\n                          setSelectedPermissions(newSet);\n                        }}\n                        disabled={selectedRole?.isSystem}\n                        data-testid={`checkbox-permission-${permission.id}`}\n                      />\n                      <div className=\"flex-1\">\n                        <Label\n                          htmlFor={permission.id}\n                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                        >\n                          {permission.name}\n                        </Label>\n                        {permission.description && (\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            {permission.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setPermissionsDialogOpen(false);\n                setSelectedRole(null);\n              }}\n              data-testid=\"button-cancel-permissions\"\n            >\n              {selectedRole?.isSystem ? \"Close\" : \"Cancel\"}\n            </Button>\n            {!selectedRole?.isSystem && (\n              <Button\n                onClick={handleSavePermissions}\n                disabled={assignPermissionMutation.isPending || removePermissionMutation.isPending}\n                data-testid=\"button-save-permissions\"\n              >\n                {assignPermissionMutation.isPending || removePermissionMutation.isPending\n                  ? \"Saving...\"\n                  : \"Save Permissions\"}\n              </Button>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent data-testid=\"dialog-delete-role\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Role</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete the role \"{selectedRole?.name}\"? This action cannot be\n              undone. Users with this role will lose their associated permissions.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => selectedRole && deleteMutation.mutate(selectedRole.id)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Deleting...\" : \"Delete Role\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":23656},"client/src/pages/user-discounts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Percent, Users, TrendingDown, Save } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  gstNumber: string;\n  accountType: string;\n  defaultDiscountPercentage: number;\n  status: string;\n}\n\nexport default function UserDiscounts() {\n  const { toast } = useToast();\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [discountValue, setDiscountValue] = useState<string>(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const updateDiscountMutation = useMutation({\n    mutationFn: async ({ userId, discountPercentage }: { userId: string; discountPercentage: number }) => {\n      const response = await fetch(`/api/users/${userId}/discount`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ discountPercentage }),\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to update discount\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"Discount percentage updated successfully\",\n      });\n      setSelectedUser(null);\n      setDiscountValue(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update discount percentage\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditDiscount = (user: User) => {\n    setSelectedUser(user);\n    setDiscountValue(user.defaultDiscountPercentage?.toString() || \"0\");\n  };\n\n  const handleSaveDiscount = () => {\n    if (!selectedUser) return;\n\n    const discount = parseFloat(discountValue);\n    if (isNaN(discount) || discount < 0 || discount > 100) {\n      toast({\n        title: \"Invalid Value\",\n        description: \"Discount percentage must be between 0 and 100\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateDiscountMutation.mutate({\n      userId: selectedUser.id,\n      discountPercentage: discount,\n    });\n  };\n\n  const getAccountTypeColor = (type: string) => {\n    switch (type) {\n      case \"super_admin\":\n        return \"bg-chart-1/10 text-chart-1 border-chart-1/20\";\n      case \"reseller\":\n        return \"bg-chart-2/10 text-chart-2 border-chart-2/20\";\n      case \"customer\":\n        return \"bg-chart-3/10 text-chart-3 border-chart-3/20\";\n      default:\n        return \"bg-muted/10 text-muted-foreground border-muted/20\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-chart-2/10 text-chart-2 border-chart-2/20\";\n      case \"suspended\":\n        return \"bg-destructive/10 text-destructive border-destructive/20\";\n      case \"invited\":\n        return \"bg-chart-3/10 text-chart-3 border-chart-3/20\";\n      default:\n        return \"\";\n    }\n  };\n\n  // Filter users (exclude super_admins and team_members)\n  const eligibleUsers = users.filter(\n    (user) => user.accountType === \"reseller\" || user.accountType === \"customer\"\n  );\n\n  // Apply search filter\n  const filteredUsers = eligibleUsers.filter(\n    (user) =>\n      user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.gstNumber.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Calculate statistics\n  const totalUsers = eligibleUsers.length;\n  const usersWithDiscounts = eligibleUsers.filter(\n    (user) => user.defaultDiscountPercentage > 0\n  ).length;\n  const averageDiscount =\n    eligibleUsers.length > 0\n      ? eligibleUsers.reduce((sum, user) => sum + (user.defaultDiscountPercentage || 0), 0) /\n        eligibleUsers.length\n      : 0;\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">User Discount Management</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Assign permanent discount percentages to resellers and customers\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Eligible Users</p>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-total-users\">\n              {totalUsers}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Resellers & Customers</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Users with Discounts</p>\n            <TrendingDown className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-discounted-users\">\n              {usersWithDiscounts}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {totalUsers > 0 ? Math.round((usersWithDiscounts / totalUsers) * 100) : 0}% of total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Average Discount</p>\n            <Percent className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"metric-avg-discount\">\n              {averageDiscount.toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Across all users</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between gap-4 flex-wrap\">\n            <h3 className=\"text-base font-medium\">User Discounts</h3>\n            <div className=\"flex-1 max-w-sm\">\n              <Input\n                placeholder=\"Search by name, email, or GST...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search-users\"\n              />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">Loading users...</div>\n          ) : filteredUsers.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              {searchTerm ? \"No users found matching your search\" : \"No eligible users found\"}\n            </div>\n          ) : (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Username</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>GST Number</TableHead>\n                    <TableHead>Account Type</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"text-right\">Discount %</TableHead>\n                    <TableHead></TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers.map((user) => (\n                    <TableRow key={user.id} className=\"hover-elevate\">\n                      <TableCell className=\"font-medium\" data-testid={`user-name-${user.id}`}>\n                        {user.username}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">{user.email}</TableCell>\n                      <TableCell className=\"font-mono text-sm\">{user.gstNumber}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className={getAccountTypeColor(user.accountType)}>\n                          {user.accountType}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className={getStatusColor(user.status)}>\n                          {user.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right font-medium\" data-testid={`discount-${user.id}`}>\n                        {user.defaultDiscountPercentage || 0}%\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleEditDiscount(user)}\n                          data-testid={`button-edit-discount-${user.id}`}\n                        >\n                          Edit\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={!!selectedUser} onOpenChange={(open) => !open && setSelectedUser(null)}>\n        <DialogContent data-testid=\"dialog-edit-discount\">\n          <DialogHeader>\n            <DialogTitle>Set Discount Percentage</DialogTitle>\n            <DialogDescription>\n              Assign a permanent discount percentage to {selectedUser?.username}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>User Details</Label>\n              <div className=\"rounded-md border p-3 space-y-1\">\n                <div className=\"flex items-center justify-between gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">Username:</span>\n                  <span className=\"text-sm font-medium\">{selectedUser?.username}</span>\n                </div>\n                <div className=\"flex items-center justify-between gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">Email:</span>\n                  <span className=\"text-sm font-medium\">{selectedUser?.email}</span>\n                </div>\n                <div className=\"flex items-center justify-between gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">Account Type:</span>\n                  <Badge variant=\"outline\" className={getAccountTypeColor(selectedUser?.accountType || \"\")}>\n                    {selectedUser?.accountType}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"discount-percentage\">Discount Percentage</Label>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  id=\"discount-percentage\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"0.1\"\n                  value={discountValue}\n                  onChange={(e) => setDiscountValue(e.target.value)}\n                  placeholder=\"Enter discount percentage\"\n                  data-testid=\"input-discount-percentage\"\n                />\n                <span className=\"text-muted-foreground\">%</span>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                This discount will be permanently applied to all invoices for this user\n              </p>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setSelectedUser(null)}\n              data-testid=\"button-cancel-discount\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSaveDiscount}\n              disabled={updateDiscountMutation.isPending}\n              data-testid=\"button-save-discount\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              {updateDiscountMutation.isPending ? \"Saving...\" : \"Save Discount\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13349},"client/src/pages/discount-coupons.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Pencil, Trash2, Tag, Calendar, Users, TrendingUp } from \"lucide-react\";\nimport type { DiscountCoupon } from \"@shared/schema\";\n\nexport default function DiscountCouponsPage() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingCoupon, setEditingCoupon] = useState<DiscountCoupon | null>(null);\n  const { toast } = useToast();\n\n  const { data: coupons = [], isLoading } = useQuery<DiscountCoupon[]>({\n    queryKey: [\"/api/coupons\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => apiRequest(\"/api/coupons\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/coupons\"] });\n      setIsCreateOpen(false);\n      toast({ title: \"Coupon created successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to create coupon\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) =>\n      apiRequest(`/api/coupons/${id}`, \"PATCH\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/coupons\"] });\n      setEditingCoupon(null);\n      toast({ title: \"Coupon updated successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to update coupon\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => apiRequest(`/api/coupons/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/coupons\"] });\n      toast({ title: \"Coupon deleted successfully!\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Failed to delete coupon\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center min-h-96\">\n          <div className=\"text-center\">\n            <div className=\"text-lg\">Loading discount coupons...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-coupons\">Discount Coupons</h1>\n          <p className=\"text-muted-foreground\">Create and manage discount coupons for your customers</p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-coupon\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Coupon\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create Discount Coupon</DialogTitle>\n              <DialogDescription>Create a new discount coupon for your customers</DialogDescription>\n            </DialogHeader>\n            <CouponForm\n              onSubmit={(data) => createMutation.mutate(data)}\n              isPending={createMutation.isPending}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-1 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Coupons</CardTitle>\n            <Tag className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-coupons\">{coupons.length}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-1 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Coupons</CardTitle>\n            <TrendingUp className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-active-coupons\">\n              {coupons.filter((c) => c.isActive).length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-1 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Uses</CardTitle>\n            <Users className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-total-uses\">\n              {coupons.reduce((sum, c) => sum + c.timesUsed, 0)}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between gap-1 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Expiring Soon</CardTitle>\n            <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"stat-expiring-soon\">\n              {coupons.filter((c) => {\n                if (!c.validUntil) return false;\n                const daysUntilExpiry = Math.ceil(\n                  (new Date(c.validUntil).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)\n                );\n                return daysUntilExpiry >= 0 && daysUntilExpiry <= 7;\n              }).length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All Coupons</CardTitle>\n          <CardDescription>Manage your discount coupons</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Code</TableHead>\n                <TableHead>Name</TableHead>\n                <TableHead>Discount</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Uses</TableHead>\n                <TableHead>Valid Until</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {coupons.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                    No coupons created yet. Create your first coupon to get started.\n                  </TableCell>\n                </TableRow>\n              ) : (\n                coupons.map((coupon) => (\n                  <TableRow key={coupon.id} data-testid={`row-coupon-${coupon.id}`}>\n                    <TableCell>\n                      <code className=\"px-2 py-1 bg-muted rounded text-sm font-mono\" data-testid={`text-code-${coupon.id}`}>\n                        {coupon.code}\n                      </code>\n                    </TableCell>\n                    <TableCell data-testid={`text-name-${coupon.id}`}>{coupon.name}</TableCell>\n                    <TableCell data-testid={`text-discount-${coupon.id}`}>\n                      {coupon.discountType === \"percentage\"\n                        ? `${coupon.discountValue}%`\n                        : `₹${coupon.discountValue}`}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" data-testid={`badge-duration-${coupon.id}`}>\n                        {coupon.durationType === \"once\"\n                          ? \"One-time\"\n                          : coupon.durationType === \"forever\"\n                          ? \"Forever\"\n                          : `${coupon.durationMonths}mo`}\n                      </Badge>\n                    </TableCell>\n                    <TableCell data-testid={`text-uses-${coupon.id}`}>\n                      {coupon.timesUsed}\n                      {coupon.maxUses ? ` / ${coupon.maxUses}` : \" / ∞\"}\n                    </TableCell>\n                    <TableCell data-testid={`text-validity-${coupon.id}`}>\n                      {coupon.validUntil\n                        ? new Date(coupon.validUntil).toLocaleDateString()\n                        : \"No expiry\"}\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        variant={coupon.isActive ? \"default\" : \"secondary\"}\n                        data-testid={`badge-status-${coupon.id}`}\n                      >\n                        {coupon.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Dialog open={editingCoupon?.id === coupon.id} onOpenChange={(open) => !open && setEditingCoupon(null)}>\n                          <DialogTrigger asChild>\n                            <Button\n                              size=\"icon\"\n                              variant=\"ghost\"\n                              onClick={() => setEditingCoupon(coupon)}\n                              data-testid={`button-edit-${coupon.id}`}\n                            >\n                              <Pencil className=\"w-4 h-4\" />\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-2xl\">\n                            <DialogHeader>\n                              <DialogTitle>Edit Coupon</DialogTitle>\n                              <DialogDescription>Update coupon details</DialogDescription>\n                            </DialogHeader>\n                            <CouponForm\n                              initialData={coupon}\n                              onSubmit={(data) => updateMutation.mutate({ id: coupon.id, data })}\n                              isPending={updateMutation.isPending}\n                            />\n                          </DialogContent>\n                        </Dialog>\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          onClick={() => {\n                            if (confirm(`Delete coupon \"${coupon.code}\"?`)) {\n                              deleteMutation.mutate(coupon.id);\n                            }\n                          }}\n                          data-testid={`button-delete-${coupon.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction CouponForm({\n  initialData,\n  onSubmit,\n  isPending,\n}: {\n  initialData?: DiscountCoupon;\n  onSubmit: (data: any) => void;\n  isPending: boolean;\n}) {\n  const [code, setCode] = useState(initialData?.code || \"\");\n  const [name, setName] = useState(initialData?.name || \"\");\n  const [description, setDescription] = useState(initialData?.description || \"\");\n  const [discountType, setDiscountType] = useState<\"percentage\" | \"fixed\">(\n    (initialData?.discountType as \"percentage\" | \"fixed\") || \"percentage\"\n  );\n  const [discountValue, setDiscountValue] = useState(initialData?.discountValue?.toString() || \"\");\n  const [durationType, setDurationType] = useState<\"once\" | \"forever\" | \"repeating\">(\n    (initialData?.durationType as \"once\" | \"forever\" | \"repeating\") || \"once\"\n  );\n  const [durationMonths, setDurationMonths] = useState(initialData?.durationMonths?.toString() || \"\");\n  const [maxUses, setMaxUses] = useState(initialData?.maxUses?.toString() || \"\");\n  const [minOrderAmount, setMinOrderAmount] = useState(initialData?.minOrderAmount?.toString() || \"\");\n  const [validUntil, setValidUntil] = useState(\n    initialData?.validUntil ? new Date(initialData.validUntil).toISOString().split(\"T\")[0] : \"\"\n  );\n  const [isActive, setIsActive] = useState(initialData?.isActive !== false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const data: any = {\n      code: code.toUpperCase(),\n      name,\n      description: description || undefined,\n      discountType,\n      discountValue: parseInt(discountValue),\n      durationType,\n      durationMonths: durationType === \"repeating\" ? parseInt(durationMonths) : undefined,\n      maxUses: maxUses ? parseInt(maxUses) : undefined,\n      minOrderAmount: minOrderAmount ? parseInt(minOrderAmount) : undefined,\n      validUntil: validUntil ? new Date(validUntil) : undefined,\n      isActive,\n    };\n\n    onSubmit(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"code\">Coupon Code *</Label>\n          <Input\n            id=\"code\"\n            data-testid=\"input-code\"\n            placeholder=\"SAVE20\"\n            value={code}\n            onChange={(e) => setCode(e.target.value.toUpperCase())}\n            required\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Display Name *</Label>\n          <Input\n            id=\"name\"\n            data-testid=\"input-name\"\n            placeholder=\"20% Off\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"description\">Description</Label>\n        <Textarea\n          id=\"description\"\n          data-testid=\"input-description\"\n          placeholder=\"Optional description for internal use\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"discountType\">Discount Type *</Label>\n          <Select value={discountType} onValueChange={(v) => setDiscountType(v as \"percentage\" | \"fixed\")}>\n            <SelectTrigger data-testid=\"select-discount-type\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"percentage\">Percentage (%)</SelectItem>\n              <SelectItem value=\"fixed\">Fixed Amount (₹)</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"discountValue\">\n            {discountType === \"percentage\" ? \"Percentage (1-100)\" : \"Amount in ₹\"} *\n          </Label>\n          <Input\n            id=\"discountValue\"\n            data-testid=\"input-discount-value\"\n            type=\"number\"\n            min=\"1\"\n            max={discountType === \"percentage\" ? \"100\" : undefined}\n            value={discountValue}\n            onChange={(e) => setDiscountValue(e.target.value)}\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"durationType\">Duration Type *</Label>\n          <Select value={durationType} onValueChange={(v) => setDurationType(v as \"once\" | \"forever\" | \"repeating\")}>\n            <SelectTrigger data-testid=\"select-duration-type\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"once\">One-time</SelectItem>\n              <SelectItem value=\"forever\">Forever</SelectItem>\n              <SelectItem value=\"repeating\">Repeating (Monthly)</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        {durationType === \"repeating\" && (\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"durationMonths\">Number of Months *</Label>\n            <Input\n              id=\"durationMonths\"\n              data-testid=\"input-duration-months\"\n              type=\"number\"\n              min=\"1\"\n              value={durationMonths}\n              onChange={(e) => setDurationMonths(e.target.value)}\n              required\n            />\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"maxUses\">Max Uses (optional)</Label>\n          <Input\n            id=\"maxUses\"\n            data-testid=\"input-max-uses\"\n            type=\"number\"\n            min=\"1\"\n            placeholder=\"Unlimited\"\n            value={maxUses}\n            onChange={(e) => setMaxUses(e.target.value)}\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"minOrderAmount\">Min Order Amount in ₹ (optional)</Label>\n          <Input\n            id=\"minOrderAmount\"\n            data-testid=\"input-min-order\"\n            type=\"number\"\n            min=\"0\"\n            placeholder=\"No minimum\"\n            value={minOrderAmount}\n            onChange={(e) => setMinOrderAmount(e.target.value)}\n          />\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"validUntil\">Valid Until (optional)</Label>\n          <Input\n            id=\"validUntil\"\n            data-testid=\"input-valid-until\"\n            type=\"date\"\n            value={validUntil}\n            onChange={(e) => setValidUntil(e.target.value)}\n          />\n        </div>\n        <div className=\"flex items-center space-x-2 pt-8\">\n          <Switch\n            id=\"isActive\"\n            data-testid=\"switch-active\"\n            checked={isActive}\n            onCheckedChange={setIsActive}\n          />\n          <Label htmlFor=\"isActive\">Active</Label>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end gap-2 pt-4\">\n        <Button type=\"submit\" disabled={isPending} data-testid=\"button-submit-coupon\">\n          {isPending ? \"Saving...\" : initialData ? \"Update Coupon\" : \"Create Coupon\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":19019},"client/src/pages/resource-tags.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tag, Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ResourceTags() {\n  const { data: featureFlags } = useQuery<Array<{ key: string; enabled: boolean }>>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  const isEnabled = featureFlags?.find(f => f.key === \"resource_tags\")?.enabled;\n\n  if (!isEnabled) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Tag className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <CardTitle>Resource Tags</CardTitle>\n            <CardDescription>\n              This feature is currently disabled. Contact your administrator to enable resource tagging.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Resource Tags</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Organize resources with key-value tags\n          </p>\n        </div>\n        <Button data-testid=\"button-create-tag\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Tag\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Tags</CardTitle>\n            <Tag className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-tags\">0</div>\n            <p className=\"text-xs text-muted-foreground\">No tags created</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Tagged Resources</CardTitle>\n            <Tag className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-tagged-resources\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Resources with tags</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Tag Categories</CardTitle>\n            <Tag className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-tag-categories\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Unique tag keys</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Resource Tags</CardTitle>\n          <CardDescription>Manage tags for organization and billing</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Tag className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">No tags yet</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-sm\">\n              Create tags to categorize your resources for better organization and cost tracking\n            </p>\n            <Button data-testid=\"button-create-first-tag\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Your First Tag\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4185},"client/src/pages/firewall.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Firewall() {\n  const { data: featureFlags } = useQuery<Array<{ key: string; enabled: boolean }>>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  const isEnabled = featureFlags?.find(f => f.key === \"firewall\")?.enabled;\n\n  if (!isEnabled) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Shield className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <CardTitle>Firewall Rules</CardTitle>\n            <CardDescription>\n              This feature is currently disabled. Contact your administrator to enable firewall management.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Firewall Rules</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage network firewall rules for traffic control\n          </p>\n        </div>\n        <Button data-testid=\"button-create-firewall-rule\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Rule\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Rules</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-rules\">0</div>\n            <p className=\"text-xs text-muted-foreground\">No rules configured</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Ingress Rules</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-ingress-rules\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Inbound traffic</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Egress Rules</CardTitle>\n            <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-egress-rules\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Outbound traffic</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Firewall Rules</CardTitle>\n          <CardDescription>Configure ingress and egress traffic rules</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Shield className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">No firewall rules</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-sm\">\n              Create firewall rules to control network traffic to and from your resources\n            </p>\n            <Button data-testid=\"button-create-first-rule\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Your First Rule\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4210},"client/src/pages/security-groups.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Lock, Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function SecurityGroups() {\n  const { data: featureFlags } = useQuery<Array<{ key: string; enabled: boolean }>>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  const isEnabled = featureFlags?.find(f => f.key === \"security_groups\")?.enabled;\n\n  if (!isEnabled) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Lock className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <CardTitle>Security Groups</CardTitle>\n            <CardDescription>\n              This feature is currently disabled. Contact your administrator to enable security groups.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Security Groups</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage VM security groups with custom rules\n          </p>\n        </div>\n        <Button data-testid=\"button-create-security-group\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Group\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Security Groups</CardTitle>\n            <Lock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-groups\">0</div>\n            <p className=\"text-xs text-muted-foreground\">No groups created</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Rules</CardTitle>\n            <Lock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-active-rules\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Total active rules</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Protected VMs</CardTitle>\n            <Lock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-protected-vms\">0</div>\n            <p className=\"text-xs text-muted-foreground\">VMs in groups</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Security Groups</CardTitle>\n          <CardDescription>Manage security groups and their rules</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Lock className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">No security groups</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-sm\">\n              Create security groups to organize and apply firewall rules to multiple VMs\n            </p>\n            <Button data-testid=\"button-create-first-group\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Your First Group\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4216},"client/src/pages/images-templates.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Image, Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ImagesTemplates() {\n  const { data: featureFlags } = useQuery<Array<{ key: string; enabled: boolean }>>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  const isEnabled = featureFlags?.find(f => f.key === \"images_templates\")?.enabled;\n\n  if (!isEnabled) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Image className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <CardTitle>Images & Templates</CardTitle>\n            <CardDescription>\n              This feature is currently disabled. Contact your administrator to enable image management.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Images & Templates</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage VM templates, ISOs, and custom images\n          </p>\n        </div>\n        <Button data-testid=\"button-upload-image\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Upload Image\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Templates</CardTitle>\n            <Image className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-templates\">0</div>\n            <p className=\"text-xs text-muted-foreground\">VM templates</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">ISOs</CardTitle>\n            <Image className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-isos\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Boot ISOs</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Custom Images</CardTitle>\n            <Image className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-custom-images\">0</div>\n            <p className=\"text-xs text-muted-foreground\">User images</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Images & Templates</CardTitle>\n          <CardDescription>Browse and manage custom VM images</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Image className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">No custom images</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-sm\">\n              Upload your custom VM templates and ISOs to quickly deploy standardized instances\n            </p>\n            <Button data-testid=\"button-upload-first-image\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Upload Your First Image\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4197},"client/src/pages/elastic-ip.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ElasticIP() {\n  const { data: featureFlags } = useQuery<Array<{ key: string; enabled: boolean }>>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  const isEnabled = featureFlags?.find(f => f.key === \"elastic_ip\")?.enabled;\n\n  if (!isEnabled) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <MapPin className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <CardTitle>Elastic IP Addresses</CardTitle>\n            <CardDescription>\n              This feature is currently disabled. Contact your administrator to enable Elastic IP management.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Elastic IP Addresses</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Reserve and manage static public IP addresses\n          </p>\n        </div>\n        <Button data-testid=\"button-allocate-ip\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Allocate IP\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total IPs</CardTitle>\n            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-ips\">0</div>\n            <p className=\"text-xs text-muted-foreground\">No IPs allocated</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Assigned</CardTitle>\n            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-assigned-ips\">0</div>\n            <p className=\"text-xs text-muted-foreground\">IPs in use</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Available</CardTitle>\n            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-available-ips\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Unassigned IPs</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Elastic IPs</CardTitle>\n          <CardDescription>Manage static public IP addresses</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <MapPin className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">No elastic IPs</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-sm\">\n              Allocate a static public IP address to maintain consistent connectivity for your resources\n            </p>\n            <Button data-testid=\"button-allocate-first-ip\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Allocate Your First IP\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4200},"client/src/pages/ssh-keys.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Key, Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function SSHKeys() {\n  const { data: featureFlags } = useQuery<Array<{ key: string; enabled: boolean }>>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  const isEnabled = featureFlags?.find(f => f.key === \"ssh_keys\")?.enabled;\n\n  if (!isEnabled) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Key className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <CardTitle>SSH Key Management</CardTitle>\n            <CardDescription>\n              This feature is currently disabled. Contact your administrator to enable SSH key management.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">SSH Key Management</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage SSH key pairs for secure VM access\n          </p>\n        </div>\n        <Button data-testid=\"button-add-ssh-key\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add SSH Key\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Keys</CardTitle>\n            <Key className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-keys\">0</div>\n            <p className=\"text-xs text-muted-foreground\">No keys registered</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Keys</CardTitle>\n            <Key className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-active-keys\">0</div>\n            <p className=\"text-xs text-muted-foreground\">In use</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Protected VMs</CardTitle>\n            <Key className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-protected-vms-ssh\">0</div>\n            <p className=\"text-xs text-muted-foreground\">VMs with SSH keys</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Your SSH Keys</CardTitle>\n          <CardDescription>Register and manage SSH key pairs</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Key className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">No SSH keys</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-sm\">\n              Register your SSH public key to securely access your virtual machines\n            </p>\n            <Button data-testid=\"button-add-first-key\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Your First SSH Key\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4149},"client/src/pages/activity-logs.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Activity, User as UserIcon, Clock, Globe } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { format } from \"date-fns\";\nimport type { UserActivity, User } from \"@shared/schema\";\n\nexport default function ActivityLogsPage() {\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"all\");\n\n  // Fetch all users for filtering\n  const { data: currentUser } = useQuery<User>({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  // Fetch activity logs with optional user filter\n  const { data: activities = [], isLoading } = useQuery<UserActivity[]>({\n    queryKey: selectedUserId === \"all\" \n      ? [\"/api/activity-logs\"] \n      : [`/api/activity-logs?userId=${selectedUserId}`],\n  });\n\n  // Get action badge variant based on action type\n  const getActionVariant = (action: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    if (action === \"login\") return \"outline\";\n    if (action.includes(\"create\")) return \"default\";\n    if (action.includes(\"delete\")) return \"destructive\";\n    if (action.includes(\"start\")) return \"secondary\";\n    return \"outline\";\n  };\n\n  // Format action for display\n  const formatAction = (action: string): string => {\n    return action\n      .split(\".\")\n      .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n      .join(\" \");\n  };\n\n  return (\n    <div className=\"flex-1 space-y-6 p-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Activity Logs</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-page-description\">\n            Track user actions and system events across your organization\n          </p>\n        </div>\n        <Activity className=\"h-8 w-8 text-muted-foreground\" />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Activity History</CardTitle>\n              <CardDescription>\n                View all user activities including logins and resource operations\n              </CardDescription>\n            </div>\n            <div className=\"w-[200px]\">\n              <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                <SelectTrigger data-testid=\"select-user-filter\">\n                  <SelectValue placeholder=\"Filter by user\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Users</SelectItem>\n                  {currentUser && (\n                    <SelectItem value={currentUser.id}>My Activities</SelectItem>\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\" data-testid=\"loading-activities\">\n              <p className=\"text-sm text-muted-foreground\">Loading activities...</p>\n            </div>\n          ) : activities.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-12\" data-testid=\"empty-activities\">\n              <Activity className=\"h-12 w-12 text-muted-foreground mb-4\" />\n              <p className=\"text-sm font-medium\">No activity logs found</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Start using the platform to see activity history\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Timestamp</TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>Action</TableHead>\n                    <TableHead>Resource</TableHead>\n                    <TableHead>Resource Name</TableHead>\n                    <TableHead>IP Address</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {activities.map((activity) => (\n                    <TableRow key={activity.id} data-testid={`row-activity-${activity.id}`}>\n                      <TableCell className=\"font-mono text-xs\" data-testid={`text-timestamp-${activity.id}`}>\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                          {format(new Date(activity.createdAt), \"MMM dd, yyyy HH:mm:ss\")}\n                        </div>\n                      </TableCell>\n                      <TableCell data-testid={`text-username-${activity.id}`}>\n                        <div className=\"flex items-center gap-2\">\n                          <UserIcon className=\"h-3 w-3 text-muted-foreground\" />\n                          <span className=\"font-medium\">{activity.username}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={getActionVariant(activity.action)} data-testid={`badge-action-${activity.id}`}>\n                          {formatAction(activity.action)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"capitalize\" data-testid={`text-resource-type-${activity.id}`}>\n                        {activity.resourceType || \"-\"}\n                      </TableCell>\n                      <TableCell className=\"font-mono text-xs\" data-testid={`text-resource-name-${activity.id}`}>\n                        {activity.resourceName || \"-\"}\n                      </TableCell>\n                      <TableCell className=\"font-mono text-xs\" data-testid={`text-ip-${activity.id}`}>\n                        <div className=\"flex items-center gap-2\">\n                          {activity.ipAddress && <Globe className=\"h-3 w-3 text-muted-foreground\" />}\n                          {activity.ipAddress || \"-\"}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <div className=\"text-xs text-muted-foreground\">\n        Showing {activities.length} {activities.length === 1 ? \"activity\" : \"activities\"}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6811},"client/src/pages/vpc.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Network, Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function VPC() {\n  const { data: featureFlags } = useQuery<Array<{ key: string; enabled: boolean }>>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  const isEnabled = featureFlags?.find(f => f.key === \"vpc\")?.enabled;\n\n  if (!isEnabled) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Network className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <CardTitle>Virtual Private Cloud</CardTitle>\n            <CardDescription>\n              This feature is currently disabled. Contact your administrator to enable VPC networking.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Virtual Private Cloud</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Create isolated VPC networks with custom CIDR\n          </p>\n        </div>\n        <Button data-testid=\"button-create-vpc\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create VPC\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total VPCs</CardTitle>\n            <Network className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-vpcs\">0</div>\n            <p className=\"text-xs text-muted-foreground\">No VPCs created</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Network Tiers</CardTitle>\n            <Network className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-network-tiers\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Total network tiers</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">ACL Rules</CardTitle>\n            <Network className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-acl-rules\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Network ACL rules</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Your VPCs</CardTitle>\n          <CardDescription>Manage isolated virtual private cloud networks</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Network className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">No VPCs yet</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-sm\">\n              Create a Virtual Private Cloud to isolate your resources in a custom network topology\n            </p>\n            <Button data-testid=\"button-create-first-vpc\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Your First VPC\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4197},"client/src/pages/volumes.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { HardDrive, Plus, Loader2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Volumes() {\n  const { data: featureFlags } = useQuery<Array<{ key: string; enabled: boolean }>>({\n    queryKey: [\"/api/feature-flags\"],\n  });\n\n  const isEnabled = featureFlags?.find(f => f.key === \"volumes\")?.enabled;\n\n  if (!isEnabled) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <HardDrive className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <CardTitle>Block Storage Volumes</CardTitle>\n            <CardDescription>\n              This feature is currently disabled. Contact your administrator to enable block storage management.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Block Storage Volumes</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Create and manage persistent block storage volumes\n          </p>\n        </div>\n        <Button data-testid=\"button-create-volume\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Volume\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Volumes</CardTitle>\n            <HardDrive className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-volumes\">0</div>\n            <p className=\"text-xs text-muted-foreground\">No volumes created yet</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Attached</CardTitle>\n            <HardDrive className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-attached-volumes\">0</div>\n            <p className=\"text-xs text-muted-foreground\">Volumes in use</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Storage</CardTitle>\n            <HardDrive className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-storage\">0 GB</div>\n            <p className=\"text-xs text-muted-foreground\">Total provisioned</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Volumes</CardTitle>\n          <CardDescription>Manage your block storage volumes</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <HardDrive className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">No volumes yet</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-sm\">\n              Create your first block storage volume to attach persistent storage to your virtual machines\n            </p>\n            <Button data-testid=\"button-create-first-volume\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Your First Volume\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4270}},"version":2}